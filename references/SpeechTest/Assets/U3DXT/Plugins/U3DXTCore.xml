<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/michael/Dropbox/Michael/unity/core/cs/bin/Release/U3DXTCore</name>
    </assembly>
    <members>
        <member name="T:U3DXT.iOS.Native.Foundation.NSData">
            <summary>
                <c>NSData</c> and its mutable subclass <c>NSMutableData</c> provide data objects, object-oriented wrappers for byte buffers. Data objects let simple allocated buffers (that is, data with no embedded pointers) take on the behavior of Foundation objects.
            </summary>
            <remarks>
                <p>
                    <c>NSData</c> creates static data objects, and <c>NSMutableData</c> creates dynamic data objects. <c>NSData</c> and <c>NSMutableData</c> are typically used for data storage and are also useful in Distributed Objects applications, where data contained in data objects can be copied or moved between applications.</p>
                <p>The size of the data is subject to a theoretical limit of about 8 ExaBytes (in practice, the limit should not be a factor).</p>
                <p>
                    <c>NSData</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFDataRef</c>. See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSData" /> class.
            <br></br>Equivalent to the native <c>[[NSData alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized by reading into it the data from the file specified by a given path.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfFile:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The absolute path of the file from which to read data.</p>
                <b>Return Value</b>
                <p>A data object initialized by reading into it the data from the file specified by <em>path</em>. The returned object might be different than the original receiver.</p>
                <b>Discussion</b>
                <p>This method is equivalent to <c>initWithContentsOfFile:options:error:</c> with no options.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfFile:</c>
                    </li>
                    <li>
                        <c>– initWithContentsOfMappedFile:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(System.String,U3DXT.iOS.Native.Foundation.NSDataReadingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized by reading into it the data from the file specified by a given path.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfFile:options:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The absolute path of the file from which to read data.</p>
                <em>mask</em>
                <p>A mask that specifies options for reading the data. Constant components are described in <c>“NSDataReadingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If an error occurs, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>A data object initialized by reading into it the data from the file specified by <em>path</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfFile:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="readOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Initializes a newly allocated data object initialized with the data from the location specified by <em>aURL</em>.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The URL from which to read data</p>
                <b>Return Value</b>
                <p>An <c>NSData</c> object initialized with the data from the location specified by <em>aURL</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSDataReadingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized with the data from the location specified by a given URL.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithContentsOfURL:options:error:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The URL from which to read data.</p>
                <em>mask</em>
                <p>A mask that specifies options for reading the data. Constant components are described in <c>“NSDataReadingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error reading in the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>A data object initialized with the data from the location specified by <em>aURL</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithContentsOfURL:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="readOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native NSData and initializes the object. Returns a data object initialized with the contents of another data object.
            <br></br>Equivalent to the native <c>[[NSData alloc] initWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>A data object.</p>
                <b>Return Value</b>
                <p>A data object initialized with the contents <em>data</em>. The returned object might be different than the original receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ dataWithData:</c>
                    </li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSData.ClassExists">
            <summary>
            Returns whether the native NSData class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_fromByteArray(System.Byte[],System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_toByteArray(System.String,System.Byte[],System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.FromByteArray(System.Byte[])">
            <summary>
            Creates and initializes a native NSData from a byte array.
            </summary>
            <returns>The newly created native NSData.</returns>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.ToByteArray">
            <summary>
            Creates a byte array with the contents of the native NSData.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_description(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfFile_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfFile_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithContentsOfURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_alloc_initWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_isEqualToData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_length(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_rangeOfData_options_range_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_subdataWithRange_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToFile_atomically_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToFile_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToURL_atomically_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.UP_NSData_writeToURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Description">
            <summary>
            Returns an <c>String</c> object that contains a hexadecimal representation of the receiver’s contents.
            <br></br>Equivalent to the native <c>description</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>String</c> object that contains a hexadecimal representation of the receiver’s contents in <c>NSData</c> property list format.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– bytes</c>
                    </li>
                    <li>
                        <c>– getBytes:</c>
                    </li>
                    <li>
                        <c>– getBytes:length:</c>
                    </li>
                    <li>
                        <c>– getBytes:range:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.IsEqualToData(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Compares the receiving data object to <em>otherData</em>.
            <br></br>Equivalent to the native <c>isEqualToData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>otherData</em>
                <p>The data object with which to compare the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the contents of <em>otherData</em> are equal to the contents of the receiver, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Two data objects are equal if they hold the same number of bytes, and if the bytes at the same position in the objects are the same.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="other">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Length">
            <summary>
            Returns the number of bytes contained in the receiver.
            <br></br>Equivalent to the native <c>length</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The number of bytes contained in the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.RangeOfData(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.Foundation.NSDataSearchOptions,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Finds and returns the range of the first occurrence of the given data, within the given range, subject to given options.
            <br></br>Equivalent to the native <c>rangeOfData:options:range:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dataToFind</em>
                <p>The data for which to search. This value must not be <c>null</c>.</p>
                <p>
                    <strong>Important:</strong> Raises an <c>NSInvalidArgumentException</c> if <em>dataToFind</em> is <c>null</c>.</p>
                <p>
                </p>
                <em>mask</em>
                <p>A mask specifying search options. The  “NSDataSearchOptions”  options may be specified singly or by combining them with the C bitwise <c>OR</c> operator.</p>
                <em>searchRange</em>
                <p>The range within the receiver in which to search for <em>dataToFind</em>. If this range is not within the receiver’s range of bytes, an <c>NSRangeException</c> raised.</p>
                <b>Return Value</b>
                <p>An <c>NSRange</c> structure giving the location and length of <em>dataToFind</em> within <em>searchRange</em>, modulo the options in <em>mask</em>. The range returned is relative to the start of the searched data, not the passed-in search range. Returns <c>{NSNotFound, 0}</c> if <em>dataToFind</em> is not found or is empty <c>("")</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="dataToFind">
            </param>
            <param name="mask">
            </param>
            <param name="searchRange">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.Subdata(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Returns a data object containing a copy of the receiver’s bytes that fall within the limits specified by a given range.
            <br></br>Equivalent to the native <c>subdataWithRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The range in the receiver from which to copy bytes. The range must not exceed the bounds of the receiver.</p>
                <b>Return Value</b>
                <p>A data object containing a copy of the receiver’s bytes that fall within the limits specified by <em>range</em>.</p>
                <b>Discussion</b>
                <p>If <em>range</em> isn’t within the receiver’s range of bytes, an <c>NSRangeException</c> is raised.</p>
                <p>A sample using this method can be found in  “Working With Binary Data” .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToFile(System.String,System.Boolean)">
            <summary>
            Writes the bytes in the receiver to the file specified by a given path.
            <br></br>Equivalent to the native <c>writeToFile:atomically:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The location to which to write the receiver's bytes. If <em>path</em> contains a tilde (~) character, you must expand it with <c>stringByExpandingTildeInPath</c> before invoking this method. </p>
                <em>atomically</em>
                <p>If <c>true</c>, the data is written to a backup file, and then—assuming no errors occur—the backup file is renamed to the name specified by <em>path</em>; otherwise, the data is written directly to <em>path</em>. </p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToURL:atomically:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="useAuxiliaryFile">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToFile(System.String,U3DXT.iOS.Native.Foundation.NSDataWritingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Writes the bytes in the receiver to the file specified by a given path.
            <br></br>Equivalent to the native <c>writeToFile:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The location to which to write the receiver's bytes.</p>
                <em>mask</em>
                <p>A mask that specifies options for writing the data. Constant components are described in <c>“NSDataWritingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error writing out the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToURL:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="writeOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToURL(U3DXT.iOS.Native.Foundation.NSURL,System.Boolean)">
            <summary>
            Writes the bytes in the receiver to the location specified by <em>aURL</em>.
            <br></br>Equivalent to the native <c>writeToURL:atomically:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The location to which to write the receiver's bytes. Only <c>file://</c> URLs are supported.</p>
                <em>atomically</em>
                <p>If <c>true</c>, the data is written to a backup location, and then—assuming no errors occur—the backup location is renamed to the name specified by <em>aURL</em>; otherwise, the data is written directly to <em>aURL</em>. <em>atomically</em> is ignored if <em>aURL</em> is not of a type the supports atomic writes.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Since at present only <c>file://</c> URLs are supported, there is no difference between this method and  writeToFile:atomically: , except for the type of the first argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToFile:atomically:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="atomically">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSData.WriteToURL(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSDataWritingOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Writes the bytes in the receiver to the location specified by a given URL.
            <br></br>Equivalent to the native <c>writeToURL:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aURL</em>
                <p>The location to which to write the receiver's bytes.</p>
                <em>mask</em>
                <p>A mask that specifies options for writing the data. Constant components are described in <c>“NSDataWritingOptions”</c>.</p>
                <em>errorPtr</em>
                <p>If there is an error writing out the data, upon return contains an <c>NSError</c> object that describes the problem.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the operation succeeds, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>Since at present only <c>file://</c> URLs are supported, there is no difference between this method and <c>writeToFile:options:error:</c>, except for the type of the first argument.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– writeToFile:options:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="writeOptionsMask">
            </param>
            <param name="errorPtr">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataReadingOptions">
            <summary>
            Options for methods used to read <c>NSData</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.MappedIfSafe">
            <summary>
                <p>A hint indicating the file should be mapped into virtual memory, if possible and safe.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingMappedIfSafe</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.Uncached">
            <summary>
                <p>A hint indicating the file should not be stored in the file-system caches.</p>
                <p>For data being read once and discarded, this option can improve performance.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingUncached</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataReadingOptions.MappedAlways">
            <summary>
                <p>Hint to map the file in if possible.</p>
                <p>This takes precedence over <c>NSDataReadingMappedIfSafe</c> if both are given.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataReadingMappedAlways</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataSearchOptions">
            <summary>
            Options for method used to search <c>NSData</c> objects. These options are used with the <c>rangeOfData:options:range:</c> method.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataSearchOptions.Backwards">
            <summary>
                <p>Search from the end of <c>NSData</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataSearchBackwards</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataSearchOptions.Anchored">
            <summary>
                <p>Search is limited to start (or end, if <c>NSDataSearchBackwards</c>) of <c>NSData</c> object.</p>
                <p>This option performs searching only on bytes at the beginning or end of the range. No match at the beginning or end means nothing is found, even if a matching sequence of bytes occurs elsewhere in the data object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataSearchAnchored</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSDataWritingOptions">
            <summary>
            Options for methods used to write <c>NSData</c> objects.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionMask">
            <summary>
                <p>A mask to use when determining the file protection options assigned to the data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionMask</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.WithoutOverwriting">
            <summary>
                <p>Hint to return prevent overwriting an existing file. Cannot be combined with <c>NSDataWritingAtomic</c>.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingWithoutOverwriting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionCompleteUnlessOpen">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file cannot be opened for reading or writing when the device is locked, although new files can be created with this class. If one of these files is open when the device is locked, reading and writing are still allowed. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionCompleteUnlessOpen</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionComplete">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file is stored in an encrypted format and may be read from or written to only while the device is unlocked. At all other times, attempts to read and write the file result in failure. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionComplete</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.Atomic">
            <summary>
                <p>A hint to write data to an auxiliary file first and then exchange the files. This option is equivalent to using a write method taking the parameter <c>atomically:YES</c>.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingAtomic</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionNone">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file is not stored in an encrypted format and may be accessed at boot time and while the device is unlocked. </p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSDataWritingOptions.FileProtectionCompleteUntilFirstUserAuthentication">
            <summary>
                <p>A hint to set the content protection attribute of the file when writing it out. In this case, the file can be read or written to while the device is locked, but while it is booting up, they have protection equivalent to <c>NSDataWritingFileProtectionComplete</c>. </p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSError">
            <summary>
            An <c>NSError</c> object encapsulates richer and more extensible error information than is possible using only an error code or error string. The core attributes of an <c>NSError</c> object are an error domain (represented by a string), a domain-specific error code and a user info dictionary containing application specific information.
            </summary>
            <remarks>
                <p>Several well-known domains are defined corresponding to Mach, POSIX, and <c><!--a target="_self" -->OSStatus<!--/a--></c> errors. Foundation error codes are found in the Cocoa error domain and documented in the <em>Foundation Constants Reference</em>. In addition, <c>NSError</c> allows you to attach an arbitrary user info dictionary to an error object, and provides the means to return a human-readable description for the error.</p>
                <p>
                    <c>NSError</c> is not an abstract class, and can be used directly. Applications may choose to create subclasses of <c>NSError</c> to provide better localized error strings by overriding <c>localizedDescription</c>.</p>
                <p>In general, a method should signal an error condition by—for example—returning <c>false</c> or <c>null</c> rather than by the simple presence of an error object. The method can then optionally return an <c>NSError</c> object by reference, in order to further describe the error.</p>
                <p>NSError is toll-free bridged with its Core Foundation counterpart, <c>CFErrorRef</c>. See  “Toll-Free Bridging”  for more information.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSError" /> class.
            <br></br>Equivalent to the native <c>[[NSError alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSError.ClassExists">
            <summary>
            Returns whether the native NSError class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_code(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_domain(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_helpAnchor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.UP_NSError_localizedDescription(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.Code">
            <summary>
            Returns the receiver’s error code.
            <br></br>Equivalent to the native <c>code</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s error code.</p>
                <b>Discussion</b>
                <p>Note that errors are domain specific.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localizedDescription</c>
                    </li>
                    <li>
                        <c>– domain</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.Domain">
            <summary>
            Returns the receiver’s error domain.
            <br></br>Equivalent to the native <c>domain</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the receiver’s error domain.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– code</c>
                    </li>
                    <li>
                        <c>– localizedDescription</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.HelpAnchor">
            <summary>
            A string to display in response to an alert panel help anchor button being pressed.
            <br></br>Equivalent to the native <c>helpAnchor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An NSString that the alert panel will include a help anchor button with that value.</p>
                <b>Discussion</b>
                <p>If this method returns a non-<c>null</c> value for an error being presented by <c><!--a target="_self" -->alertWithError:<!--/a--></c>, the alert panel will include a help anchor button that can display this string.</p>
                <p>The best way to get a value to return for this method is to specify it as the value of <c>NSHelpAnchorErrorKey</c> in the <c>NSError</c> object’s <c>userInfo</c> dictionary; or the method can be overridden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSError.LocalizedDescription">
            <summary>
            Returns a string containing the localized description of the error.
            <br></br>Equivalent to the native <c>localizedDescription</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string containing the localized description of the error.</p>
                <p>By default this method returns the object in the user info dictionary for the key <c>NSLocalizedDescriptionKey</c>. If the user info dictionary doesn’t contain a value for <c>NSLocalizedDescriptionKey</c>, a default string is constructed from the domain and code.</p>
                <b>Discussion</b>
                <p>This method can be overridden by subclasses to present customized error strings.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– code</c>
                    </li>
                    <li>
                        <c>– domain</c>
                    </li>
                    <li>
                        <c>– userInfo</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse">
            <summary>
            An NSHTTPURLResponse object represents a response to an HTTP URL load request. It’s a subclass of  NSURLResponse  that provides methods for accessing information specific to HTTP protocol responses.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse" /> class.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.String,System.Int32,System.String)">
            <summary>
            Creates an instance of the native NSHTTPURLResponse and initializes the object. Inherits from <c>NSURLResponse</c>. Returns an initialized <c>NSURLResponse</c> object with the URL, MIME type, length, and text encoding set to given values.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] initWithURL:MIMEType:expectedContentLength:textEncodingName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>The URL for the new object.</p>
                <em>MIMEType</em>
                <p>The MIME type.</p>
                <em>length</em>
                <p>The expected content length.This value should be <c>–1</c> if the expected length is undetermined</p>
                <em>name</em>
                <p>The text encoding name. This value may be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object with the URL set to <em>URL</em>, the MIME type set to <em>MIMEType</em>, length set to <em>length</em>, and text encoding name set to <em>name</em>. </p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLResponse</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:statusCode:HTTPVersion:headerFields:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="MIMEType">
            </param>
            <param name="length">
            </param>
            <param name="name">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" />
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Int32,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native NSHTTPURLResponse and initializes the object. Inherits from <c>NSURLResponse</c>. Returns an initialized response with the specified values.
            <br></br>Equivalent to the native <c>[[NSHTTPURLResponse alloc] initWithURL:statusCode:HTTPVersion:headerFields:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The URL for the new object.</p>
                <em>statusCode</em>
                <p>The HTTP status code to return.</p>
                <em>HTTPVersion</em>
                <p>The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1"</p>
                <em>headerFields</em>
                <p>A dictionary representing the header keys and values of the server response.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object or <c>NULL</c> if an error occurred during initialization. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS v5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:MIMEType:expectedContentLength:textEncodingName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="statusCode">
            </param>
            <param name="HTTPVersion">
            </param>
            <param name="headerFields">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" />
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.ClassExists">
            <summary>
            Returns whether the native NSHTTPURLResponse class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_localizedStringForStatusCode_(System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_allHeaderFields(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.UP_NSHTTPURLResponse_statusCode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.LocalizedString(System.Int32)">
            <summary>
            Returns a localized string corresponding to a specified HTTP status code.
            <br></br>Equivalent to the native <c>localizedStringForStatusCode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>statusCode</em>
                <p>The HTTP status code.</p>
                <b>Return Value</b>
                <p>A localized string suitable for displaying to users that describes the specified status code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– statusCode</c>
                    </li>
                </ul>
            </remarks>
            <param name="statusCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.AllHeaderFields">
            <summary>
            Returns all the HTTP header fields of the receiver.
            <br></br>Equivalent to the native <c>allHeaderFields</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing all the HTTP header fields of the receiver. By examining this dictionary clients can see the “raw” header information returned by the HTTP server.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSHTTPURLResponse.StatusCode">
            <summary>
            Returns the receiver’s HTTP status code.
            <br></br>Equivalent to the native <c>statusCode</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s HTTP status code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localizedStringForStatusCode:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSLocale">
            <summary>
            Locales encapsulate information about linguistic, cultural, and technological conventions and standards. Examples of information encapsulated by a locale include the symbol used for the decimal separator in numbers and the way dates are formatted.
            </summary>
            <remarks>
                <p>Locales are typically used to provide, format, and interpret information about and according to the user’s customs and preferences. They are frequently used in conjunction with formatters (see <em>Data Formatting Guide</em>). Although you can use many locales, you usually use the one associated with the current user.</p>
                <p>
                    <c>NSLocale</c> is “toll-free bridged” with its Core Foundation counterpart, <c>CFLocale</c>. This means that the Core Foundation type is interchangeable in function or method calls with the bridged Foundation object. Therefore, in a method where you see an <c>NSLocale *</c> parameter, you can pass a <c>CFLocaleRef</c>, and in a function where you see a <c>CFLocaleRef</c> parameter, you can pass an <c>NSLocale</c> instance (you cast one type to the other to suppress compiler warnings). See  “Toll-Free Bridging”  for more information on toll-free bridging.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSLocale" /> class.
            <br></br>Equivalent to the native <c>[[NSLocale alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSLocale and initializes the object. Initializes the receiver using a given locale identifier.
            <br></br>Equivalent to the native <c>[[NSLocale alloc] initWithLocaleIdentifier:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>The identifier for the new locale.</p>
                <b>Return Value</b>
                <p>The initialized locale.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIslamicCalendar">
            <summary>
                <p>Identifier for the Islamic calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIslamicCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSChineseCalendar">
            <summary>
                <p>Identifier for the Chinese calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSChineseCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSJapaneseCalendar">
            <summary>
                <p>Identifier for the Japanese calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSJapaneseCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSPersianCalendar">
            <summary>
                <p>Identifier for the Persian calendar</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSPersianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIndianCalendar">
            <summary>
                <p>Identifier for the Indian calendar</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIndianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSRepublicOfChinaCalendar">
            <summary>
                <p>Identifier for the Republic of China (Taiwan) calendar.</p>
                <p>A Chinese calendar can be created, and you can do calendrical calculations with it, but you should not use it for formatting as the necessary underlying functionality is not working correctly yet.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSRepublicOfChinaCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSBuddhistCalendar">
            <summary>
                <p>Identifier for the Buddhist calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSBuddhistCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSISO8601Calendar">
            <summary>
                <p>Identifier for the ISO8601. The ISO8601 calendar is not yet implemented.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSISO8601Calendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSHebrewCalendar">
            <summary>
                <p>Identifier for the Hebrew calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSHebrewCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSIslamicCivilCalendar">
            <summary>
                <p>Identifier for the Islamic civil calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSIslamicCivilCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.NSGregorianCalendar">
            <summary>
                <p>Identifier for the Gregorian calendar.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSGregorianCalendar</c> constant.
            </summary>
            <remarks>
            These constants identify <c>NSCalendar</c> instances.
            <p></p><b>Discussion</b><p>You use these identifiers to initialize a new <c>NSCalendar</c> object, using <c>initWithCalendarIdentifier:</c>. The <c>calendarIdentifier</c> method returns one of these values.</p><p></p>This is a constant for "NSLocale Calendar Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CurrencyCode">
            <summary>
                <p>The key for the currency code associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCurrencyCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CollatorIdentifier">
            <summary>
                <p>The key for the collation identifier for the locale.</p>
                <p>The corresponding value is an <c>String</c> object. If unknown, <c>null</c>  is returned.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCollatorIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.AlternateQuotationBeginDelimiterKey">
            <summary>
                <p>The key for the alternating begin quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. Thus, <c>NSLocaleQuotationBeginDelimiterKey</c>, then <c>NSLocaleAlternateQuotationBeginDelimiterKey</c>, etc.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleAlternateQuotationBeginDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.ExemplarCharacterSet">
            <summary>
                <p>The key for the exemplar character set for the locale.</p>
                <p>The corresponding value is an <c>NSCharacterSet</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleExemplarCharacterSet</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.ScriptCode">
            <summary>
                <p>The key for the locale script code.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleScriptCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.LanguageCode">
            <summary>
                <p>The key for the locale language code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"es"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.Identifier">
            <summary>
                <p>The key for the locale identifier.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"es_ES_PREEURO"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.MeasurementSystem">
            <summary>
                <p>The key for the measurement system associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object containing a description of the measurement system used by the locale, for example “Metric” or “U.S.”.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleMeasurementSystem</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CollationIdentifier">
            <summary>
                <p>The key for the collation associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCollationIdentifier</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.AlternateQuotationEndDelimiterKey">
            <summary>
                <p>The key for the alternate end quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. Thus, <c>NSLocaleQuotationEndDelimiterKey</c>, then <c>NSLocaleAlternateQuotationEndDelimiterKey</c>, etc.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleAlternateQuotationEndDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.UsesMetricSystem">
            <summary>
                <p>The key for the flag that indicates whether the locale uses the metric system.</p>
                <p>The corresponding value is a Boolean <c>double</c> object. If the value is <c>false</c>, you can typically assume American measurement units (for example, the statute mile).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleUsesMetricSystem</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CountryCode">
            <summary>
                <p>The key for the locale country code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"ES"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCountryCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.QuotationBeginDelimiterKey">
            <summary>
                <p>The key for the begin quotation symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleQuotationBeginDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.Calendar">
            <summary>
                <p>The key for the calendar associated with the locale.</p>
                <p>The corresponding value is an <c>NSCalendar</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCalendar</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.VariantCode">
            <summary>
                <p>The key for the locale variant code.</p>
                <p>The corresponding value is an <c>String</c> object. An example value might be <c>"PREEURO"</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleVariantCode</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.CurrencySymbol">
            <summary>
                <p>The key for the currency symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleCurrencySymbol</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.DecimalSeparator">
            <summary>
                <p>The key for the decimal separator associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleDecimalSeparator</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.QuotationEndDelimiterKey">
            <summary>
                <p>The key for the end quotation symbol associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleQuotationEndDelimiterKey</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocale.GroupingSeparator">
            <summary>
                <p>The key for the numeric grouping separator associated with the locale.</p>
                <p>The corresponding value is an <c>String</c> object.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleGroupingSeparator</c> constant.
            </summary>
            <remarks>
            The following constants specify keys used to retrieve components of a locale with <c>objectForKey:</c>.
            <p></p><p></p>This is a constant for "NSLocale Component Keys".
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSLocale.ClassExists">
            <summary>
            Returns whether the native NSLocale class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_autoupdatingCurrentLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_availableLocaleIdentifiers">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_canonicalLanguageIdentifierFromString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_canonicalLocaleIdentifierFromString_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_characterDirectionForLanguage_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_commonISOCurrencyCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_componentsFromLocaleIdentifier_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_currentLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOCountryCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOCurrencyCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_ISOLanguageCodes">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_lineDirectionForLanguage_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifierFromComponents_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifierFromWindowsLocaleCode_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_preferredLanguages">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_systemLocale">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_windowsLocaleCodeFromLocaleIdentifier_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_displayNameForKey_value_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_alloc_initWithLocaleIdentifier_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_localeIdentifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.UP_NSLocale_objectForKey_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.AutoupdatingCurrentLocale">
            <summary>
            Returns the current logical locale for the current user.
            <br></br>Equivalent to the native <c>autoupdatingCurrentLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The current logical locale for the current user. The locale is formed from the settings for the current user’s chosen system locale overlaid with any custom settings the user has specified in System Preferences.</p>
                <p>The object always reflects the current state of the current user’s locale settings.</p>
                <b>Discussion</b>
                <p>Settings you get from this locale do change as the user’s settings change (contrast with <c>currentLocale</c>).</p>
                <p>Note that if you cache values based on the locale or related information, those caches will of course not be automatically updated by the updating of the locale object. You can recompute caches upon receipt of the notification (<c>NSCurrentLocaleDidChangeNotification</c>) that gets sent out for locale changes (see <em>Notification Programming Topics</em> to learn how to register for and receive notifications).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ systemLocale</c>
                    </li>
                    <li>
                        <c>+ currentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.AvailableLocaleIdentifiers">
            <summary>
            Returns an array of <c>String</c> objects, each of which identifies a locale available on the system.
            <br></br>Equivalent to the native <c>availableLocaleIdentifiers</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which identifies a locale available on the system.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CanonicalLanguageIdentifier(System.String)">
            <summary>
            Returns a canonical language identifier by mapping an arbitrary locale identification string to the canonical identifier.
            <br></br>Equivalent to the native <c>canonicalLanguageIdentifierFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A string representation of an arbitrary locale identifier.</p>
                <b>Return Value</b>
                <p>A string that represents the canonical language identifier for the specified arbitrary locale identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CanonicalLocaleIdentifier(System.String)">
            <summary>
            Returns the canonical identifier for a given locale identification string.
            <br></br>Equivalent to the native <c>canonicalLocaleIdentifierFromString:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A locale identification string.</p>
                <b>Return Value</b>
                <p>The canonical identifier for an the locale identified by <em>string</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ componentsFromLocaleIdentifier:</c>
                    </li>
                    <li>
                        <c>+ localeIdentifierFromComponents:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CharacterDirection(System.String)">
            <summary>
            Returns the character direction for the specified ISO language code.
            <br></br>Equivalent to the native <c>characterDirectionForLanguage:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>isoLangCode</em>
                <p>The ISO language code.</p>
                <b>Return Value</b>
                <p>Returns the character direction for the language. See  “NSLocaleLanguageDirection”  for possible values. If the appropriate direction can’t be determined <c>NSLocaleLanguageDirectionUnknown</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ lineDirectionForLanguage:</c>
                    </li>
                </ul>
            </remarks>
            <param name="isoLangCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CommonISOCurrencyCodes">
            <summary>
            Returns an array of common ISO currency codes
            <br></br>Equivalent to the native <c>commonISOCurrencyCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents common ISO currency codes.</p>
                <b>Discussion</b>
                <p>Common codes may include, for example, AED, AUD, BZD, DKK, EUR, GBP, JPY, KES, MXN, OMR, STD, USD, XCD, and ZWD.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ComponentsFromLocaleIdentifier(System.String)">
            <summary>
            Returns a dictionary that is the result of parsing a locale ID.
            <br></br>Equivalent to the native <c>componentsFromLocaleIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>string</em>
                <p>A locale ID, consisting of language, script, country, variant, and keyword/value pairs, for example, <c>"en_US@calendar=japanese"</c>.</p>
                <b>Return Value</b>
                <p>A dictionary that is the result of parsing <em>string</em> as a locale ID. The keys are the constant NSString constants corresponding to the locale ID components, and the values correspond to constants where available. For the complete set of dictionary keys, see  “Constants.”  </p>
                <b>Discussion</b>
                <p>For example: the locale ID <c>"en_US@calendar=japanese"</c> yields a dictionary with three entries: <c>NSLocaleLanguageCode=en</c>, <c>NSLocaleCountryCode=US</c>, and <c>NSLocaleCalendar=NSJapaneseCalendar</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localeIdentifierFromComponents:</c>
                    </li>
                    <li>
                        <c>+ canonicalLocaleIdentifierFromString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="aString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.CurrentLocale">
            <summary>
            Returns the logical locale for the current user.
            <br></br>Equivalent to the native <c>currentLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The logical locale for the current user. The locale is formed from the settings for the current user’s chosen system locale overlaid with any custom settings the user has specified in System Preferences.</p>
                <b>Discussion</b>
                <p>Settings you get from this locale do not change as a user’s Preferences are changed so that your operations are consistent. Typically you perform some operations on the returned object and then allow it to be disposed of. Moreover, since the returned object may be cached, you do not need to hold on to it indefinitely. Contrast with <c>autoupdatingCurrentLocale</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ systemLocale</c>
                    </li>
                    <li>
                        <c>+ autoupdatingCurrentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOCountryCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal country codes.
            <br></br>Equivalent to the native <c>ISOCountryCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal country codes.</p>
                <b>Discussion</b>
                <p>Note that many of country codes do not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOCurrencyCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal ISO currency codes.
            <br></br>Equivalent to the native <c>ISOCurrencyCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal ISO currency codes.</p>
                <b>Discussion</b>
                <p>Note that some of the currency codes may not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.ISOLanguageCodes">
            <summary>
            Returns an array of <c>String</c> objects that represents all known legal ISO language codes.
            <br></br>Equivalent to the native <c>ISOLanguageCodes</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects that represents all known legal ISO language codes.</p>
                <b>Discussion</b>
                <p>Note that many of the language codes do not have any supporting locale data in OS X.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableLocaleIdentifiers</c>
                    </li>
                    <li>
                        <c>+ ISOCountryCodes</c>
                    </li>
                    <li>
                        <c>+ ISOCurrencyCodes</c>
                    </li>
                    <li>
                        <c>+ commonISOCurrencyCodes</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LineDirection(System.String)">
            <summary>
            Returns the line direction for the specified ISO language code.
            <br></br>Equivalent to the native <c>lineDirectionForLanguage:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>isoLangCode</em>
                <p>The ISO language code.</p>
                <b>Return Value</b>
                <p>Returns the line direction for the language. See  “NSLocaleLanguageDirection”  for possible values. If the appropriate direction can’t be determined <c>NSLocaleLanguageDirectionUnknown</c> is returned.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ characterDirectionForLanguage:</c>
                    </li>
                </ul>
            </remarks>
            <param name="isoLangCode">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifierFromComponents(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Returns a locale identifier from the components specified in a given dictionary.
            <br></br>Equivalent to the native <c>localeIdentifierFromComponents:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>dict</em>
                <p>A dictionary containing components that specify a locale. For valid dictionary keys, see  “Constants.” </p>
                <b>Return Value</b>
                <p>A locale identifier created from the components specified in <em>dict</em>.</p>
                <b>Discussion</b>
                <p>This reverses the actions of <c>componentsFromLocaleIdentifier:</c>, so for example the dictionary <c>{NSLocaleLanguageCode="en", NSLocaleCountryCode="US", NSLocaleCalendar=NSJapaneseCalendar}</c> becomes <c>"en_US@calendar=japanese"</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ componentsFromLocaleIdentifier:</c>
                    </li>
                    <li>
                        <c>+ canonicalLocaleIdentifierFromString:</c>
                    </li>
                    <li>
                        <c>+ ISOLanguageCodes</c>
                    </li>
                </ul>
            </remarks>
            <param name="dict">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifierFromWindowsLocaleCode(System.UInt32)">
            <summary>
            Returns a locale identifier from a Windows locale code.
            <br></br>Equivalent to the native <c>localeIdentifierFromWindowsLocaleCode:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>lcid</em>
                <p>The Windows locale code.</p>
                <b>Return Value</b>
                <p>The locale identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ windowsLocaleCodeFromLocaleIdentifier:</c>
                    </li>
                </ul>
            </remarks>
            <param name="lcid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.PreferredLanguages">
            <summary>
            Returns the user's language preference order as an array of strings.
            <br></br>Equivalent to the native <c>preferredLanguages</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The user's language preference order as an array of <c>String</c> objects, each of which is a canonicalized IETF BCP 47 language identifier.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.SystemLocale">
            <summary>
            Returns the “root”, canonical locale, that contains fixed “backstop” settings that provide values for otherwise undefined keys.
            <br></br>Equivalent to the native <c>systemLocale</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The “root”, canonical locale, that contains fixed “backstop” settings that provide values for otherwise undefined keys.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ autoupdatingCurrentLocale</c>
                    </li>
                    <li>
                        <c>+ currentLocale</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.WindowsLocaleCodeFromLocaleIdentifier(System.String)">
            <summary>
            Returns a Window locale code from the locale identifier.
            <br></br>Equivalent to the native <c>windowsLocaleCodeFromLocaleIdentifier:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>localeIdentifier</em>
                <p>The locale identifier.</p>
                <b>Return Value</b>
                <p>The Windows locale code.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ localeIdentifierFromWindowsLocaleCode:</c>
                    </li>
                </ul>
            </remarks>
            <param name="localeIdentifier">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.DisplayName(System.Object,System.Object)">
            <summary>
            Returns the display name for the given value.
            <br></br>Equivalent to the native <c>displayNameForKey:value:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>Specifies which of the locale property keys <em>value</em> is (see  “Constants” ),</p>
                <em>value</em>
                <p>A value for <em>key</em>.</p>
                <b>Return Value</b>
                <p>The display name for <em>value</em>.</p>
                <b>Discussion</b>
                <p>Not all locale property keys have values with display name values.</p>
                <p>You can use the <c>NSLocaleIdentifier</c> key to get the name of a locale in the language of another locale, as illustrated in the following examples. The first uses the fr_FR locale.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSLocale *frLocale = [[NSLocale alloc] initWithLocaleIdentifier:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSString *displayNameString = [frLocale displayNameForKey:NSLocaleIdentifier value:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString fr_FR: %", displayNameString);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [frLocale displayNameForKey:NSLocaleIdentifier value:"en_US"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString en_US: %", displayNameString);  </pre>
                        </td>
                    </tr>
                </table>
                <p>returns</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString fr_FR: français (France)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString en_US: anglais (États-Unis)  </pre>
                        </td>
                    </tr>
                </table>
                <p>The following example uses the en_GB locale.</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSLocale *gbLocale = [[NSLocale alloc] initWithLocaleIdentifier:"en_GB"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [gbLocale displayNameForKey:NSLocaleIdentifier value:"fr_FR"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString fr_FR: %", displayNameString);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString = [gbLocale displayNameForKey:NSLocaleIdentifier value:"en_US"];  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>NSLog("displayNameString en_US: %", displayNameString);  </pre>
                        </td>
                    </tr>
                </table>
                <p>returns</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString fr_FR: French (France)  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>displayNameString en_US: English (United States)  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– localeIdentifier</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.LocaleIdentifier">
            <summary>
            Returns the identifier for the receiver.
            <br></br>Equivalent to the native <c>localeIdentifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The identifier for the receiver. This may not be the same string that the locale was created with, since <c>NSLocale</c> may canonicalize it.</p>
                <b>Discussion</b>
                <p>Equivalent to sending <c>objectForKey:</c> with key <c>NSLocaleIdentifier</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– displayNameForKey:value:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSLocale.Object(System.Object)">
            <summary>
            Returns the object corresponding to the specified key.
            <br></br>Equivalent to the native <c>objectForKey:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>key</em>
                <p>The key for which to return the corresponding value. For valid values of <em>key</em>, see  “Constants.” </p>
                <b>Return Value</b>
                <p>The object corresponding to <em>key</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– displayNameForKey:value:</c>
                    </li>
                </ul>
            </remarks>
            <param name="key">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection">
            <summary>
            These constants describe the text direction for a language. Used by the methods <c>lineDirectionForLanguage:</c> and <c>characterDirectionForLanguage:</c>.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.RightToLeft">
            <summary>
                <p>The language direction is from right to left.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionRightToLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.LeftToRight">
            <summary>
                <p>The language direction is from left to right.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionLeftToRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.Unknown">
            <summary>
                <p>The direction of the language is unknown.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.TopToBottom">
            <summary>
                <p>The language direction is from top to bottom.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionTopToBottom</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSLocaleLanguageDirection.BottomToTop">
            <summary>
                <p>The language direction is from bottom to top.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLocaleLanguageDirectionBottomToTop</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSNull">
            <summary>
            The <c>NSNull</c> class defines a singleton object used to represent null values in collection objects (which don’t allow <c>null</c> values).
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSNull" /> class.
            <br></br>Equivalent to the native <c>[[NSNull alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSNull.ClassExists">
            <summary>
            Returns whether the native NSNull class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.UP_NSNull_null">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSNull.Null">
            <summary>
            Returns the singleton instance of <c>NSNull</c>.
            <br></br>Equivalent to the native <c>null</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The singleton instance of <c>NSNull</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSObject">
            <summary>
            The base class for all iOS classes.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSObject" /> class.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSObject.IsNil">
            <summary>
            Returns whether this instance is nil, which means not holding an native object.
            </summary>
            <value>
                <c>true</c> if this instance is nil; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSObject.ClassExists">
            <summary>
            Returns whether the native NSObject class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.UP_NSObject_instancesRespondToSelector(System.String,System.String)">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.RespondsToSelector(System.String)">
            <summary>
            Returns whether the native object can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>respondsToSelector:</c> method.
            </summary>
            <returns>
                <c>true</c> if the native object can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">
            The literal name of the selector.
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.SetValueForKey(System.Object,System.String)">
            <summary>
            Sets the value for the property specified by key.
            <br></br>Equivalent to the native <c>setValue:forKey:</c> method.
            </summary>
            <param name="value">
            Value.
            </param>
            <param name="key">
            Key.
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSObject.ValueForKey(System.String)">
            <summary>
            Gets the value for the property specified by key.
            <br></br>Equivalent to the native <c>valueForKey:</c> method.
            </summary>
            <returns>
            The value for the property specified by key.
            </returns>
            <param name="key">
            Key.
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSRange">
            <summary>
            A structure used to describe a portion of a series—such as characters in a string or objects in an <c>object[]</c> object.
            </summary>
            <remarks>
                <b>Fields</b>
                <p>
                </p>
                <c>location</c>
                <p>The start index (<c>0</c> is the first, as in C arrays).</p>
                <c>length</c>
                <p>The number of items in the range (can be <c>0</c>).</p>
                <b>Discussion</b>
                <p>Foundation functions that operate on ranges include the following:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>NSEqualRanges</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSIntersectionRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSLocationInRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSMakeRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSMaxRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSRangeFromString</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSStringFromRange</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>NSUnionRange</c>
                        </p>
                    </li>
                </ul>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>Declared In</b>
                <c class="HeaderFile">NSRange.h</c>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> struct.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSRange.Location">
            <summary> The location.</summary>;</member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSRange.Length">
            <summary> The length.</summary>;</member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange._Serialize">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange._Deserialize(System.Object)">
            <summary>
            U3DXT internal method.</summary>
            <returns>
            </returns>
            <param name="json">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="other">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.op_Equality(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> is equal to another specified <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSRange.op_Inequality(U3DXT.iOS.Native.Foundation.NSRange,U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> is not equal to another specified <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.iOS.Native.Foundation.NSRange" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURL">
            <summary>
            An <c>NSURL</c> object lets you manipulate URLs and the resources they reference. The URLs employed by the <c>NSURL</c> class are described in RFCs 1808, 1738, and 2732. The litmus test for conformance to RFC 1808 is as recommended in RFC 1808—specifically, whether the first two characters of <c>resourceSpecifier</c> are slashes (<c>//</c>).
            </summary>
            <remarks>
                <p>You can use an <c>NSURL</c> object to refer to a file, which is the preferred way to do so. AppKit objects that can read data from or write data to a file generally have methods that accept an <c>NSURL</c> object instead of a pathname as the file reference. In OS X, the <c><!--a target="_self" -->NSWorkspace<!--/a--></c> class provides <c><!--a target="_self" -->openURL:<!--/a--></c> to open a location specified by a URL. Similarly, in iOS, UIApplication provides <c>openURL:</c>. To get the contents of a URL, NSString provides <c>stringWithContentsOfURL:</c> and NSData provides <c>dataWithContentsOfURL:</c>.</p>
                <p>An <c>NSURL</c> object is composed of two parts—a potentially <c>null</c> base URL and a string that is resolved relative to the base URL. An <c>NSURL</c> object whose string is fully resolved without a base is considered absolute; all others are considered relative.</p>
                <p>The classes <c>NSURLConnection</c> and <c><!--a target="_self" -->NSURLDownload<!--/a--></c> define methods useful for loading URL resources in the background. See <em>URL Loading System Programming Guide</em> for more information</p>
                <p>See also <em><!--a target="_self" -->NSURL Additions Reference<!--/a--></em> in the AppKit framework, which describes methods supporting pasteboards.</p>
                <p>The <c>NSURL</c> class is <em>toll-free bridged</em> with its Core Foundation counterpart, <c>CFURLRef</c>. For more information on toll-free bridging, see  “Toll-Free Bridging” .</p>
                <b>Bookmarks, Security Scope, and Start/Stop Semantics</b>
                <p>Starting in OS X v10.6, the <c>NSURL</c> class provides a facility for creating and using bookmark objects. A <strong>bookmark</strong> provides a persistent reference to a file-system resource. When you resolve a bookmark, you obtain a URL to the resource’s current location. A bookmark’s association with a file-system resource (typically a file or folder) usually continues to work if the user moves or renames the resource, or if the user relaunches your app or restarts the system.</p>
                <p>In an OS X app that adopts App Sandbox, to gain persistent access to a file-system resource you must use a <strong>security-scoped bookmark</strong>. Such a bookmark preserves, across app launches, a user’s intent to give your app access to a resource. For details on how this works, including information on the entitlements you need in your Xcode project, read  <!--a target="_self" -->“Security-Scoped Bookmarks and Persistent Resource Access”<!--/a-->  in <em><!--a target="_self" -->App Sandbox Design Guide<!--/a--></em>.</p>
                <p>When you resolve a security-scoped bookmark, you get a security-scoped URL. The file system resource that the URL points to is not available for use inside your app’s sandbox until you call the <c>startAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent, the <c><!--a target="_self" -->CFURLStartAccessingSecurityScopedResource<!--/a--></c> function) on the URL.</p>
                <p>When you no longer need access to a resource that you obtained using security scope (typically, after you close the resource) you must call the <c>stopAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent, the <c><!--a target="_self" -->CFURLStopAccessingSecurityScopedResource<!--/a--></c> function) on the resource’s URL.</p>
                <p>
                    <strong>Warning:</strong> You must balance every call to the <c>startAccessingSecurityScopedResource</c> method with a corresponding call to the <c>stopAccessingSecurityScopedResource</c> method. If you fail to relinquish your access when you no longer need a file-system resource, your app leaks kernel resources. If sufficient kernel resources are leaked, your app loses its ability to add file-system locations to its sandbox, such as via Powerbox or security-scoped bookmarks, until relaunched.</p>
                <p>
                </p>
                <p>The methods for using security-scoped bookmarks are described in this document in  “Working with Bookmark Data.”  For a general introduction to using bookmarks in OS X, read  “Locating Files Using Bookmarks”  in <em>File System Programming Guide</em>.</p>
                <p>
                </p>
                <b>Security-Scoped URLs and String Paths</b>
                <p>In an OS X app, when you copy a security-scoped URL (as obtained from a security-scoped bookmark), the copy has the security scope of the original. You gain access to the file-system resource (that the URL points to) just as you would with the original URL: by calling the <c>startAccessingSecurityScopedResource</c> method (or its Core Foundation equivalent).</p>
                <p>If you need a security-scoped URL’s path as a string value (as provided by the <c>path</c> method), such as to provide to an API that requires a string value, obtain the path from the URL as needed. Note, however, that a string-based path obtained from a security-scoped URL <em>does not</em> have security scope and you cannot use that string to obtain access a security-scoped resource.</p>
                <b>Handling Object Creation Failure</b>
                <p>The NSURL class fails to create a new NSURL object if the path being passed is not well-formed; the path must comply with RFC 2396. Examples of cases that will not succeed are strings containing space characters and high-bit characters. Should creating an NSURL object fail, the creation methods return <c>null</c>, which you must be prepared to handle. If you are creating NSURL objects using file system paths, you should use <c>fileURLWithPath:</c> or <c>initFileURLWithPath:</c>, which handle the subtle differences between URL paths and file system paths. If you wish to be tolerant of malformed path strings, you’ll need to use functions provided by the Core Foundation framework to clean up the strings.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURL" /> class.
            <br></br>Equivalent to the native <c>[[NSURL alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes a newly created NSURL referencing the local file or directory at <em>path</em>.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initFileURLWithPath:isDirectory:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path that the NSURL object will represent. <em>path</em> should be a valid system path. If <em>path</em> begins with a tilde, it must first be expanded with <c>stringByExpandingTildeInPath</c>. If <c>path</c> is a relative path, it is treated as being relative to the current working directory.</p>
                <p>Passing <c>null</c> for this parameter produces an exception.</p>
                <em>isDir</em>
                <p>A Boolean value that specifies whether <em>path</em> is treated as a directory path when resolving against relative path components. Pass <c>true</c> if the <em>path</em> indicates a directory, <c>false</c> otherwise</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>path</em>.</p>
                <b>Discussion</b>
                <p>Invoking this method is equivalent to invoking <c>initWithScheme:host:path:</c> with scheme <c>NSURLFileScheme</c>, a <c>null</c> host, and <em>path</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>fileURLWithPath:</c>
                    </li>
                </ul>
            </remarks>
            <param name="path">
            </param>
            <param name="isDir">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes a newly created NSURL with a specified scheme, host, and path.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithScheme:host:path:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>scheme</em>
                <p>The scheme for the NSURL object.</p>
                <em>host</em>
                <p>The host for the NSURL object. May be the empty string.</p>
                <em>path</em>
                <p>The path for the NSURL object. If <em>path</em> begins with a tilde, it must first be expanded with <c>stringByExpandingTildeInPath</c>.</p>
                <b>Return Value</b>
                <p>The newly initialized NSURL object.</p>
                <b>Discussion</b>
                <p>This method automatically escapes <c>path</c> with the <c>stringByAddingPercentEscapesUsingEncoding:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="scheme">
            </param>
            <param name="host">
            </param>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes an NSURL object with a provided string.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithString:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URLString</em>
                <p>The string with which to initialize the NSURL object. This string must conform to URL format as described in RFC 2396. This method parses <em>URLString</em> according to RFCs 1738 and 1808.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>URLString</em>. If the string was malformed, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method expects <em>URLString</em> to contain any necessary percent escape codes, which are ‘:’, ‘/’, ‘%’, ‘#’, ‘;’, and ‘@’. Note that ‘%’ escapes are translated via UTF-8.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>URLWithString:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URLString">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.#ctor(System.String,U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSURL and initializes the object. Initializes an NSURL object with a base URL and a relative string.
            <br></br>Equivalent to the native <c>[[NSURL alloc] initWithString:relativeToURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URLString</em>
                <p>The string with which to initialize the NSURL object. Must conform to RFC 2396. <em>URLString</em> is interpreted relative to <em>baseURL</em>.</p>
                <em>baseURL</em>
                <p>The base URL for the NSURL object.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>URLString</em> and <em>baseURL</em>. If <em>URLString</em> was malformed, returns <c>null</c>.</p>
                <b>Discussion</b>
                <p>This method expects <em>URLString</em> to contain any necessary percent escape codes.</p>
                <p>
                    <c>initWithString:relativeToURL:</c> is the designated initializer for NSURL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– baseURL</c>
                    </li>
                    <li>
                        <c>– relativeString</c>
                    </li>
                    <li>
                        <c>URLWithString:relativeToURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URLString">
            </param>
            <param name="baseURL">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURL.ClassExists">
            <summary>
            Returns whether the native NSURL class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_bookmarkDataWithContentsOfURL_error_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fileURLWithPathComponents_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceValuesForKeys_fromBookmarkData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_writeBookmarkData_toURL_options_error_(System.String,System.String,System.UInt32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_absoluteString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_absoluteURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_baseURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(System.String,System.UInt32,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_checkResourceIsReachableAndReturnError_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_filePathURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fileReferenceURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_fragment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_host(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initFileURLWithPath_isDirectory_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithScheme_host_path_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithString_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_alloc_initWithString_relativeToURL_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isEqual_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isFileReferenceURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_isFileURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_lastPathComponent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_parameterString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_password(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_path(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_pathComponents(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_pathExtension(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_port(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_query(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_relativePath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_relativeString(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceSpecifier(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_resourceValuesForKeys_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_scheme(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_setResourceValue_forKey_error_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_setResourceValues_error_(System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_standardizedURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathComponent_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathComponent_isDirectory_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByAppendingPathExtension_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByDeletingLastPathComponent(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByDeletingPathExtension(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByResolvingSymlinksInPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_URLByStandardizingPath(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.UP_NSURL_user(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BookmarkData(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Initializes and returns bookmark data derived from an alias file pointed to by a specified URL.
            <br></br>Equivalent to the native <c>bookmarkDataWithContentsOfURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bookmarkFileURL</em>
                <p>The URL that points to the alias file.</p>
                <em>error</em>
                <p>The error that occurred in the case that the bookmark data cannot be derived.</p>
                <b>Return Value</b>
                <p>The bookmark data for the alias file.</p>
                <b>Discussion</b>
                <p>If <em>bookmarkFileURL</em> points to an alias file created prior to OS X v10.6 that contains Alias Manager information but no bookmark data, this method synthesizes bookmark data for the file.</p>
                <p>This method returns <c>null</c> if bookmark data cannot be created.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="bookmarkFileURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FileURL(System.Object[])">
            <summary>
            Initializes and returns a newly created NSURL object as a file URL with specified path components.
            <br></br>Equivalent to the native <c>fileURLWithPathComponents:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>components</em>
                <p>An array of path components.</p>
                <p>Passing <c>null</c> for this parameter produces an exception.</p>
                <b>Return Value</b>
                <p>An NSURL object initialized with <em>components</em>.</p>
                <b>Discussion</b>
                <p>The path components are separated by a forward slash in the returned URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="components">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceValues(System.Object[],U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data.
            <br></br>Equivalent to the native <c>resourceValuesForKeys:fromBookmarkData:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>bookmarkData</em>
                <p>The bookmark data the resource values are derived from.</p>
                <b>Return Value</b>
                <p>A dictionary of the requested resource values contained in <em>bookmarkData</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keys">
            </param>
            <param name="bookmarkData">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.WriteBookmarkData(U3DXT.iOS.Native.Foundation.NSData,U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Creates an alias file on disk at a specified location with specified bookmark data.
            <br></br>Equivalent to the native <c>writeBookmarkData:toURL:options:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bookmarkData</em>
                <p>The bookmark data containing information for the alias file.</p>
                <em>bookmarkFileURL</em>
                <p>The desired location of the alias file.</p>
                <em>options</em>
                <p>Options taken into account when creating the alias file.</p>
                <em>error</em>
                <p>The error that occurred in the case that the alias file cannot be created.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the alias file is successfully created; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method will produce an error if <em>bookmarkData</em> was not created with the <c>NSURLBookmarkCreationSuitableForBookmarkFile</c> option.</p>
                <p>If <em>bookmarkFileURL</em> points to a directory, the alias file will be created in that directory with its name derived from the information in <em>bookmarkData</em>. If <em>bookmarkFileURL</em> points to a file, the alias file will be created with the location and name indicated by <em>bookmarkFileURL</em>, and its extension will be changed to <c>.alias</c> if it is not already.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="bookmarkData">
            </param>
            <param name="bookmarkFileURL">
            </param>
            <param name="options">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.AbsoluteString">
            <summary>
            Returns the string for the receiver as if it were an absolute URL.
            <br></br>Equivalent to the native <c>absoluteString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An absolute string for the URL. Creating by resolving the receiver's string against its base according to the algorithm given in RFC 1808.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.AbsoluteURL">
            <summary>
            Returns an absolute URL that refers to the same resource as the receiver.
            <br></br>Equivalent to the native <c>absoluteURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An absolute URL that refers to the same resource as the receiver. If the receiver is already absolute, returns <c>self</c>. Resolution is performed per RFC 1808.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BaseURL">
            <summary>
            Returns the base URL of the receiver.
            <br></br>Equivalent to the native <c>baseURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The base URL of the receiver. If the receiver is an absolute URL, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.BookmarkData(U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions,System.Object[],U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns a bookmark for the URL, created with specified options and resource values.
            <br></br>Equivalent to the native <c>bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>options</em>
                <p>Options taken into account when creating the bookmark for the URL.</p>
                <p>To create a security-scoped bookmark to support App Sandbox, include (by way of bitwise <c>OR</c> operators with any other options in this parameter) the <c>NSURLBookmarkCreationWithSecurityScope</c> option.</p>
                <p>When you later resolve the bookmark, you can use the resulting security-scoped URL to obtain read/write access to the file-system resource pointed to by the URL.</p>
                <p>If you instead want to create a security-scoped bookmark that, when resolved, enables you to obtain read-only access to a file-system resource, bitwise <c>OR</c> this parameter’s value with both the <c>NSURLBookmarkCreationWithSecurityScope</c> option and the <c>NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess</c> option.</p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>relativeURL</em>
                <p>The URL that the bookmark data will be relative to.</p>
                <p>If you are creating a security-scoped bookmark to support App Sandbox, use this parameter as follows:</p>
                <ul class="termdef">
                    <li class="termdef">
                        <p>To create an app-scoped bookmark, use a value of <c>null</c>. </p>
                    </li>
                    <li class="termdef">
                        <p>To create a document-scoped bookmark, use the <em>absolute</em> path (despite this parameter’s name) to the document file that is to own the new security-scoped bookmark.</p>
                    </li>
                </ul>
                <em>error</em>
                <p>The error that occurred in the case that the bookmark data cannot be created.</p>
                <b>Return Value</b>
                <p>A bookmark for the URL.</p>
                <b>Discussion</b>
                <p>To use this method to create a security-scoped bookmark to support App Sandbox, you must first have enabled the appropriate entitlements for your app, as described in  “Enabling Security-Scoped Bookmark and URL Access”  in <em>Entitlement Key Reference</em>. In addition, be sure to understand the behavior of the <em>options</em> and <em>relativeURL</em> parameters.</p>
                <p>For an app-scoped bookmark, no sandboxed app other than the one that created the bookmark can obtain access to the file-system resource that the URL (obtained from the bookmark) points to. Specifically, a bookmark created with security scope fails to resolve if the caller does not have the same code signing identity as the caller that created the bookmark.</p>
                <p>For a document-scoped bookmark, any sandboxed app that has access to the bookmark data itself, and has access to the document that owns the bookmark, can obtain access to the resource.</p>
                <p>
                    <strong>Version note:</strong> Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:</c>
                    </li>
                </ul>
            </remarks>
            <param name="options">
            </param>
            <param name="keys">
            </param>
            <param name="relativeURL">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.CheckResourceIsReachableAndReturnError(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns whether the resource pointed to by a file URL can be reached.
            <br></br>Equivalent to the native <c>checkResourceIsReachableAndReturnError:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>error</em>
                <p>The error that occurred in the case that the resource cannot be reached.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the resource is reachable; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FilePathURL">
            <summary>
            Returns a new file path URL that points to the same resource as the original URL.
            <br></br>Equivalent to the native <c>filePathURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The new file path URL.</p>
                <b>Discussion</b>
                <p>If the original URL is a file reference URL, this method converts it to a file path URL. If the original URL is a file path URL, the returned URL is identical. If the original URL is not a file URL, this method returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.FileReferenceURL">
            <summary>
            Returns a new file reference URL that points to the same resource as the original URL.
            <br></br>Equivalent to the native <c>fileReferenceURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The new file reference URL.</p>
                <b>Discussion</b>
                <p>If the original URL is a file path URL, this method converts it to a file reference URL. If the original URL is a file reference URL, the returned URL is identical. If the original URL is not a file URL, this method returns <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Fragment">
            <summary>
            Returns the fragment of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>fragment</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The fragment of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Host">
            <summary>
            Returns the host of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>host</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The host of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsEqual(System.Object)">
            <summary>
            Returns a Boolean value that indicates whether the receiver and a given object are equal.
            <br></br>Equivalent to the native <c>isEqual:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anObject</em>
                <p>The object to be compared to the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver and <em>anObject</em> are equal, otherwise <c>false</c>.</p>
                <b>Discussion</b>
                <p>This method defines what it means for instances to be equal. Two NSURLs are considered equal if and only if they return identical values for both <c>baseURL</c> and <c>relativeString</c>.</p>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsFileReferenceURL">
            <summary>
            Returns whether the URL is a file reference URL.
            <br></br>Equivalent to the native <c>isFileReferenceURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the URL is a file reference URL; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.IsFileURL">
            <summary>
            Returns whether the receiver uses the file scheme.
            <br></br>Equivalent to the native <c>isFileURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>Returns <c>true</c> if the receiver uses the file scheme, <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.LastPathComponent">
            <summary>
            Returns the last path component of a file URL.
            <br></br>Equivalent to the native <c>lastPathComponent</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The last path component of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ParameterString">
            <summary>
            Returns the parameter string of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>parameterString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The parameter string of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Password">
            <summary>
            Returns the password of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>password</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The password of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Path">
            <summary>
            Returns the path of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>path</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The path of the URL, unescaped with the <c>stringByReplacingPercentEscapesUsingEncoding:</c> method. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <p>If this URL object contains a file URL (as determined with <c>isFileURL</c>), the return value of this method is suitable for input into methods of NSFileManager or NSPathUtilities. If the path has a trailing slash it is stripped.</p>
                <p>Per RFC 3986, the leading slash after the authority (host name and port) portion is treated as part of the path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.PathComponents">
            <summary>
            Returns the individual path components of a file URL in an array.
            <br></br>Equivalent to the native <c>pathComponents</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array containing the individual path components of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.PathExtension">
            <summary>
            Returns the path extension of a file URL.
            <br></br>Equivalent to the native <c>pathExtension</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The path extension of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Port">
            <summary>
            Returns the port number of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>port</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The port number of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Query">
            <summary>
            Returns the query of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>query</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The query of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.RelativePath">
            <summary>
            Returns the path of a URL conforming to RFC 1808, without resolving against the receiver’s base URL.
            <br></br>Equivalent to the native <c>relativePath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The relative path of the URL without resolving against the base URL. If the receiver is an absolute URL, this method returns the same value as <c>path</c>. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.RelativeString">
            <summary>
            Returns a string representation of the relative portion of the URL.
            <br></br>Equivalent to the native <c>relativeString</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A string representation of the relative portion of the URL. If the receiver is an absolute URL this method returns the same value as <c>absoluteString</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceSpecifier">
            <summary>
            Returns the resource specifier of the URL.
            <br></br>Equivalent to the native <c>resourceSpecifier</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The resource specifier of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.ResourceValues(System.Object[],U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Returns the resource values for the properties identified by specified array of keys.
            <br></br>Equivalent to the native <c>resourceValuesForKeys:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keys</em>
                <p>An array of names of URL resource properties.</p>
                <em>error</em>
                <p>The error that occurred in the case that one or more resource values cannot be retrieved.</p>
                <b>Return Value</b>
                <p>A dictionary of resource values indexed by key.</p>
                <b>Discussion</b>
                <p>If an error occurs, this method returns <c>null</c>. </p>
                <p>A key is left out of the returned dictionary if its corresponding resource value is not defined for the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keys">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.Scheme">
            <summary>
            Returns the scheme of the URL.
            <br></br>Equivalent to the native <c>scheme</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The scheme of the URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.SetResourceValue(System.Object,System.String,U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets the resource property of the URL specified by a given key to a given value.
            <br></br>Equivalent to the native <c>setResourceValue:forKey:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>value</em>
                <p>The value for the resource property defined by <em>key</em>.</p>
                <em>key</em>
                <p>The name of one of the URL’s resource properties.</p>
                <em>error</em>
                <p>The error that occurred in the case that the resource value cannot be set.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the resource property named <em>key</em> is successfully set to <em>value</em>; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>The resource is modified synchronously.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="value">
            </param>
            <param name="key">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.SetResourceValues(System.Collections.Generic.Dictionary{System.Object,System.Object},U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Sets resource properties of the URL specified by a given set of keys to a given set of values.
            <br></br>Equivalent to the native <c>setResourceValues:error:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>keyedValues</em>
                <p>A dictionary of resource values to be set.</p>
                <em>error</em>
                <p>The error that occurred in the case that one or more resource values cannot be set.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if all resource values in <em>keyedValues</em> are successfully set; otherwise, <c>false</c>.</p>
                <b>Discussion</b>
                <p>If an error occurs during the execution of this method, <em>error</em> will contain an array of the resource values that were not successfully set in its <c>userInfo</c> dictionary.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later. (Symbol is present in iOS 4, but performs no operation.)</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Common File System Resource Keys”</c>
                    </li>
                    <li>
                        <c>“File Property Keys”</c>
                    </li>
                    <li>
                        <c>“Volume Property Keys”</c>
                    </li>
                </ul>
            </remarks>
            <param name="keyedValues">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.StandardizedURL">
            <summary>
            Returns a new NSURL object with any instances of <c>".."</c> or <c>"."</c> removed from its path.
            <br></br>Equivalent to the native <c>standardizedURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new <c>NSURL</c> object initialized with a version of the receiver’s URL that has had any instances of <c>".."</c> or <c>"."</c> removed from its path.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathComponent(System.String)">
            <summary>
            Returns a new URL made by appending a path component to the original URL.
            <br></br>Equivalent to the native <c>URLByAppendingPathComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathComponent</em>
                <p>The path component to add to the URL.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathComponent</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL does not end with a forward slash and <c>pathComponent</c> does not begin with a forward slash, a forward slash is inserted between the two parts of the returned URL, unless the original URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathComponent">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathComponent(System.String,System.Boolean)">
            <summary>
            Returns a new URL made by appending a path component to the original URL, along with a trailing slash if the component is designated a directory.
            <br></br>Equivalent to the native <c>URLByAppendingPathComponent:isDirectory:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathComponent</em>
                <p>The path component to add to the URL.</p>
                <em>isDirectory</em>
                <p>If <c>TRUE</c>, a trailing slash is appended after <em>pathComponent</em>.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathComponent</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL does not end with a forward slash and <c>pathComponent</c> does not begin with a forward slash, a forward slash is inserted between the two parts of the returned URL, unless the original URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathComponent">
            </param>
            <param name="isDirectory">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByAppendingPathExtension(System.String)">
            <summary>
            Returns a new URL made by appending a path extension to the original URL.
            <br></br>Equivalent to the native <c>URLByAppendingPathExtension:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>pathExtension</em>
                <p>The path extension to add to the URL.</p>
                <b>Return Value</b>
                <p>A new URL with <c>pathExtension</c> appended.</p>
                <b>Discussion</b>
                <p>If the original URL ends with one or more forward slashes, these are removed from the returned URL. A period is inserted between the two parts of the new URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="pathExtension">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByDeletingLastPathComponent">
            <summary>
            Returns a new URL made by deleting the last path component from the original URL.
            <br></br>Equivalent to the native <c>URLByDeletingLastPathComponent</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL with the last path component of the original URL removed.</p>
                <b>Discussion</b>
                <p>If the original URL represents the root path, the returned URL is identical. Otherwise, if the original URL has only one path component, the new URL is the empty string.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByDeletingPathExtension">
            <summary>
            Returns a new URL made by deleting the path extension, if any, from the original URL.
            <br></br>Equivalent to the native <c>URLByDeletingPathExtension</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL with the path extension of the original URL removed.</p>
                <b>Discussion</b>
                <p>If the original URL represents the root path, the returned URL is identical. If the URL has multiple path extensions, only the last one is removed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByResolvingSymlinksInPath">
            <summary>
            Returns a new URL that points to the same resource as the original URL and includes no symbolic links.
            <br></br>Equivalent to the native <c>URLByResolvingSymlinksInPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL that points to the same resource as the original URL and includes no symbolic links.</p>
                <b>Discussion</b>
                <p>If the original URL has no symbolic links, the returned URL is identical to the original URL.</p>
                <p>This method only works on URLs with the <c>file:</c> path scheme. This method will return an identical URL for all other URLs.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.URLByStandardizingPath">
            <summary>
            Returns a new URL that points to the same resource as the original URL and is an absolute path.
            <br></br>Equivalent to the native <c>URLByStandardizingPath</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A new URL that points to the same resource as the original URL and is an absolute path.</p>
                <b>Discussion</b>
                <p>This method only works on URLs with the <c>file:</c> path scheme. This method will return an identical URL for all other URLs.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURL.User">
            <summary>
            Returns the user portion of a URL conforming to RFC 1808.
            <br></br>Equivalent to the native <c>user</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The user portion of the URL. If the receiver does not conform to RFC 1808, returns <c><!--a  -->nil<!--/a--></c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions">
            <summary>
            Options used when creating bookmark data.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When creating a bookmark, use bitwise <c>OR</c> operators to combine the options you want to specify, and provide them to the <em>options</em> parameter of the <c>bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:</c> method.</p>
                <b>Version Notes</b>
                <p>Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.PreferFileIDResolution">
            <summary>
                <p>Specifies that when an alias created with this option is resolved, its embedded file ID should take precedence over other sources of information (file system path, for example) in the event of a conflict.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationPreferFileIDResolution</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.MinimalBookmark">
            <summary>
                <p>Specifies that an alias created with this option should be created with minimal information. This produces a smaller bookmark that can be resolved in fewer ways.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationMinimalBookmark</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkCreationOptions.SuitableForBookmarkFile">
            <summary>
                <p>Specifies that the bookmark data should include properties required to create Finder alias files.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkCreationSuitableForBookmarkFile</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions">
            <summary>
            Options used when resolving bookmark data.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When resolving a bookmark, use bitwise <c>OR</c> operators to combine the options you want to specify, and provide them to the <em>options</em> parameter of the <c>URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:</c> method.</p>
                <b>Version Notes</b>
                <p>Security-scoped bookmarks are not available in versions of OS X prior to OS X v10.7.3.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions.Mounting">
            <summary>
                <p>Specifies that no volume should be mounted during resolution of the bookmark data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkResolutionWithoutMounting</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLBookmarkResolutionOptions.UI">
            <summary>
                <p>Specifies that no UI feedback accompany resolution of the bookmark data.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLBookmarkResolutionWithoutUI</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequest">
            <summary>
                <c>NSURLRequest</c> objects represent a URL load request in a manner independent of protocol and URL scheme.
            </summary>
            <remarks>
                <p>NSURLRequest encapsulates two basic data elements of a load request: the URL to load, and the policy to use when consulting the URL content cache made available by the implementation.</p>
                <p> NSURLRequest is designed to be extended to support additional  protocols by adding categories that access protocol specific values from a property object using NSURLProtocol’s <c>propertyForKey:inRequest:</c> and <c>setProperty:forKey:inRequest:</c> methods.</p>
                <p>The mutable subclass of NSURLRequest is <c>NSMutableURLRequest</c>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURLRequest" /> class.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Foundation.NSURL)">
            <summary>
            Creates an instance of the native NSURLRequest and initializes the object. Returns a URL request for a specified URL with default cache policy and timeout value.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] initWithURL:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theURL</em>
                <p>The URL for the request.</p>
                <b>Return Value</b>
                <p>The initialized URL request.</p>
                <b>Discussion</b>
                <p>The default cache policy is  <c>NSURLRequestUseProtocolCachePolicy</c> and the default timeout interval is 60 seconds.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:cachePolicy:timeoutInterval:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.#ctor(U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy,System.Double)">
            <summary>
            Creates an instance of the native NSURLRequest and initializes the object. Returns an initialized URL request with specified values.
            <br></br>Equivalent to the native <c>[[NSURLRequest alloc] initWithURL:cachePolicy:timeoutInterval:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>theURL</em>
                <p>The URL for the request.</p>
                <em>cachePolicy</em>
                <p>The cache policy for the request.</p>
                <em>timeoutInterval</em>
                <p>The timeout interval for the request, in seconds.</p>
                <b>Return Value</b>
                <p>The initialized URL request.</p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLRequest</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="cachePolicy">
            </param>
            <param name="timeoutInterval">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURLRequest.ClassExists">
            <summary>
            Returns whether the native NSURLRequest class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_allHTTPHeaderFields(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_allowsCellularAccess(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_cachePolicy(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPBody(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPMethod(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPShouldHandleCookies(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_HTTPShouldUsePipelining(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_alloc_initWithURL_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_alloc_initWithURL_cachePolicy_timeoutInterval_(System.String,System.String,System.UInt32,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_mainDocumentURL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_networkServiceType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_timeoutInterval(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.UP_NSURLRequest_valueForHTTPHeaderField_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.AllHTTPHeaderFields">
            <summary>
            Returns a dictionary containing all the receiver’s HTTP header fields.
            <br></br>Equivalent to the native <c>allHTTPHeaderFields</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A dictionary containing all the receiver’s HTTP header fields.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– valueForHTTPHeaderField:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.AllowsCellularAccess">
            <summary>
            Returns whether the request is allowed to use the cellular radio (if present).
            <br></br>Equivalent to the native <c>allowsCellularAccess</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the cellular radio can be used; <c>false</c> otherwise.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.CachePolicy">
            <summary>
            Returns the receiver’s cache policy.
            <br></br>Equivalent to the native <c>cachePolicy</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s cache policy.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPBody">
            <summary>
            Returns the receiver’s HTTP body data.
            <br></br>Equivalent to the native <c>HTTPBody</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's HTTP body data.</p>
                <b>Discussion</b>
                <p>This data is sent as the message body of a request, as in an HTTP <c>POST</c> request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPMethod">
            <summary>
            Returns the receiver’s HTTP request method.
            <br></br>Equivalent to the native <c>HTTPMethod</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s HTTP request method.</p>
                <b>Discussion</b>
                <p>The default HTTP method is “GET”.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPShouldHandleCookies">
            <summary>
            Returns whether the default cookie handling will be used for this request.
            <br></br>Equivalent to the native <c>HTTPShouldHandleCookies</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the default cookie handling will be used for this request, <c>false</c> otherwise.</p>
                <b>Discussion</b>
                <p>The default is <c>true</c>.</p>
                <b>Special Considerations</b>
                <p>In OS X v10.2 with Safari 1.0 the value set by this method is not respected by the framework.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.HTTPShouldUsePipelining">
            <summary>
            Returns whether the request should continue transmitting data before receiving a response from an earlier transmission.
            <br></br>Equivalent to the native <c>HTTPShouldUsePipelining</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the request should continue transmitting data; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.MainDocumentURL">
            <summary>
            Returns the main document URL associated with the request.
            <br></br>Equivalent to the native <c>mainDocumentURL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The main document URL associated with the request.</p>
                <b>Discussion</b>
                <p>This URL is used for the cookie “same domain as main document” policy.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.NetworkServiceType">
            <summary>
            Returns the network service type of the request.
            <br></br>Equivalent to the native <c>networkServiceType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The network service type of the request.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.TimeoutInterval">
            <summary>
            Returns the receiver’s timeout interval, in seconds.
            <br></br>Equivalent to the native <c>timeoutInterval</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's timeout interval, in seconds.</p>
                <b>Discussion</b>
                <p>If during a connection attempt the request remains idle for longer than the timeout interval, the request is considered to have timed out.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.URL">
            <summary>
            Returns the request's URL.
            <br></br>Equivalent to the native <c>URL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The request's URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLRequest.Value(System.String)">
            <summary>
            Returns the value of the specified HTTP header field.
            <br></br>Equivalent to the native <c>valueForHTTPHeaderField:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>field</em>
                <p>The name of the header field whose value is to be returned. In keeping with the HTTP RFC, HTTP header field names are case-insensitive.</p>
                <b>Return Value</b>
                <p>The value associated with the header field <em>field</em>,  or <c>null</c> if there is no corresponding header field.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="field">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy">
            <summary>
            These constants are used to specify interaction with the cached responses.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReturnCacheDataElseLoad">
            <summary>
                <p>Specifies that the existing cached data should be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReturnCacheDataElseLoad</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadRevalidatingCacheData">
            <summary>
                <p>Specifies that the existing cache data may be used provided the origin source confirms its validity, otherwise the URL is loaded from the origin source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadRevalidatingCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReturnCacheDataDontLoad">
            <summary>
                <p>Specifies that the existing cache data should be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed. This constant specifies a behavior that is similar to an “offline” mode.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReturnCacheDataDontLoad</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringLocalAndRemoteCacheData">
            <summary>
                <p>Specifies that not only should the local cache data be ignored, but that proxies and other intermediates should be instructed to disregard their caches so far as the protocol allows.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringLocalAndRemoteCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringCacheData">
            <summary>
                <p>Replaced by <c>NSURLRequestReloadIgnoringLocalCacheData</c>.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringCacheData</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.UseProtocolCachePolicy">
            <summary>
                <p>Specifies that the caching logic defined in the protocol implementation, if any, is used for a particular URL load request. This is the default policy for URL load requests.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestUseProtocolCachePolicy</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestCachePolicy.ReloadIgnoringLocalCacheData">
            <summary>
                <p>Specifies that the data for the URL load should be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLRequestReloadIgnoringLocalCacheData</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType">
            <summary>
            These constants are used to specify the network service type of a request.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Default">
            <summary>
                <p>Specifies standard network traffic.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeDefault</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Voice">
            <summary>
                <p>Specifies that the request is for voice traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVoice</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Background">
            <summary>
                <p>Specifies that the request is for background traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeBackground</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.VoIP">
            <summary>
                <p>Specifies that the request is for VoIP traffic.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVoIP</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Foundation.NSURLRequestNetworkServiceType.Video">
            <summary>
                <p>Specifies that the request is for video traffic.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSURLNetworkServiceTypeVideo</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSURLResponse">
            <summary>
                <c>NSURLResponse</c> declares the programmatic interface for an object that accesses the response returned by an <c>NSURLRequest</c> instance.
            </summary>
            <remarks>
                <p>
                    <c>NSURLResponse</c> encapsulates the metadata associated with a URL load in a manner independent of protocol and URL scheme.</p>
                <p>
                    <c>NSHTTPURLResponse</c> is a subclass of <c>NSURLResponse</c> that provides methods for accessing information specific to HTTP protocol responses. An <c>NSHTTPURLResponse</c> object represents a response to an HTTP URL load request.</p>
                <p>
                    <strong>Note:</strong>
                    <c>NSURLResponse</c> objects do not contain the actual bytes representing the content of a URL. See <c>NSURLConnection</c> for more information about receiving the content data for a URL load.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSURLResponse" /> class.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.String,System.Int32,System.String)">
            <summary>
            Creates an instance of the native NSURLResponse and initializes the object. Returns an initialized <c>NSURLResponse</c> object with the URL, MIME type, length, and text encoding set to given values.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] initWithURL:MIMEType:expectedContentLength:textEncodingName:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>URL</em>
                <p>The URL for the new object.</p>
                <em>MIMEType</em>
                <p>The MIME type.</p>
                <em>length</em>
                <p>The expected content length.This value should be <c>–1</c> if the expected length is undetermined</p>
                <em>name</em>
                <p>The text encoding name. This value may be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object with the URL set to <em>URL</em>, the MIME type set to <em>MIMEType</em>, length set to <em>length</em>, and text encoding name set to <em>name</em>. </p>
                <b>Discussion</b>
                <p>This is the designated initializer for <c>NSURLResponse</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:statusCode:HTTPVersion:headerFields:</c>
                    </li>
                </ul>
            </remarks>
            <param name="URL">
            </param>
            <param name="MIMEType">
            </param>
            <param name="length">
            </param>
            <param name="name">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.#ctor(U3DXT.iOS.Native.Foundation.NSURL,System.Int32,System.String,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Creates an instance of the native NSURLResponse and initializes the object. Returns an initialized response with the specified values.
            <br></br>Equivalent to the native <c>[[NSURLResponse alloc] initWithURL:statusCode:HTTPVersion:headerFields:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>url</em>
                <p>The URL for the new object.</p>
                <em>statusCode</em>
                <p>The HTTP status code to return.</p>
                <em>HTTPVersion</em>
                <p>The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1"</p>
                <em>headerFields</em>
                <p>A dictionary representing the header keys and values of the server response.</p>
                <b>Return Value</b>
                <p>An initialized <c>NSURLResponse</c> object or <c>NULL</c> if an error occurred during initialization. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS v5.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithURL:MIMEType:expectedContentLength:textEncodingName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="url">
            </param>
            <param name="statusCode">
            </param>
            <param name="HTTPVersion">
            </param>
            <param name="headerFields">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSURLResponse.ClassExists">
            <summary>
            Returns whether the native NSURLResponse class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_expectedContentLength(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_alloc_initWithURL_MIMEType_expectedContentLength_textEncodingName_(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_alloc_initWithURL_statusCode_HTTPVersion_headerFields_(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_MIMEType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_suggestedFilename(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_textEncodingName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.UP_NSURLResponse_URL(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.ExpectedContentLength">
            <summary>
            Returns the receiver’s expected content length
            <br></br>Equivalent to the native <c>expectedContentLength</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s expected content length, or <c>NSURLResponseUnknownLength</c> if the length can’t be determined.</p>
                <b>Discussion</b>
                <p>Some protocol implementations report the content length as part of the response, but not all protocols guarantee to deliver that amount of data. Clients should be prepared to deal with more or less data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.MIMEType">
            <summary>
            Returns the receiver’s MIME type.
            <br></br>Equivalent to the native <c>MIMEType</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s MIME type.</p>
                <b>Discussion</b>
                <p>The MIME type is often provided by the response’s originating source. However, that value may be changed or corrected by a protocol implementation if it can be determined that the response’s source reported the information incorrectly. </p>
                <p>If the response’s originating source does not provide a MIME type, an attempt to guess the MIME type may be made.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.SuggestedFilename">
            <summary>
            Returns a suggested filename for the response data.
            <br></br>Equivalent to the native <c>suggestedFilename</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A suggested filename for the response data.</p>
                <b>Discussion</b>
                <p>The method tries to create a filename using the following, in order:</p>
                <ol class="ol">
                    <li class="li">
                        <p>A filename specified using the content disposition header.</p>
                    </li>
                    <li class="li">
                        <p>The last path component of the URL.</p>
                    </li>
                    <li class="li">
                        <p>The host of the URL.</p>
                    </li>
                </ol>
                <p>If the host of URL can't be converted to a valid filename, the filename “unknown” is used.</p>
                <p>In most cases, this method appends the proper file extension based on the MIME type. This method will always return a valid filename regardless of whether or not the resource is saved to disk.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.TextEncodingName">
            <summary>
            Returns the name of the receiver’s text encoding provided by the response’s originating source.
            <br></br>Equivalent to the native <c>textEncodingName</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The name of the receiver’s text encoding provided by the response’s originating source, or <c>null</c> if no text encoding was provided by the protocol</p>
                <b>Discussion</b>
                <p>Clients can convert this string to an <c>NSStringEncoding</c> or a <c>CFStringEncoding</c> using the methods and functions available in the appropriate framework.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSURLResponse.URL">
            <summary>
            Returns the receiver’s URL.
            <br></br>Equivalent to the native <c>URL</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver’s URL.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.HelperDelegate">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.DebugCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.CallbackCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackCache.ExceptionCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._DebugLog(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._ThrowException(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Callback(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Add(U3DXT.iOS.Native.Internals._CallbackCache.HelperDelegate,System.Delegate,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Remove(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackCache._Get(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._CallbackEntry">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._CallbackEntry.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._oneTime">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._helper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._callback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._CallbackEntry._ownerUuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseClass">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._IosBaseClass._newHelper">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="F:U3DXT.iOS.Native.Internals._IosBaseClass._uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="P:U3DXT.iOS.Native.Internals._IosBaseClass.Uuid">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.UP_NSObject_alloc_init(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass._Init(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.Finalize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseClass.ToString">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._IosBaseDelegate">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate.UP_ProtocolBase_add_optionals(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._IosBaseDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._ObjectCache">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._ObjectCache.RemoveCallback">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._RemoveCallback(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._Create(System.Type,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._Remove(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._ObjectCache._SetDebugOn(System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals._Serializer">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer.#ctor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._Serialize(System.Object)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._Deserialize(System.Object)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals._Serializer._GetType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertView">
            <summary>
            Use the <c>UIAlertView</c> class to display an alert message to the user. An alert view functions similar to but differs in appearance from an action sheet (an instance of <c>UIActionSheet</c>).
            </summary>
            <remarks>
                <p>Use the properties and methods defined in this class to set the title, message, and delegate of an alert view and configure the buttons. You must set a delegate if you add custom buttons. The delegate should conform to the <c>UIAlertViewDelegate</c> protocol. Use the <c>show</c> method to display an alert view once it is configured.</p>
                <p>
                    <strong>Important:</strong> In iOS 4.0 and later, alert views are not dismissed automatically when an application moves to the background. This behavior differs from earlier versions of the operating system, where alert views were automatically cancelled (and their cancellation handler executed) as part of the termination sequence for the application. Now, it is up to you to decide whether to dismiss the alert view (and execute its cancellation handler) or leave it visible for when your application moves back to the foreground. Remember that your application can still be terminated while in the background, so some type of action may be necessary in either case. </p>
                <p>
                </p>
                <b>Subclassing Notes</b>
                <p>The <c>UIAlertView</c> class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIAlertView" /> class.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Creates an instance of the native UIAlertView and initializes the object. Convenience method for initializing an alert view.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>title</em>
                <p>The string that appears in the receiver’s title bar.</p>
                <em>message</em>
                <p>Descriptive text that provides more details than the title.</p>
                <em>delegate</em>
                <p>The receiver’s delegate or <c><!--a  -->nil<!--/a--></c> if it doesn’t have a delegate.</p>
                <em>cancelButtonTitle</em>
                <p>The title of the cancel button or <c>null</c> if there is no cancel button. </p>
                <p>Using this argument is equivalent to setting the cancel button index to the value returned by invoking <c>addButtonWithTitle:</c> specifying this title. </p>
                <em>otherButtonTitles,</em>
                <p>The title of another button. </p>
                <p>Using this argument is equivalent to invoking <c>addButtonWithTitle:</c> with this title to add more buttons.</p>
                <em>...</em>
                <p>Titles of additional buttons to add to the receiver, terminated with <c>null</c>.</p>
                <b>Return Value</b>
                <p>Newly initialized alert view.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– addButtonWithTitle:</c>
                    </li>
                </ul>
            </remarks>
            <param name="title">
            </param>
            <param name="message">
            </param>
            <param name="aDelegate">
            </param>
            <param name="cancelButtonTitle">
            </param>
            <param name="otherButtonTitles">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIAlertView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIAlertView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.ClassExists">
            <summary>
            Returns whether the native UIAlertView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.AlertViewStyle">
            <summary>
            The kind of alert displayed to the user.
            <br></br>Equivalent to the native <c>alertViewStyle</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.CancelButtonIndex">
            <summary>
            The index number of the cancel button.
            <br></br>Equivalent to the native <c>cancelButtonIndex</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The button indices start at <c>0</c>. If <c>-1</c>, then the index is not set.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.Delegate">
            <summary>
            The receiver’s delegate or <c><!--a  -->nil<!--/a--></c> if it doesn’t have a delegate.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>See <em>UIAlertViewDelegate Protocol Reference</em> for the methods this delegate should implement.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.FirstOtherButtonIndex">
            <summary>
            The index of the first other button. (read-only)
            <br></br>Equivalent to the native <c>firstOtherButtonIndex</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The button indices start at <c>0</c>. If <c>-1</c>, then the index is not set. This property is ignored if there are no other buttons. The default value is <c>-1</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.Message">
            <summary>
            Descriptive text that provides more details than the title.
            <br></br>Equivalent to the native <c>message</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.NumberOfButtons">
            <summary>
            The number of buttons on the alert view. (read-only)
            <br></br>Equivalent to the native <c>numberOfButtons</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.Title">
            <summary>
            The string that appears in the receiver’s title bar.
            <br></br>Equivalent to the native <c>title</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIAlertView.Visible">
            <summary>
            A Boolean value that indicates whether the receiver is displayed. (read-only)
            <br></br>Equivalent to the native <c>visible</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If <c>true</c>, the receiver is displayed; otherwise, <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_alertViewStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_alertViewStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_cancelButtonIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_cancelButtonIndex(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_firstOtherButtonIndex(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_message(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_message(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_numberOfButtons(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_title(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_set_title(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_get_visible(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_addButtonWithTitle_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_buttonTitleAtIndex_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_dismissWithClickedButtonIndex_animated_(System.String,System.Int32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_alloc_initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles_(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.UP_UIAlertView_show(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.AddButton(System.String)">
            <summary>
            Adds a button to the receiver with the given title.
            <br></br>Equivalent to the native <c>addButtonWithTitle:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>title</em>
                <p>The title of the new button.</p>
                <b>Return Value</b>
                <p>The index of the new button. Button indices start at <c>0</c> and increase in the order they are added.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>message</c>
                    </li>
                </ul>
            </remarks>
            <param name="title">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.ButtonTitleAtIndex(System.Int32)">
            <summary>
            Returns the title of the button at the given index.
            <br></br>Equivalent to the native <c>buttonTitleAtIndex:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buttonIndex</em>
                <p>The index of the button. The button indices start at <c>0</c>.</p>
                <b>Return Value</b>
                <p>The title of the button specified by index <em>buttonIndex</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>“Displaying”</c>
                    </li>
                </ul>
            </remarks>
            <param name="buttonIndex">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.Dismiss(System.Int32,System.Boolean)">
            <summary>
            Dismisses the receiver, optionally with animation.
            <br></br>Equivalent to the native <c>dismissWithClickedButtonIndex:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>buttonIndex</em>
                <p>The index of the button that was clicked just before invoking this method. The button indices start at <c>0</c>.</p>
                <em>animated</em>
                <p>
                    <c>true</c> if the receiver should be removed by animating it first; otherwise, <c>false</c> if it should be removed immediately with no animation.</p>
                <b>Discussion</b>
                <p>In iOS 4.0, you may want to call this method whenever your application moves to the background. An alert view is not dismissed automatically when an application moves to the background. This behavior differs from previous versions of the operating system, where they were canceled automatically when the application was terminated. Dismissing the alert view gives your application a chance to save changes or abort the operation and perform any necessary cleanup in case your application is terminated later.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="buttonIndex">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIAlertView.Show">
            <summary>
            Displays the receiver using animation.
            <br></br>Equivalent to the native <c>show</c> method.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIAlertViewStyle">
            <summary>
            The presentation style of the alert.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.LoginAndPasswordInput">
            <summary>
                <p>An alert that allows the user to enter a login identifier and password.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleLoginAndPasswordInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.SecureTextInput">
            <summary>
                <p>An alert that allows the user to enter text. The text field is obscured.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleSecureTextInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.PlainTextInput">
            <summary>
                <p>An alert that allows the user to enter text.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStylePlainTextInput</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIAlertViewStyle.Default">
            <summary>
                <p>A standard alert.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIAlertViewStyleDefault</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIApplication">
            <summary>
            The <c>UIApplication</c> class provides a centralized point of control and coordination for applications running on iOS.
            </summary>
            <remarks>
                <p>Every application must have exactly one instance of <c>UIApplication</c> (or a subclass of <c>UIApplication</c>). When an application is launched, the <c>UIApplicationMain</c> function is called; among its other tasks, this function creates a singleton <c>UIApplication</c> object. Thereafter you can access this object by invoking the <c>sharedApplication</c> class method.</p>
                <p>A major role of a <c>UIApplication</c> object is to handle the initial routing of incoming user events. It also dispatches action messages forwarded to it by control objects (<c>UIControl</c>) to the appropriate target objects. In addition, the <c>UIApplication</c> object maintains a list of all the windows (<c>UIWindow</c> objects) currently open in the application, so through those it can retrieve any of the application’s <c>UIView</c> objects. The application object is typically assigned a delegate, an object that the application informs of significant runtime events—for example, application launch, low-memory warnings, and application termination—giving it an opportunity to respond appropriately.</p>
                <p>Applications can cooperatively handle a resource such as an email or an image file through the <c>openURL:</c> method. For example, an application opening an email URL with this method may cause the mail client to launch and display the message.</p>
                <p>The programmatic interfaces of <c>UIApplication</c> and <c>UIApplicationDelegate</c> also allow you to manage behavior that is specific to the device. You can control application response to changes in interface orientation, temporarily suspend incoming touch events, and turn proximity sensing (of the user’s face) off and on again.  </p>
                <p>For iOS 3.0, <c>UIApplication</c> has added methods for remote-notification registration, for triggering of the undo-redo UI (<c>applicationSupportsShakeToEdit</c>), and for determining whether any installed application can open a URL (<c>canOpenURL:</c>).</p>
                <p>In iOS 4.0, <c>UIApplication</c> has added methods and constants for managing background execution, for scheduling and canceling local notifications, and for controlling the reception of remote-control events.</p>
                <p>
                    <c>UIApplication</c> defines a delegate that must adopt the <c>UIApplicationDelegate</c> protocol and implement some of the protocol methods.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	You might decide to subclass <c>UIApplication</c> to override <c>sendEvent:</c> or <c>sendAction:to:from:forEvent:</c> to implement custom event and action dispatching. However, there is rarely a valid need to extend this class; the application delegate (<c>UIApplicationDelegate</c> is sufficient for most occasions. If you do subclass <c>UIApplication</c>, be very sure of what you are trying to accomplish with the subclass.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIApplication" /> class.
            <br></br>Equivalent to the native <c>[[UIApplication alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.ClassExists">
            <summary>
            Returns whether the native UIApplication class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIApplication.KeyWindow">
            <summary>
            The application's key window. (read-only)
            <br></br>Equivalent to the native <c>keyWindow</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property holds the <c>UIWindow</c> object in the <c>windows</c> array that is most recently sent the <c>makeKeyAndVisible</c> message. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>windows</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_sharedApplication">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.UP_UIApplication_get_keyWindow(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIApplication.SharedApplication">
            <summary>
            Returns the singleton application instance.
            <br></br>Equivalent to the native <c>sharedApplication</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The application instance is created in the <c>UIApplicationMain</c> function.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment">
            <summary>
            Vertical adjustment options.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Baseline adjustment options determine how to adjust the position of text in cases where the text must be drawn using a different font size than the one originally specified. For example, with the <c>UIBaselineAdjustmentAlignBaselines</c> option, the position of the baseline remains fixed at its initial location while the text appears to move toward that baseline. Similarly, the <c>UIBaselineAdjustmentNone</c> option makes it appear as if the text is moving upwards towards the top-left corner of the bounding box.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.AlignCenters">
            <summary>
                <p>Adjust text based relative to the center of its bounding box. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentAlignCenters</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.AlignBaselines">
            <summary>
                <p>Adjust text relative to the position of its baseline. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentAlignBaselines</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIBaselineAdjustment.None">
            <summary>
                <p>Adjust text relative to the top-left corner of the bounding box. This is the default adjustment. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIBaselineAdjustmentNone</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIColor">
            <summary>
            A <c>UIColor</c> object represents color and sometimes opacity (alpha value). You can use <c>UIColor</c> objects to store color data, and during drawing you can use them to set the current fill and stroke colors.
            </summary>
            <remarks>
                <p>Many methods in UIKit require you to specify color data using a <c>UIColor</c> object, and for general color needs it should be your main way of specifying colors. The color spaces used by this object are optimized for use on iOS-based devices and are therefore appropriate for most drawing needs. If you prefer to use Core Graphics colors and color spaces instead, however, you may do so. </p>
                <p>Most developers should have no need to subclass <c>UIColor</c>. The only time doing so might be necessary is if you require support for additional colorspaces or color models.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIColor" /> class.
            <br></br>Equivalent to the native <c>[[UIColor alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an instance of the native UIColor and initializes the object. Initializes and returns a color object using the specified opacity and RGB component values.
            <br></br>Equivalent to the native <c>[[UIColor alloc] initWithRed:green:blue:alpha:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>red</em>
                <p>The red component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>green</em>
                <p>The green component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>blue</em>
                <p>The blue component of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0.</p>
                <b>Return Value</b>
                <p>An initialized color object. The color information represented by this object is in the device RGB colorspace. </p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithRed:green:blue:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="red">
            </param>
            <param name="green">
            </param>
            <param name="blue">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.#ctor(System.Single,System.Single)">
            <summary>
            Creates an instance of the native UIColor and initializes the object. Initializes and returns a color object using the specified opacity and grayscale values.
            <br></br>Equivalent to the native <c>[[UIColor alloc] initWithWhite:alpha:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>white</em>
                <p>The grayscale value of the color object, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0.</p>
                <b>Return Value</b>
                <p>An initialized color object. The color information represented by this object is in the device gray colorspace.</p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ colorWithWhite:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="white">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIColor.ClassExists">
            <summary>
            Returns whether the native UIColor class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_blackColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_blueColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_brownColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_clearColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_colorWithHue_saturation_brightness_alpha_(System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_cyanColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_darkGrayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_darkTextColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_grayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_greenColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_groupTableViewBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_lightGrayColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_lightTextColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_magentaColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_orangeColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_purpleColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_redColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_scrollViewTexturedBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_underPageBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_viewFlipsideBackgroundColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_whiteColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_yellowColor">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_colorWithAlphaComponent_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_alloc_initWithRed_green_blue_alpha_(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_alloc_initWithWhite_alpha_(System.String,System.Single,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_set(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_setFill(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UP_UIColor_setStroke(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BlackColor">
            <summary>
            Returns a color object whose grayscale value is 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>blackColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BlueColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>blueColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.BrownColor">
            <summary>
            Returns a color object whose RGB values are 0.6, 0.4, and 0.2 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>brownColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ClearColor">
            <summary>
            Returns a color object whose grayscale and alpha values are both 0.0.
            <br></br>Equivalent to the native <c>clearColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.FromHSBA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates and returns a color object using the specified opacity and HSB color space component values.
            <br></br>Equivalent to the native <c>colorWithHue:saturation:brightness:alpha:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>hue</em>
                <p>The hue component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>saturation</em>
                <p>The saturation component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>brightness</em>
                <p>The brightness (or value) component of the color object in the HSB color space, specified as a value from 0.0 to 1.0.</p>
                <em>alpha</em>
                <p>The opacity value of the color object, specified as a value from 0.0 to 1.0. </p>
                <b>Return Value</b>
                <p>The color object. The color information represented by this object is in the device RGB colorspace. </p>
                <b>Discussion</b>
                <p>Values below 0.0 are interpreted as 0.0, and values above 1.0 are interpreted as 1.0. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– initWithHue:saturation:brightness:alpha:</c>
                    </li>
                </ul>
            </remarks>
            <param name="hue">
            </param>
            <param name="saturation">
            </param>
            <param name="brightness">
            </param>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.CyanColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>cyanColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.DarkGrayColor">
            <summary>
            Returns a color object whose grayscale value is 1/3 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>darkGrayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.DarkTextColor">
            <summary>
            Returns the system color used for displaying text on a light background.
            <br></br>Equivalent to the native <c>darkTextColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GrayColor">
            <summary>
            Returns a color object whose grayscale value is 0.5 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>grayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GreenColor">
            <summary>
            Returns a color object whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>greenColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.GroupTableViewBackgroundColor">
            <summary>
            Returns the system color used for the background of a grouped table.
            <br></br>Equivalent to the native <c>groupTableViewBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.LightGrayColor">
            <summary>
            Returns a color object whose grayscale value is 2/3 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>lightGrayColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.LightTextColor">
            <summary>
            Returns the system color used for displaying text on a dark background.
            <br></br>Equivalent to the native <c>lightTextColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.MagentaColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>magentaColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.OrangeColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.5, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>orangeColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.PurpleColor">
            <summary>
            Returns a color object whose RGB values are 0.5, 0.0, and 0.5 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>purpleColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.RedColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>redColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ScrollViewTexturedBackgroundColor">
            <summary>
            Returns the system pattern color used to render the area behind scrollable content.
            <br></br>Equivalent to the native <c>scrollViewTexturedBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.UnderPageBackgroundColor">
            <summary>
            Returns the system pattern color used to render the background of a page.
            <br></br>Equivalent to the native <c>underPageBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.ViewFlipsideBackgroundColor">
            <summary>
            Returns the system color used for the back side of a view while it is being flipped.
            <br></br>Equivalent to the native <c>viewFlipsideBackgroundColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.WhiteColor">
            <summary>
            Returns a color object whose grayscale value is 1.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>whiteColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.YellowColor">
            <summary>
            Returns a color object whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0.
            <br></br>Equivalent to the native <c>yellowColor</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The <c>UIColor</c> object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.Color(System.Single)">
            <summary>
            Creates and returns a color object that has the same color space and component values as the receiver, but has the specified alpha component.
            <br></br>Equivalent to the native <c>colorWithAlphaComponent:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>alpha</em>
                <p>The opacity value of the new <c>UIColor</c> object.</p>
                <b>Return Value</b>
                <p>The new <c>UIColor</c> object.</p>
                <b>Discussion</b>
                <p>A subclass with explicit opacity components should override this method to return a color with the specified alpha.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="alpha">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.Set">
            <summary>
            Sets the color of subsequent stroke and fill operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>set</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify both the stroke and fill color in the current graphics context by setting them both to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setFill</c>
                    </li>
                    <li>
                        <c>– setStroke</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.SetFill">
            <summary>
            Sets the color of subsequent fill operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>setFill</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify the fill color in the current graphics context by setting it to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– set</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIColor.SetStroke">
            <summary>
            Sets the color of subsequent stroke operations to the color that the receiver represents.
            <br></br>Equivalent to the native <c>setStroke</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you subclass <c>UIColor</c>, you must implement this method in your subclass. Your custom implementation should modify the stroke color in the current graphics context by setting it to the color represented by the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– set</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImage">
            <summary>
            A <c>UIImage</c> object is a high-level way to display image data. You can create images from files, from Quartz image objects, or from raw image data you receive. The <c>UIImage</c> class also offers several options for drawing images to the current graphics context using different blend modes and opacity values.
            </summary>
            <remarks>
                <p>Image objects are immutable, so you cannot change their properties after creation. This means that you generally specify an image’s properties at initialization time or rely on the image’s metadata to provide the property value. In some cases, however, the <c>UIImage</c> class provides convenience methods for obtaining a copy of the image that uses custom values for a property. </p>
                <p>Because image objects are immutable, they also do not provide direct access to their underlying image data. However, you can get an <c>NSData</c> object containing either a PNG or JPEG representation of the image data using the <c>UIImagePNGRepresentation</c> and <c>UIImageJPEGRepresentation</c> functions.</p>
                <p>The system uses image objects to represent still pictures taken with the camera on supported devices. To take a picture, use the <c>UIImagePickerController</c> class. To save a picture to the Saved Photos album, use the <c>UIImageWriteToSavedPhotosAlbum</c> function.</p>
                <b>Images and Memory Management</b>
                <p>In low-memory situations, image data may be purged from a <c>UIImage</c> object to free up memory on the system. This purging behavior affects only the image data stored internally by the <c>UIImage</c> object and not the object itself. When you attempt to draw an image whose data has been purged, the image object automatically reloads the data from its original file. This extra load step, however, may incur a small performance penalty.</p>
                <p>You should avoid creating <c>UIImage</c> objects that are greater than 1024 x 1024 in size. Besides the large amount of memory such an image would consume, you may run into problems when using the image as a texture in OpenGL ES or when drawing the image to a view or layer. This size restriction does not apply if you are performing code-based manipulations, such as resizing an image larger than 1024 x 1024 pixels by drawing it to a bitmap-backed graphics context. In fact, you may need to resize an image in this manner (or break it into several smaller images) in order to draw it to one of your views.</p>
                <b>Supported Image Formats</b>
                <p> Table 1  lists the file formats that can be read by the <c>UIImage</c> class. </p>
                <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                    <caption class="tablecaption">
                        <strong class="caption_number">Table 1</strong>  Supported file formats</caption>
                    <tr>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Format</p>
                        </th>
                        <th scope="col" class="TableHeading_TableRow_TableCell">
                            <p>Filename extensions</p>
                        </th>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Tagged Image File Format (TIFF)</p>
                        </td>
                        <td>
                            <p>
                                <c>.tiff</c>, <c>.tif</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Joint Photographic Experts Group (JPEG)</p>
                        </td>
                        <td>
                            <p>
                                <c>.jpg</c>, <c>.jpeg</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Graphic Interchange Format (GIF)</p>
                        </td>
                        <td>
                            <p>
                                <c>.gif</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Portable Network Graphic (PNG)</p>
                        </td>
                        <td>
                            <p>
                                <c>.png</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Bitmap Format (DIB)</p>
                        </td>
                        <td>
                            <p>
                                <c>.bmp</c>, <c>.BMPf</c></p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Icon Format </p>
                        </td>
                        <td>
                            <p>
                                <c>.ico</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>Windows Cursor</p>
                        </td>
                        <td>
                            <p>
                                <c>.cur</c>
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <p>XWindow bitmap</p>
                        </td>
                        <td>
                            <p>
                                <c>.xbm</c>
                            </p>
                        </td>
                    </tr>
                </table>
                <p>
                    <strong>Note:</strong> Windows Bitmap Format (BMP) files that are formatted as RGB-565 are converted to ARGB-1555 when they are loaded. </p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIImage" /> class.
            <br></br>Equivalent to the native <c>[[UIImage alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified data.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithData:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The data object containing the image data. </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data.</p>
                <b>Discussion</b>
                <p>The data in the <em>data</em> parameter must be formatted to match the file format of one of the system’s supported image types. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(System.String)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the contents of the specified file.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithContentsOfFile:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>path</em>
                <p>The path to the file. This path should include the filename extension that identifies the type of the image data.  </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not find the file or initialize the image from its contents. </p>
                <b>Discussion</b>
                <p>This method loads the image data into memory and marks it as purgeable. If the data is purged and needs to be reloaded, the image object loads that data again from the specified path. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="path">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified Quartz image reference.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithCGImage:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>CGImage</em>
                <p>A Quartz image reference.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="cgImage">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.CoreGraphics.CGImage,System.Single,U3DXT.iOS.Native.UIKit.UIImageOrientation)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns an image object with the specified scale and orientation factors
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithCGImage:scale:orientation:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageRef</em>
                <p>The Quartz image object.</p>
                <em>scale</em>
                <p>The scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the <c>size</c> property. </p>
                <em>orientation</em>
                <p>The orientation of the image data. You can use this parameter to specify any rotation factors applied to the image.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
            <param name="cgImage">
            </param>
            <param name="scale">
            </param>
            <param name="orientation">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.#ctor(U3DXT.iOS.Native.Foundation.NSData,System.Single)">
            <summary>
            Creates an instance of the native UIImage and initializes the object. Initializes and returns the image object with the specified data and scale factor.
            <br></br>Equivalent to the native <c>[[UIImage alloc] initWithData:scale:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>data</em>
                <p>The data object containing the image data. </p>
                <em>scale</em>
                <p>The scale factor to assume when interpreting the image data. Applying a scale factor of 1.0 results in an image whose size matches the pixel-based dimensions of the image. Applying a different scale factor changes the size of the image as reported by the <c>size</c> property. </p>
                <b>Return Value</b>
                <p>An initialized <c>UIImage</c> object, or <c>null</c> if the method could not initialize the image from the specified data.</p>
                <b>Discussion</b>
                <p>The data in the <em>data</em> parameter must be formatted to match the file format of one of the system’s supported image types. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
            <param name="data">
            </param>
            <param name="scale">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.ClassExists">
            <summary>
            Returns whether the native UIImage class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.Size">
            <summary>
            The dimensions of the image, taking orientation into account. (read-only)
            <br></br>Equivalent to the native <c>size</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>In iOS 4.0 and later, this value reflects the logical size of the image and is measured in points. In iOS 3.x and earlier, this value always reflects the dimensions of the image measured in pixels.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.ImageOrientation">
            <summary>
            The orientation of the receiver’s image. (read-only)
            <br></br>Equivalent to the native <c>imageOrientation</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Image orientation affects the way the image data is displayed when drawn. By default, images are displayed in the “up” orientation. If the image has associated metadata (such as EXIF information), however, this property contains the orientation indicated by that metadata. For a list of possible values for this property, see  “UIImageOrientation.”  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImage.CGImage">
            <summary>
            The underlying Quartz image data. (read-only)
            <br></br>Equivalent to the native <c>CGImage</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the image data has been purged because of memory constraints, invoking this method forces that data to be loaded back into memory. Reloading the image data may incur a performance penalty. </p>
                <p>If the <c>UIImage</c> object was initialized using a <c>CIImage</c> object, the value of the property is <c>NULL</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.FromByteArray(System.Byte[])">
            <summary>
            Creates and initializes a native UIImage from a byte array containing a PNG or JPEG.
            </summary>
            <returns>The newly created native UIImage.</returns>
            <param name="data">The byte array containing a PNG or JPEG.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.ToByteArray">
            <summary>
            Exports the UIImage as a PNG.
            </summary>
            <returns>The byte array containing a PNG.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.FromTexture2D(UnityEngine.Texture2D)">
            <summary>
            Creates and initializes a native UIImage from a Texture2D.
            </summary>
            <returns>The newly created native UIImage.</returns>
            <param name="texture">The input texture.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.ToTexture2D">
            <summary>
            Creates a Texture2D from the contents of this UIImage.
            </summary>
            <returns>The newly created Texture2D.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.CopyToTexture2D(UnityEngine.Texture2D)">
            <summary>
            Copies the contents of this native UIImage to a Texture2D.
            </summary>
            <returns>
                <c>true</c>, if to image was copied, <c>false</c> otherwise.</returns>
            <param name="texture">The output texture</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_size(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_imageOrientation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_get_CGImage(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithData_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithContentsOfFile_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithCGImage_(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithCGImage_scale_orientation_(System.String,System.UInt32,System.Single,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_alloc_initWithData_scale_(System.String,System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_UIImageJPEGRepresentation(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.UP_UIImage_UIImagePNGRepresentation(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.JPEGRepresentation(System.Single)">
            <summary>
            Returns the data for the specified image in JPEG format.
            <br></br>Equivalent to the native <c>UIImageJPEGRepresentation</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The original image data. </p>
                <em>compressionQuality</em>
                <p>The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality). </p>
                <b>Return Value</b>
                <p>A data object containing the JPEG data, or <c>null</c> if there was a problem generating the data. This function may return <c>null</c> if the image has no data or if the underlying <c>CGImageRef</c> contains data in an unsupported bitmap format.</p>
                <b>Discussion</b>
                <p>If the image object’s underlying image data has been purged, calling this function forces that data to be reloaded into memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="compressionQuality">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImage.PNGRepresentation">
            <summary>
            Returns the data for the specified image in PNG format
            <br></br>Equivalent to the native <c>UIImagePNGRepresentation</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The original image data. </p>
                <b>Return Value</b>
                <p>A data object containing the PNG data, or <c>null</c> if there was a problem generating the data. This function may return <c>null</c> if the image has no data or if the underlying <c>CGImageRef</c> contains data in an unsupported bitmap format.</p>
                <b>Discussion</b>
                <p>If the image object’s underlying image data has been purged, calling this function forces that data to be reloaded into memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UINavigationController">
            <summary>
            The <c>UINavigationController</c> class implements a specialized view controller that manages the navigation of hierarchical content. This class is not intended for subclassing. Instead, you use instances of it as-is in situations where you want your application’s user interface to reflect the hierarchical nature of your content. This <strong>navigation interface</strong> makes it possible to present your data efficiently and also makes it easier for the user to navigate that content.
            </summary>
            <remarks>
                <p>The screens presented by a navigation interface typically mimic the hierarchical organization of your data. At each level of the hierarchy, you provide an appropriate screen (managed by a custom view controller) to display the content at that level.  Figure 1  shows an example of the navigation interface presented by the Settings application in iOS Simulator. The first screen presents the user with the list of applications that contain preferences. Selecting an application reveals individual settings and groups of settings for that application. Selecting a group yields more settings and so on. For all but the root view, the navigation controller provides a back button to allow the user to move back up the hierarchy. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 1</strong>  A sample navigation interface</figcaption>
                </figure>
                <p>A navigation controller object manages the currently displayed screens using the <strong>navigation stack</strong>. At the bottom of this stack is the root view controller and at the top of the stack is the view controller currently being displayed. You use the methods of your navigation controller object to modify the stack at runtime. The most common operation is to push new view controllers onto the stack using the <c>pushViewController:animated:</c> method. Pushing a new view controller object onto the stack causes the view of that view controller to be displayed and the navigation controls to be updated to reflect the change. You typically push view controllers in response to the user selecting an item that leads to the next level in your information hierarchy. </p>
                <p>In addition to pushing view controllers onto the navigation stack, you can also pop them using the <c>popViewControllerAnimated:</c> method. Although you can pop view controllers yourself, the navigation controller also provides a back button (when appropriate) that pops the top view controller in response to user interactions. </p>
                <p>A navigation controller object notifies its delegate object in response to changes in the active view controller. The delegate object is a custom object provided by your application that conforms to the <c>UINavigationControllerDelegate</c> protocol. You can use the methods of this protocol to respond to the change and perform additional setup or cleanup tasks. </p>
                <p>For more information about how to integrate navigation controllers into your application, see <em>View Controller Programming Guide for iOS</em>.</p>
                <b>Navigation Controller Views</b>
                <p>Because the <c>UINavigationController</c> class inherits from the <c>UIViewController</c> class, navigation controllers have their own view that is accessible through the <c>view</c> property. When deploying a navigation interface, you must install this view as the root of whatever view hierarchy you are creating. For example, if you are deploying the navigation interface by itself, you would make this view the main subview of your window. To install a navigation interface inside a tab bar interface, you would install the navigation controller’s view as the root view of the appropriate tab. </p>
                <p>The view for a navigation controller is just a container for several other views, including a navigation bar, an optional toolbar, and the view containing your custom content.  Figure 2  shows how these views are assembled to present the overall navigation interface. Although the content of the navigation bar and toolbar views changes, the views themselves do not. Only the custom content view changes to reflect the view controller that is at the top of the navigation stack. </p>
                <figure class="figure">
                    <figcaption>
                        <strong class="caption_number">Figure 2</strong>  The views of a navigation controller</figcaption>
                </figure>
                <p>
                    <strong>Note:</strong> Because the amount of space available for the custom view can vary (depending on the size of the other navigation views), your custom view’s <c>autoresizingMask</c> property should be set to have a flexible width and height. Before displaying your view, the navigation controller automatically positions and sizes it to fit the available space. </p>
                <p>
                </p>
                <p>The navigation controller is responsible for managing the configuration and display of the navigation bar and navigation toolbar. You must never modify these views directly. Instead, you should manipulate them through the methods and properties of the <c>UINavigationController</c> class. You can hide and show the navigation bar using the <c>navigationBarHidden</c> property or <c>setNavigationBarHidden:animated:</c> method. To specify custom items for the navigation bar, you configure the displayed view controller as described in  “Updating the Navigation Bar.”  For information on how to specify items for the navigation toolbar, see  “Displaying a Toolbar.”  </p>
                <p>There are specific ways to customize the navigation bar displayed in the navigation interface. It is permissible to modify the <c>barStyle</c> or <c>translucent</c> properties of the navigation bar but you must never change its <c>frame</c>, <c>bounds</c>, or <c>alpha</c> values directly. You can also specify a custom <c>UINavigationBar</c> subclass by using the <c>initWithNavigationBarClass:toolbarClass:</c> method to initialize the navigation controller. In addition, the navigation controller object builds the contents of the navigation bar dynamically using the navigation items (instances of the <c>UINavigationItem</c> class) associated with the view controllers on the navigation stack. To change the contents of the navigation bar, you must therefore configure the navigation items for your custom view controllers. For more information about navigation items, see <em>UINavigationItem Class Reference</em>. </p>
                <b>Updating the Navigation Bar</b>
                <p>When the user changes the top-level view controller, whether by pushing or popping a view controller or changing the contents of the navigation stack directly, the navigation controller updates the navigation bar accordingly. Specifically, the navigation controller updates the bar button items displayed in each of the three navigation bar positions: left, middle, and right. Bar button items are instances of the <c>UIBarButtonItem</c> class. You can create items with custom content or create standard system items depending on your needs. For more information about how to create bar button items, see <em>UIBarButtonItem Class Reference</em>.</p>
                <p>The bar button item on the left side of the navigation bar allows for navigation back to the previous view controller on the navigation stack. The navigation controller updates the left side of the navigation bar as follows: </p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom left bar button item, that item is displayed. To specify a custom left bar button item, set the <c>leftBarButtonItem</c> property of the view controller’s navigation item. </p>
                    </li>
                    <li class="li">
                        <p>If the top-level view controller does not have a custom left bar button item, but the navigation item of the previous view controller has a valid item in its <c>backBarButtonItem</c> property, the navigation bar displays that item.</p>
                    </li>
                    <li class="li">
                        <p>If a custom bar button item is not specified by either of the view controllers, a default back button is used and its title is set to the value of the <c>title</c> property of the previous view controller—that is, the view controller one level down on the stack. (If there is only one view controller on the navigation stack, no back button is displayed.) </p>
                    </li>
                </ul>
                <p>The navigation controller updates the middle of the navigation bar as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom title view, the navigation bar displays that view in place of the default title view. To specify a custom title view, set the <c>titleView</c> property of the view controller’s navigation item.</p>
                    </li>
                    <li class="li">
                        <p>If no custom title view is set, the navigation bar displays a label containing the view controller’s default title. The string for this label is usually obtained from the <c>title</c> property of the view controller itself. If you want to display a different title than the one associated with the view controller, set the <c>title</c> property of the view controller’s navigation item instead. </p>
                    </li>
                </ul>
                <p>The navigation controller updates the right side of the navigation bar as follows:</p>
                <ul class="ul">
                    <li class="li">
                        <p>If the new top-level view controller has a custom right bar button item, that item is displayed. To specify a custom right bar button item, set the <c>rightBarButtonItem</c> property of the view controller’s navigation item. </p>
                    </li>
                    <li class="li">
                        <p>If no custom right bar button item is specified, the navigation bar displays nothing on the right side of the bar. </p>
                    </li>
                </ul>
                <p>The navigation controller updates the navigation bar each time the top view controller changes. Thus, these changes occur each time a view controller is pushed onto the stack or popped from it. When you animate a push or pop operation, the navigation controller similarly animates the change in navigation bar content.</p>
                <b>Displaying a Toolbar</b>
                <p>In iOS 3.0 and later, navigation controller objects make it easy to provide a custom toolbar for each screen of a navigation interface. The navigation controller object now manages an optional toolbar in its view hierarchy. When displayed, this toolbar obtains its current set of items from the <c>toolbarItems</c> property of the active view controller. When the active view controller changes, the navigation controller updates the toolbar items to match the new view controller, animating the new items into position when appropriate. </p>
                <p>The navigation toolbar is hidden by default but you can show it for your navigation interface by calling the <c>setToolbarHidden:animated:</c> method of your navigation controller object. If not all of your view controllers support toolbar items, your delegate object can call this method to toggle the visibility of the toolbar during subsequent push and pop operations. To use a custom <c>UIToolbar</c> subclass, use the <c>initWithNavigationBarClass:toolbarClass:</c> method to initialize the navigation controller.</p>
                <b>State Preservation</b>
                <p>In iOS 6 and later, if you assign a value to this view controller’s <c>restorationIdentifier</c> property, it attempts to preserve the child view controllers on its navigation stack. The navigation controller starts at the bottom of the stack and moves upward, encoding each view controller that also has a valid restoration identifier string. During the next launch cycle, the navigation controller restores the preserved view controllers to the navigation stack in the same order that they were preserved. </p>
                <p>The child view controllers you push onto the navigation stack may use the same restoration identifiers. The navigation controller automatically stores additional information to ensure that each child’s restoration path is unique.</p>
                <p>For more information about how state preservation and restoration works, see <em>iOS App Programming Guide</em>.  </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UINavigationController" /> class.
            <br></br>Equivalent to the native <c>[[UINavigationController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.ClassExists">
            <summary>
            Returns whether the native UINavigationController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.TopViewController">
            <summary>
            The view controller at the top of the navigation stack. (read-only)
            <br></br>Equivalent to the native <c>topViewController</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>visibleViewController</c>
                    </li>
                    <li>
                        <c>viewControllers</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.ViewControllers">
            <summary>
            The view controllers currently on the navigation stack.
            <br></br>Equivalent to the native <c>viewControllers</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The root view controller is at index <c>0</c> in the array, the back view controller is at index <c>n-2</c>, and the top controller is at index <c>n-1</c>, where <c>n</c> is the number of items in the array.</p>
                <p>Assigning a new array of view controllers to this property is equivalent to calling the <c>setViewControllers:animated:</c> method with the <em>animated</em> parameter set to <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>topViewController</c>
                    </li>
                    <li>
                        <c>visibleViewController</c>
                    </li>
                    <li>
                        <c>– setViewControllers:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UINavigationController.VisibleViewController">
            <summary>
            The view controller associated with the currently visible view in the navigation interface. (read-only)
            <br></br>Equivalent to the native <c>visibleViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The currently visible view can belong either to the view controller at the top of the navigation stack or to a view controller that was presented modally. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>topViewController</c>
                    </li>
                    <li>
                        <c>viewControllers</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_topViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_viewControllers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_set_viewControllers(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_get_visibleViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popToRootViewControllerAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popToViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_popViewControllerAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_pushViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.UP_UINavigationController_setViewControllers_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopToRootViewController(System.Boolean)">
            <summary>
            Pops all the view controllers on the stack except the root view controller and updates the display.
            <br></br>Equivalent to the native <c>popToRootViewControllerAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>An array of view controllers that are popped from the stack.</p>
                <b>Discussion</b>
                <p>The root view controller becomes the top view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopToViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Pops view controllers until the specified view controller is at the top of the navigation stack.
            <br></br>Equivalent to the native <c>popToViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller that you want to be at the top of the stack.</p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>An array containing the view controllers that were popped from the stack.</p>
                <b>Discussion</b>
                <p>For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PopViewController(System.Boolean)">
            <summary>
            Pops the top view controller from the navigation stack and updates the display.
            <br></br>Equivalent to the native <c>popViewControllerAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Set this value to <c>true</c> to animate the transition. Pass <c>false</c> if you are setting up a navigation controller before its view is displayed.</p>
                <b>Return Value</b>
                <p>The view controller that was popped from the stack.</p>
                <b>Discussion</b>
                <p>This method removes the top view controller from the stack and makes the new top of the stack the active view controller. If the view controller at the top of the stack is the root view controller, this method does nothing. In other words, you cannot pop the last item on the stack.</p>
                <p>In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. In iOS 3.0 and later, the contents of the built-in navigation toolbar are updated to reflect the toolbar items of the new view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– pushViewController:animated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.PushViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Pushes a view controller onto the receiver’s stack and updates the display.
            <br></br>Equivalent to the native <c>pushViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller that is pushed onto the stack. This object cannot be an instance of tab bar controller and it must not already be on the navigation stack.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the transition or <c>false</c> if you do not want the transition to be animated. You might specify <c>false</c> if you are setting up the navigation controller at launch time.</p>
                <b>Discussion</b>
                <p>The object in the <em>viewController</em> parameter becomes the top view controller on the navigation stack. Pushing a view controller results in the display of the view it manages. How that view is displayed is determined by the animated parameter. If the <em>animated</em> parameter is <c>true</c>, the view is animated into position; otherwise, the view is simply displayed in place. The view is automatically resized to fit between the navigation bar and toolbar (if present) before it is displayed. </p>
                <p>In addition to displaying the view associated with the new view controller at the top of the stack, this method also updates the navigation bar and tool bar accordingly. In iOS 3.0 and later, the contents of the built-in navigation toolbar are updated to reflect the toolbar items of the new view controller. For information on how the navigation bar is updated, see  “Updating the Navigation Bar.” </p>
                <p>
                    <strong>Important:</strong> In iOS 2.2 and later, if the object in the <em>viewController</em> parameter is already on the navigation stack, this method throws an exception. In earlier versions of iOS, the method simply does nothing.</p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– popViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToRootViewControllerAnimated:</c>
                    </li>
                    <li>
                        <c>– popToViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UINavigationController.SetViewControllers(System.Object[],System.Boolean)">
            <summary>
            Replaces the view controllers currently managed by the navigation controller with the specified items.
            <br></br>Equivalent to the native <c>setViewControllers:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewControllers</em>
                <p>The view controllers to place in the stack. The front-to-back order of the controllers in this array represents the new bottom-to-top order of the controllers in the navigation stack. Thus, the last item added to the array becomes the top item of the navigation stack.</p>
                <em>animated</em>
                <p>If <c>true</c>, animate the pushing or popping of the top view controller. If <c>false</c>, replace the view controllers without any animations.</p>
                <b>Discussion</b>
                <p>You can use this method to update or replace the current view controller stack without pushing or popping each controller explicitly. In addition, this method lets you update the set of controllers without animating the changes, which might be appropriate at launch time when you want to return the navigation controller to a previous state.</p>
                <p>If animations are enabled, this method decides which type of transition to perform based on whether the last item in the <em>items</em> array is already in the navigation stack. If the view controller is currently in the stack, but is not the topmost item, this method uses a pop transition; if it is the topmost item, no transition is performed. If the view controller is not on the stack, this method uses a push transition. Only one transition is performed, but when that transition finishes, the entire contents of the stack are replaced with the new view controllers. For example, if controllers A, B, and C are on the stack and you set controllers D, A, and B, this method uses a pop transition and the resulting stack contains the controllers D, A, and B.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="viewControllers">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection">
            <summary>
            Constants for specifying the direction of the popover arrow.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Left">
            <summary>
                <p>An arrow that points toward the left.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Down">
            <summary>
                <p>An arrow that points downward.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Up">
            <summary>
                <p>An arrow that points upward.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Unknown">
            <summary>
                <p>The status of the arrow is currently unknown.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionUnknown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Any">
            <summary>
                <p>An arrow that points in any direction.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionAny</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection.Right">
            <summary>
                <p>An arrow that points toward the right.</p>
                <p>Available in iOS 3.2 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIPopoverArrowDirectionRight</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverController">
            <summary>
            The <c>UIPopoverController</c> class is used to manage the presentation of content in a popover. You use popovers to present information temporarily but in a way that does not take over the entire screen like a modal view does. The popover content is layered on top of your existing content in a special type of window. The popover remains visible until the user taps outside of the popover window or you explicitly dismiss it. Popover controllers are for use exclusively on iPad devices. Attempting to create one on other devices results in an exception.
            </summary>
            <remarks>
                <p>To display a popover, create an instance of this class and present it using one of the appropriate methods. When initializing an instance of this class, you must provide the view controller that provides the content for the popover. Popovers normally derive their size from the view controller they present. However, you can change the size of the popover by modifying the value in the <c>popoverContentSize</c> property or by calling the <c>setPopoverContentSize:animated:</c> method. The latter approach is particularly effective if you need to animate changes to the popover’s size. The size you specify is just the preferred size for the popover’s view. The actual size may be altered to ensure that the popover fits on the screen and does not collide with the keyboard.</p>
                <p>When displayed, taps outside of the popover window cause the popover to be dismissed automatically. To allow the user to interact with the specified views and not dismiss the popover, you can assign one or more views to the <c>passthroughViews</c> property. Taps inside the popover window do not automatically cause the popover to be dismissed. Your view and view controller code must handle actions and events inside the popover explicitly and call the <c>dismissPopoverAnimated:</c> method as needed. </p>
                <p>If the user rotates the device while a popover is visible, the popover controller hides the popover and then shows it again at the end of the rotation. The popover controller attempts to position the popover appropriately for you but you may have to present it again or hide it altogether in some cases. For example, when displayed from a bar button item, the popover controller automatically adjusts the position (and potentially the size) of the popover to account for changes to the position of the bar button item. However, if you remove the bar button item during the rotation, or if you presented the popover from a target rectangle in a view, the popover controller does not attempt to reposition the popover. In those cases, you must manually hide the popover or present it again from an appropriate new position. You can do this in the <c>didRotateFromInterfaceOrientation:</c> method of the view controller that you used to present the popover.</p>
                <p>You can assign a delegate to the popover to manage interactions with the popover and receive notifications about its dismissal. For information about the methods of the delegate object, see <em>UIPopoverControllerDelegate Protocol Reference</em>.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIPopoverController" /> class.
            <br></br>Equivalent to the native <c>[[UIPopoverController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.#ctor(U3DXT.iOS.Native.UIKit.UIViewController)">
            <summary>
            Creates an instance of the native UIPopoverController and initializes the object. Returns an initialized popover controller object.
            <br></br>Equivalent to the native <c>[[UIPopoverController alloc] initWithContentViewController:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The view controller for managing the popover’s content. This parameter must not be <c>null</c>.</p>
                <b>Return Value</b>
                <p>An initialized popover controller object.</p>
                <b>Discussion</b>
                <p>When initializing a popover controller, you must specify the view controller object whose content is to be displayed in the popover. You can change this view controller later by modifying the <c>contentViewController</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.ClassExists">
            <summary>
            Returns whether the native UIPopoverController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.ContentViewController">
            <summary>
            The view controller responsible for the content portion of the popover.
            <br></br>Equivalent to the native <c>contentViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is initially set to the view controller passed to the <c>initWithContentViewController:</c> method. You can change the value of this property later to reflect a new set of content. Changing the value of this property swaps the new view controller in for the old one immediately and does not trigger an animation. If you want to animate the change, use the <c>setContentViewController:animated:</c> method instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– setContentViewController:animated:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.Delegate">
            <summary>
            The delegate you want to receive popover controller messages.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The popover controller uses its delegate to determine whether it should dismiss the popover and provides a notification when such an event occurs. For more information about the methods you can implement in your delegate, see <em>UIPopoverControllerDelegate Protocol Reference</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.PassthroughViews">
            <summary>
            An array of views that the user can interact with while the popover is visible.
            <br></br>Equivalent to the native <c>passthroughViews</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a popover is active, interactions with other views are normally disabled until the popover is dismissed. Assigning an array of views to this property allows taps outside of the popover to be handled by the corresponding views. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.PopoverArrowDirection">
            <summary>
            The direction of the popover’s arrow. (read-only)
            <br></br>Equivalent to the native <c>popoverArrowDirection</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>UIPopoverArrowDirectionUnknown</c>. When you present the popover, the value changes to reflect the actual direction of the arrow being used by the popover. When the popover is subsequently dismissed, the value of this property returns to <c>UIPopoverArrowDirectionUnknown</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.PopoverContentSize">
            <summary>
            The size of the popover’s content view.
            <br></br>Equivalent to the native <c>popoverContentSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property represents the size of the content view that is managed by the view controller in the <c>contentViewController</c> property. The initial value of this property is set to value in the view controller’s <c>contentSizeForViewInPopover</c> property. Changing the value of this property overrides the default value of the current view controller. The overridden value persists until you assign a new content view controller to the receiver. Thus, if you want to keep your overridden value, you must reassign it after changing the content view controller.  </p>
                <p>When changing the value of this property, the width value you specify must be at least 320 points and no more than 600 points. There are no restrictions on the height value. However, both the width and height values you specify may be adjusted to ensure the popup fits on screen and is not covered by the keyboard. If you change the value of this property while the popover is visible, the size change is animated. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverController.PopoverVisible">
            <summary>
            A Boolean value indicating whether the popover is currently visible. (read-only)
            <br></br>Equivalent to the native <c>popoverVisible</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You must present the popover to make it visible.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_contentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_contentViewController(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_passthroughViews(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_passthroughViews(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverArrowDirection(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverContentSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_set_popoverContentSize(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_get_popoverVisible(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_dismissPopoverAnimated_(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_alloc_initWithContentViewController_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_presentPopoverFromRect_inView_permittedArrowDirections_animated_(System.String,System.String,System.String,System.UInt32,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_setContentViewController_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.UP_UIPopoverController_setPopoverContentSize_animated_(System.String,System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.DismissPopover(System.Boolean)">
            <summary>
            Dismisses the popover programmatically.
            <br></br>Equivalent to the native <c>dismissPopoverAnimated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the dismissal of the popover or <c>false</c> to dismiss it immediately.</p>
                <b>Discussion</b>
                <p>You can use this method to dismiss the popover programmatically in response to taps inside the popover window. Taps outside of the popover’s contents automatically dismiss the popover.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.PresentPopover(UnityEngine.Rect,U3DXT.iOS.Native.UIKit.UIView,U3DXT.iOS.Native.UIKit.UIPopoverArrowDirection,System.Boolean)">
            <summary>
            Displays the popover and anchors it to the specified location in the view.
            <br></br>Equivalent to the native <c>presentPopoverFromRect:inView:permittedArrowDirections:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in view at which to anchor the popover window.</p>
                <em>view</em>
                <p>The view containing the anchor rectangle for the popover.</p>
                <em>arrowDirections</em>
                <p>The arrow directions the popover is permitted to use. You can use this value to force the popover to be positioned on a specific side of the rectangle. However, it is generally better to specify <c>UIPopoverArrowDirectionAny</c> and let the popover decide the best placement. You must not specify <c>UIPopoverArrowDirectionUnknown</c> for this parameter.</p>
                <em>animated</em>
                <p>Specify <c>true</c> to animate the presentation of the popover or <c>false</c> to display it immediately.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
            <param name="view">
            </param>
            <param name="arrowDirections">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.SetContentViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean)">
            <summary>
            Sets the view controller responsible for the content portion of the popover.
            <br></br>Equivalent to the native <c>setContentViewController:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewController</em>
                <p>The new view controller whose content should be displayed by the popover.</p>
                <em>animated</em>
                <p>Specify <c>true</c> if the change of view controllers should be animated or <c>false</c> if the change should occur immediately.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="viewController">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverController.SetPopoverContentSize(U3DXT.Utils.Size,System.Boolean)">
            <summary>
            Changes the size of the popover’s content view.
            <br></br>Equivalent to the native <c>setPopoverContentSize:animated:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The new size to apply to the content view. </p>
                <em>animated</em>
                <p>Specify <c>true</c> if you want the change in size to be animated or <c>false</c> if you want the change to appear immediately.</p>
                <b>Discussion</b>
                <p>When changing the size of the popover’s content, the width value you specify must be at least 320 points and no more than 600 points. There are no restrictions on the height value. However, both the width and height values you specify may be adjusted to ensure the popup fits on screen and is not covered by the keyboard.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="size">
            </param>
            <param name="animated">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate">
            <summary>
            The <c>UIPopoverControllerDelegate</c> protocol defines the methods you can implement for the delegate of a <c>UIPopoverController</c> object. Popover controllers notify their delegate whenever user interactions would cause the dismissal of the popover and, in some cases, give the user a chance to prevent that dismissal.
            </summary>
            <remarks>
                <p>For more information about the <c>UIPopoverController</c> class, see <em>UIPopoverController Class Reference</em>. </p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._popoverControllerDidDismissPopover__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_popoverControllerDidDismissPopover__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._popoverControllerShouldDismissPopover__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_popoverControllerShouldDismissPopover__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.UP_UIPopoverControllerDelegate_set__popoverControllerDidDismissPopover__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.UP_UIPopoverControllerDelegate_set__popoverControllerShouldDismissPopover__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.DidDismiss(U3DXT.iOS.Native.UIKit.UIPopoverController)">
            <summary>
            (<b>required</b>) Tells the delegate that the popover was dismissed.
            <br></br>Equivalent to the native <c>popoverControllerDidDismissPopover:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>popoverController</em>
                <p>The popover controller that was dismissed.</p>
                <b>Discussion</b>
                <p>The popover controller does not call this method in response to programmatic calls to the <c>dismissPopoverAnimated:</c> method. If you dismiss the popover programmatically, you should perform any cleanup actions immediately after calling the <c>dismissPopoverAnimated:</c> method. </p>
                <p>You can use this method to incorporate any changes from the popover’s content view controller back into your application. If you do not plan to use the object in the <em>popoverController</em> parameter again, it is safe to release it from this method. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="popoverController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIPopoverControllerDelegate.ShouldDismiss(U3DXT.iOS.Native.UIKit.UIPopoverController)">
            <summary>
            (optional) Asks the delegate if the popover should be dismissed.
            <br></br>Equivalent to the native <c>popoverControllerShouldDismissPopover:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>popoverController</em>
                <p>The popover controller to be dismissed.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the popover should be dismissed or <c>false</c> if it should remain visible.</p>
                <b>Discussion</b>
                <p>This method is called in response to user-initiated attempts to dismiss the popover. It is not called when you dismiss the popover using the <c>dismissPopoverAnimated:</c> method of the popover controller. </p>
                <p>If you do not implement this method in your delegate, the default return value is assumed to be <c>true</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.2 and later.</li>
                </ul>
            </remarks>
            <param name="popoverController">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIResponder">
            <summary>
            The <c>UIResponder</c> class defines an interface for objects that respond to and handle events. It is the superclass of <c>UIApplication</c>, <c>UIView</c> and its subclasses (which include <c>UIWindow</c>). Instances of these classes are sometimes referred to as responder objects or, simply, responders.
            </summary>
            <remarks>
                <p>There are two general kinds of events: touch events and motion events. The primary event-handling methods for touches are <c>touchesBegan:withEvent:</c>, <c>touchesMoved:withEvent:</c>, <c>touchesEnded:withEvent:</c>, and <c>touchesCancelled:withEvent:</c>. The parameters of these methods associate touches with their events-especially touches that are new or have changed-and thus allow responder objects to track and handle the touches as the delivered events progress through the phases of a multi-touch sequence. Any time a finger touches the screen, is dragged on the screen, or lifts from the screen, a <c>UIEvent</c> object is generated. The event object contains <c>UITouch</c> objects for all fingers on the screen or just lifted from it. </p>
                <p>iOS 3.0 introduced system capabilities for generating motion events, specifically the motion of shaking the device. The event-handling methods for these kinds of events are <c>motionBegan:withEvent:</c>, <c>motionEnded:withEvent:</c>, and <c>motionCancelled:withEvent:</c>. Additionally for iOS 3.0, the <c>canPerformAction:withSender:</c> method allows responders to validate commands in the user interface while the <c>undoManager</c> property returns the nearest <c>NSUndoManager</c> object in the responder chain.</p>
                <p>In iOS 4.0, <c>UIResponder</c> added the <c>remoteControlReceivedWithEvent:</c> method for handling remote-control events.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIResponder" /> class.
            <br></br>Equivalent to the native <c>[[UIResponder alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIResponder.ClassExists">
            <summary>
            Returns whether the native UIResponder class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIResponder.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIView">
            <summary>
            The <c>UIView</c> class defines a rectangular area on the screen and the interfaces for managing the content in that area. At runtime, a view object handles the rendering of any content in its area and also handles any interactions with that content. The <c>UIView</c> class itself provides basic behavior for filling its rectangular area with a background color. More sophisticated content can be presented by subclassing <c>UIView</c> and implementing the necessary drawing and event-handling code yourself. The UIKit framework also includes a set of standard subclasses that range from simple buttons to complex tables and can be used as-is. For example, a <c>UILabel</c> object draws a text string and a <c>UIImageView</c> object draws an image.
            </summary>
            <remarks>
                <p>Because view objects are the main way your application interacts with the user, they have a number of responsibilities. Here are just a few: </p>
                <ul class="ul">
                    <li class="li">
                        <p>Drawing and animation</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>Views draw content in their rectangular area using technologies such as UIKit, Core Graphics, and OpenGL ES.</p>
                            </li>
                            <li class="nested li">
                                <p>Some view  properties  can be animated to new values. </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Layout and subview management</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>A view may contain zero or more subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>Each view defines its own default resizing behavior in relation to its parent view.</p>
                            </li>
                            <li class="nested li">
                                <p>A view can define the size and position of its subviews as needed.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Event handling</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>A view is a responder and can handle touch events and other events defined by the <c>UIResponder</c> class. </p>
                            </li>
                            <li class="nested li">
                                <p>Views can use the <c>addGestureRecognizer:</c> method to install gesture recognizers to handle common gestures. </p>
                            </li>
                        </ul>
                    </li>
                </ul>
                <p>Views can embed other views and create sophisticated visual hierarchies. This creates a parent-child relationship between the view being embedded (known as the <strong>subview</strong>) and the parent view doing the embedding (known as the <strong>superview</strong>). Normally, a subview’s visible area is not clipped to the bounds of its superview, but in iOS you can use the <c>clipsToBounds</c> property to alter that behavior. A parent view may contain any number of subviews but each subview has only one superview, which is responsible for positioning its subviews appropriately.</p>
                <p>The geometry of a view is defined by its <c>frame</c>, <c>bounds</c>, and <c>center</c> properties. The <c>frame</c> defines the origin and dimensions of the view in the coordinate system of its superview and is commonly used during layout to adjust the size or position of the view. The <c>center</c> property can be used to adjust the position of the view without changing its size. The  bounds  defines the internal dimensions of the view as it sees them and is used almost exclusively in custom drawing code. The size portion of the <c>frame</c> and  bounds  rectangles are coupled together so that changing the size of either rectangle updates the size of both. </p>
                <p>For detailed information about how to use the <c>UIView</c> class, see <em>View Programming Guide for iOS</em>.</p>
                <p>
                    <strong>Note:</strong> In iOS 2.x, the maximum size of a <c>UIView</c> object is 1024 x 1024 points. In iOS 3.0 and later, views are no longer restricted to this maximum size but are still limited by the amount of memory they consume. It is in your best interests to keep view sizes as small as possible. Regardless of which version of iOS is running, you should consider tiling any content that is significantly larger than the dimensions the screen.</p>
                <p>
                </p>
                <b>Creating a View</b>
                <p>To create a view programmatically, you can use code like the following:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>CGRect  viewRect = CGRectMake(10, 10, 100, 100);  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>UIView* myView = [[UIView alloc] initWithFrame:viewRect];  </pre>
                        </td>
                    </tr>
                </table>
                <p>This code creates the view and positions it at the point (10, 10) in its superview’s coordinate system (once it is added to that superview). To add a subview to another view, you use the <c>addSubview:</c> method. In iOS, sibling views may overlap each other without any issues, allowing complex view placement. The <c>addSubview:</c> method places the specified view on top of other siblings. You can specify the relative z-order of a subview by adding it using the <c>insertSubview:aboveSubview:</c> and <c>insertSubview:belowSubview:</c> methods. You can also exchange the position of already added subviews using the <c>exchangeSubviewAtIndex:withSubviewAtIndex:</c> method. </p>
                <p>When creating a view, it is important to assign an appropriate value to the <c>autoresizingMask</c> property to ensure the view resizes correctly. View resizing primarily occurs when the orientation of your application’s interface changes but it may happen at other times as well. For example, calling the <c>setNeedsLayout</c> method forces your view to update its layout. </p>
                <b>The View Drawing Cycle</b>
                <p>View drawing occurs on an as-needed basis. When a view is first shown, or when all or part of it becomes visible due to layout changes, the system asks the view to draw its contents. For views that contain custom content using UIKit or Core Graphics, the system calls the view’s <c>drawRect:</c> method. Your implementation of this method is responsible for drawing the view’s content into the current graphics context, which is set up by the system automatically prior to calling this method. This creates a static visual representation of your view’s content that can then be displayed on the screen. </p>
                <p>When the actual content of your view changes, it is your responsibility to notify the system that your view needs to be redrawn. You do this by calling your view’s <c>setNeedsDisplay</c> or <c>setNeedsDisplayInRect:</c> method of the view. These methods let the system know that it should update the view during the next drawing cycle. Because it waits until the next drawing cycle to update the view, you can call these methods on multiple views to update them at the same time.</p>
                <p>
                    <strong>Note:</strong> If you are using OpenGL ES to do your drawing, your view’s <c>drawRect:</c> method is not called. Instead, it is up to you to determine when your view needs to be redrawn and issue the appropriate drawing updates. For more information about how to draw using OpenGL ES, see <em>OpenGL ES Programming Guide for iOS</em>.</p>
                <p>
                </p>
                <p>For detailed information about the view drawing cycle and the role your views have in this cycle, see <em>View Programming Guide for iOS</em>.</p>
                <b>Animations</b>
                <p>Changes to several view properties can be animated—that is, changing the property creates an animation that conveys the change to the user over a short period of time. The <c>UIView</c> class does most of the work of performing the actual animations but you must still indicate which property changes you want to be animated. There are two different ways to initiate animations: </p>
                <ul class="ul">
                    <li class="li">
                        <p>In iOS 4 and later, use the block-based animation methods. (Recommended)</p>
                    </li>
                    <li class="li">
                        <p>Use the begin/commit animation methods.</p>
                    </li>
                </ul>
                <p>The block-based animation methods (such as <c>animateWithDuration:animations:</c>) greatly simplify the creation of animations. With one method call, you specify the animations to be performed and the options for the animation. However, block-based animations are available only in iOS 4 and later. If your application runs on earlier versions of iOS, you must use the <c>beginAnimations:context:</c> and <c>commitAnimations</c> class methods to mark the beginning and ending of your animations. </p>
                <p>The following properties of the <c>UIView</c> class are animatable:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>frame</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>bounds</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>center</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>transform</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>alpha</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>backgroundColor</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>contentStretch</c>
                        </p>
                    </li>
                </ul>
                <p>For more information about how to configure animations, see <em>View Programming Guide for iOS</em>. </p>
                <b>Threading Considerations</b>
                <p>Manipulations to your application’s user interface must occur on the main thread. Thus, you should always call the methods of the <c>UIView</c> class from code running in the main thread of your application. The only time this may not be strictly necessary is when creating the view object itself but all other manipulations should occur on the main thread. </p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	The <c>UIView</c> class is a key subclassing point for visual content that also requires user interactions. Although there are many good reasons to subclass <c>UIView</c>, it is recommended that you do so only when the basic <c>UIView</c> class or the standard system views do not provide the capabilities that you need. Subclassing requires more work on your part to implement the view and to tune its performance.</p>
                <p class="spaceabove">	For information about ways to avoid subclassing, see  “Alternatives to Subclassing.”  </p>
                <b>Methods to Override</b>
                <p class="spaceabove">When subclassing <c>UIView</c>, there are only a handful of methods you should override and many methods that you might override depending on your needs. Because <c>UIView</c> is a highly configurable class, there are also many ways to implement sophisticated view behaviors without overriding custom methods, which are discussed in the Alternatives to Subclassing section. In the meantime, the following list includes the methods you might consider overriding in your <c>UIView</c> subclasses:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Initialization:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>initWithFrame:</c> - It is recommended that you implement this method. You can also implement custom initialization methods in addition to, or instead of, this method.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>initWithCoder:</c> - Implement this method if you load your view from an Interface Builder nib file and your view requires custom initialization.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>layerClass</c> - Implement this method only if you want your view to use a different Core Animation layer for its backing store. For example, if you are using OpenGL ES to do your drawing, you would want to override this method and return the <c>CAEAGLLayer</c> class.  </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Drawing and printing:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>drawRect:</c> - Implement this method if your view draws custom content. If your view does not do any custom drawing, avoid overriding this method. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>drawRect:forViewPrintFormatter:</c> - Implement this method only if you want to draw your view’s content differently during printing. </p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Constraints:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>requiresConstraintBasedLayout</c> - Implement this class method if your view class requires constraints to work properly.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>updateConstraints</c> - Implement this method if your view needs to create custom constraints between your subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>alignmentRectForFrame:</c>, <c>frameForAlignmentRect:</c> - Implement these methods to override how your views are aligned to other views.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Layout:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>sizeThatFits:</c> - Implement this method if you want your view to have a different default size than it normally would during resizing operations. For example, you might use this method to prevent your view from shrinking to the point where subviews cannot be displayed correctly. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>layoutSubviews</c> - Implement this method if you need more precise control over the layout of your subviews than either the constraint or autoresizing behaviors provide. </p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>didAddSubview:</c>, <c>willRemoveSubview:</c> - Implement these methods as needed to track the additions and removals of subviews.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>willMoveToSuperview:</c>, <c>didMoveToSuperview</c> - Implement these methods as needed to track the movement of the current view in your view hierarchy.</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>willMoveToWindow:</c>, <c>didMoveToWindow</c> - Implement these methods as needed to track the movement of your view to a different window.</p>
                            </li>
                        </ul>
                    </li>
                    <li class="li">
                        <p>Event Handling:</p>
                        <ul class="nested">
                            <li class="nested li">
                                <p>
                                    <c>touchesBegan:withEvent:</c>, <c>touchesMoved:withEvent:</c>, <c>touchesEnded:withEvent:</c>, <c>touchesCancelled:withEvent:</c> - Implement these methods if you need to handle touch events directly. (For gesture-based input, use gesture recognizers.)</p>
                            </li>
                            <li class="nested li">
                                <p>
                                    <c>gestureRecognizerShouldBegin:</c> - Implement this method if your view handles touch events directly and might want to prevent attached gesture recognizers from triggering additional actions.</p>
                            </li>
                        </ul>
                    </li>
                </ul>
                <b>Alternatives to Subclassing</b>
                <p>Many view behaviors can be configured without the need for subclassing. Before you start overriding methods, consider whether modifying the following properties or behaviors would provide the behavior you need.</p>
                <ul class="ul">
                    <li class="li">
                        <p>
                            <c>addConstraint:</c> - Define automatic layout behavior for the view and its subviews.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>autoresizingMask</c> - Provides automatic layout behavior when the superview’s frame changes. These behaviors can be combined with constraints.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>contentMode</c> - Provides layout behavior for the view’s content, as opposed to the <c>frame</c> of the view. This property also affects how the content is scaled to fit the view and whether it is cached or redrawn. </p>
                    </li>
                    <li class="li">
                        <p>
                            <c>contentStretch</c> - Defines portions of the view as being stretchable. This behavior is typically used to implement buttons and other resizable views with sophisticated layout needs where redrawing the view every time would affect performance.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>hidden</c> or <c>alpha</c> - Change the transparency of the view as a whole rather than hiding or applying alpha to your view’s rendered content.</p>
                    </li>
                    <li class="li">
                        <p>
                            <c>backgroundColor</c> - Set the view’s color rather than drawing that color yourself.</p>
                    </li>
                    <li class="li">
                        <p>Subviews - Rather than draw your content using a <c>drawRect:</c> method, embed image and label subviews with the content you want to present. </p>
                    </li>
                    <li class="li">
                        <p>Gesture recognizers - Rather than subclass to intercept and handle touch events yourself, you can use gesture recognizers to send an  action message  to a target object. </p>
                    </li>
                    <li class="li">
                        <p>Animations - Use the built-in animation support rather than trying to animate changes yourself. The animation support provided by Core Animation is fast and easy to use. </p>
                    </li>
                    <li class="li">
                        <p>Image-based backgrounds - For views that display relatively static content, consider using a <c>UIImageView</c> object with gesture recognizers instead of subclassing and drawing the image yourself. Alternatively, you can also use a generic <c>UIView</c> object and assign your image as the content of the view’s <c>CALayer</c> object. </p>
                    </li>
                </ul>
                <p>Animations are another way to make visible changes to a view without requiring you to subclass and implement complex drawing code. Many properties of the <c>UIView</c> class are animatable, which means changes to those properties can trigger system-generated animations. Starting animations requires as little as one line of code to indicate that any changes that follow should be animated. For more information about animation support for views, see  “Animations.”   </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIView" /> class.
            <br></br>Equivalent to the native <c>[[UIView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIView and initializes the object. Initializes and returns a newly allocated view object with the specified frame rectangle.
            <br></br>Equivalent to the native <c>[[UIView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aRect</em>
                <p>The frame rectangle for the view, measured in points. The origin of the frame is relative to the superview in which you plan to add it. This method uses the frame rectangle to set the <c>center</c> and <c>bounds</c> properties accordingly.</p>
                <b>Return Value</b>
                <p>An initialized view object or <c>null</c> if the object couldn't be created.</p>
                <b>Discussion</b>
                <p>The new view object must be inserted into the view hierarchy of a window before it can be used. If you create a view object programmatically, this method is the designated initializer for the <c>UIView</c> class. Subclasses can override this method to perform any custom initialization but must call <c>super</c> at the beginning of their implementation.</p>
                <p>If you use Interface Builder to design your interface, this method is not called when your view objects are subsequently loaded from the nib file. Objects in a nib file are reconstituted and then initialized using their <c>initWithCoder:</c> method, which modifies the attributes of the view to match the attributes stored in the nib file. For detailed information about how views are loaded from a nib file, see <em>Resource Programming Guide</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="frame">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.ClassExists">
            <summary>
            Returns whether the native UIView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Alpha">
            <summary>
            The receiver’s alpha value.
            <br></br>Equivalent to the native <c>alpha</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The value of this property is a floating-point number in the range <c>0.0</c> to <c>1.0</c>, where <c>0.0</c> represents totally transparent and <c>1.0</c> represents totally opaque. This value affects only the current view and does not affect any of its embedded subviews.</p>
                <p>Changes to this property can be animated.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>backgroundColor</c>
                    </li>
                    <li>
                        <c>opaque</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.AutoresizingMask">
            <summary>
            An integer bit mask that determines how the receiver resizes itself when its superview’s bounds change.
            <br></br>Equivalent to the native <c>autoresizingMask</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When a view’s bounds change, that view automatically resizes its subviews according to each subview’s autoresizing mask. You specify the value of this mask by combining the constants described in <c>UIViewAutoresizing</c> using the C bitwise OR operator. Combining these constants lets you specify which dimensions of the view should grow or shrink relative to the superview. The default value of this property is <c>UIViewAutoresizingNone</c>, which indicates that the view should not be resized at all. </p>
                <p>When more than one option along the same axis is set, the default behavior is to distribute the size difference proportionally among the flexible portions. The larger the flexible portion, relative to the other flexible portions, the more it is likely to grow. For example, suppose this property includes the <c>UIViewAutoresizingFlexibleWidth</c> and <c>UIViewAutoresizingFlexibleRightMargin</c> constants but does not include the <c>UIViewAutoresizingFlexibleLeftMargin</c> constant, thus indicating that the width of the view’s left margin is fixed but that the view’s width and right margin may change. Thus, the view appears anchored to the left side of its superview while both the view width and the gap to the right of the view increase.</p>
                <p>If the autoresizing behaviors do not offer the precise layout that you need for your views, you can use a custom container view and override its <c>layoutSubviews</c> method to position your subviews more precisely.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>autoresizesSubviews</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.BackgroundColor">
            <summary>
            The receiver’s background color.
            <br></br>Equivalent to the native <c>backgroundColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Changes to this property can be animated. The default value is <c>null</c>, which results in a transparent background color.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>alpha</c>
                    </li>
                    <li>
                        <c>opaque</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Bounds">
            <summary>
            The bounds rectangle, which describes the view’s location and size in its own coordinate system.
            <br></br>Equivalent to the native <c>bounds</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>On the screen, the bounds rectangle represents the same visible portion of the view as its frame rectangle. By default, the origin of the bounds rectangle is set to (0, 0) but you can change this value to display different portions of the view. The size of the bounds rectangle is coupled to the size of the frame rectangle, so that changes to one affect the other. Changing the bounds size grows or shrinks the view relative to its center point. The coordinates of the bounds rectangle are always specified in points.</p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. </p>
                <p>The default bounds origin is <c>(0,0)</c> and the size is the same as the frame rectangle’s size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>frame</c>
                    </li>
                    <li>
                        <c>center</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Center">
            <summary>
            The center of the frame.
            <br></br>Equivalent to the native <c>center</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The center is specified within the coordinate system of its superview and is measured in points. Setting this property changes the values of the <c>frame</c> properties accordingly.</p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. Use the <c>beginAnimations:context:</c> class method to begin and the <c>commitAnimations</c> class method to end an animation block.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>frame</c>
                    </li>
                    <li>
                        <c>bounds</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Frame">
            <summary>
            The frame rectangle, which describes the view’s location and size in its superview’s coordinate system.
            <br></br>Equivalent to the native <c>frame</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This rectangle defines the size and position of the view in its superview’s coordinate system. You use this rectangle during layout operations to size and position the view. Setting this property changes the point specified by the <c>center</c> property and the size in the <c>bounds</c> rectangle accordingly. The coordinates of the frame rectangle are always specified in points.</p>
                <p>
                    <strong>Warning:</strong> If the <c>transform</c> property is not the identity transform, the value of this property is undefined and therefore should be ignored.</p>
                <p>
                </p>
                <p>Changing the frame rectangle automatically redisplays the receiver without invoking the <c>drawRect:</c> method. If you want the <c>drawRect:</c> method invoked when the frame rectangle changes, set the <c>contentMode</c> property to <c>UIViewContentModeRedraw</c>. </p>
                <p>Changes to this property can be animated. However, if the <c>transform</c> property contains a non-identity transform, the value of the <c>frame</c> property is undefined and should not be modified. In that case, you can reposition the view using the <c>center</c> property and adjust the size using the <c>bounds</c> property instead.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>bounds</c>
                    </li>
                    <li>
                        <c>center</c>
                    </li>
                    <li>
                        <c>transform</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Hidden">
            <summary>
            A Boolean value that determines whether the receiver is hidden.
            <br></br>Equivalent to the native <c>hidden</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Setting the value of this property to <c>true</c> hides the receiver and setting it to <c>false</c> shows the receiver. The default value is <c>false</c>.</p>
                <p>A hidden view disappears from its window and does not receive input events. It remains in its superview’s list of subviews, however, and participates in autoresizing as usual. Hiding a view with subviews has the effect of hiding those subviews and any view descendants they might have. This effect is implicit and does not alter the hidden state of the receiver’s descendants.</p>
                <p>Hiding the view that is the window’s current first responder causes the view’s next valid key view to become the new first responder. </p>
                <p>The value of this property reflects the state of the receiver only and does not account for the state of the receiver’s ancestors in the view hierarchy. Thus this property can be <c>false</c> but the receiver may still be hidden if an ancestor is hidden.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Opaque">
            <summary>
            A Boolean value that determines whether the receiver is opaque.
            <br></br>Equivalent to the native <c>opaque</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property provides a hint to the drawing system as to how it should treat the view. If set to <c>true</c>, the drawing system treats the view as fully opaque, which allows the drawing system to optimize some drawing operations and improve performance. If set to <c>false</c>, the drawing system composites the view normally with other content. The default value of this property is <c>true</c>.</p>
                <p>An opaque view is expected to fill its bounds with entirely opaque content—that is, the content should have an alpha value of <c>1.0</c>. If the view is opaque and either does not fill its bounds or contains wholly or partially transparent content, the results are unpredictable. You should always set the value of this property to <c>false</c> if the view is fully or partially transparent.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>backgroundColor</c>
                    </li>
                    <li>
                        <c>alpha</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Subviews">
            <summary>
            The receiver’s immediate subviews. (read-only)
            <br></br>Equivalent to the native <c>subviews</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use this property to retrieve the subviews associated with your custom view hierarchies. The order of the subviews in the array reflects their visible order on the screen, with the view at index 0 being the back-most view. </p>
                <p>For complex views declared in UIKit and other system frameworks, any subviews of the view are generally considered private and subject to change at any time. Therefore, you should not attempt to retrieve or modify subviews for these types of system-supplied views. If you do, your code may break during a future system update.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>superview</c>
                    </li>
                    <li>
                        <c>– removeFromSuperview</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Superview">
            <summary>
            The receiver’s superview, or <c><!--a  -->nil<!--/a--></c> if it has none. (read-only)
            <br></br>Equivalent to the native <c>superview</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>subviews</c>
                    </li>
                    <li>
                        <c>– removeFromSuperview</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIView.Window">
            <summary>
            The receiver’s window object, or <c><!--a  -->nil<!--/a--></c> if it has none. (read-only)
            <br></br>Equivalent to the native <c>window</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is <c>null</c> if the view has not yet been added to a window. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_alpha(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_alpha(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_autoresizingMask(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_autoresizingMask(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_backgroundColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_backgroundColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_bounds(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_bounds(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_center(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_center(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_frame(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_frame(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_hidden(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_hidden(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_opaque(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_set_opaque(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_subviews(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_superview(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_get_window(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_addSubview_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_alloc_initWithFrame_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.UP_UIView_removeFromSuperview(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.AddSubview(U3DXT.iOS.Native.UIKit.UIView)">
            <summary>
            Adds a view to the end of the receiver’s list of subviews.
            <br></br>Equivalent to the native <c>addSubview:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>view</em>
                <p>The view to be added. This view is retained by the receiver. After being added, this view appears on top of any other subviews. </p>
                <b>Discussion</b>
                <p>This method retains <em>view</em> and sets its next responder to the receiver, which is its new superview. </p>
                <p>Views can have only one superview. If <em>view</em> already has a superview and that view is not the receiver, this method removes the previous superview before making the receiver its new superview. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– insertSubview:atIndex:</c>
                    </li>
                    <li>
                        <c>– insertSubview:aboveSubview:</c>
                    </li>
                    <li>
                        <c>– insertSubview:belowSubview:</c>
                    </li>
                    <li>
                        <c>– exchangeSubviewAtIndex:withSubviewAtIndex:</c>
                    </li>
                </ul>
            </remarks>
            <param name="view">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIView.RemoveFromSuperview">
            <summary>
            Unlinks the receiver from its superview and its window, and removes it from the responder chain.
            <br></br>Equivalent to the native <c>removeFromSuperview</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the receiver’s superview is not <c>null</c>, the superview releases the receiver. If you plan to reuse a view, be sure to retain it before calling this method and release it again later as appropriate.</p>
                <p>Never call this method from inside your view’s <c>drawRect:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>superview</c>
                    </li>
                    <li>
                        <c>subviews</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIViewAutoresizing">
            <summary>
            Specifies how a view is automatically resized.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleHeight">
            <summary>
                <p>The view resizes by expanding or shrinking its height.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleHeight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleRightMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the right margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleRightMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleBottomMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the bottom margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleBottomMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleLeftMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the left margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleLeftMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleTopMargin">
            <summary>
                <p>The view resizes by expanding or shrinking in the direction of the top margin.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleTopMargin</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.None">
            <summary>
                <p>The view does not resize.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingNone</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIViewAutoresizing.FlexibleWidth">
            <summary>
                <p>The view resizes by expanding or shrinking its width.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIViewAutoresizingFlexibleWidth</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIViewController">
            <summary>
            The <c>UIViewController</c> class provides the fundamental view-management model for all iOS apps. You rarely instantiate <c>UIViewController</c> objects directly. Instead, you instantiate subclasses of the <c>UIViewController</c> class based on the specific task each subclass performs. A view controller manages a set of views that make up a portion of your app’s user interface. As part of the controller layer of your app, a view controller coordinates its efforts with model objects and other controller objects—including other view controllers—so your app presents a single coherent user interface.
            </summary>
            <remarks>
                <p>Where necessary, a view controller:</p>
                <ul class="ul">
                    <li class="li">
                        <p>resizes and lays out its views</p>
                    </li>
                    <li class="li">
                        <p>adjusts the contents of the views</p>
                    </li>
                    <li class="li">
                        <p>acts on behalf of the views when the user interacts with them</p>
                    </li>
                </ul>
                <p>View controllers are tightly bound to the views they manage and take part in the responder chain used to handle events. View controllers are descendants of the <c>UIResponder</c> class and are inserted into the responder chain between the managed root view and its superview, which typically belongs to a different view controller. If the view controller’s view does not handle an event, the view controller has the option of handling the event or it can pass the event to the superview.</p>
                <p>View controllers are rarely used in isolation. Instead, you use multiple view controllers, each of which owns a portion of your app’s user interface. For example, one view controller might manage a table of items while a different view controller manages the display of a selected item from that table. Each view controller displays its own views to show the content it is responsible for.</p>
                <b>Subclassing Notes</b>
                <p class="spaceabove">	An contains at least one custom subclass of <c>UIViewController</c> and more often there are several. These custom subclasses define behaviors specific to your app, such as how it handles user interactions with its views. The following sections provide a brief overview of some of the tasks your custom subclass performs. For more information about implementing your custom subclasses, see <em>View Controller Programming Guide for iOS</em>.</p>
                <b>View Management</b>
                <p>When you define a new subclass of <c>UIViewController</c>, you must specify the views to be managed by the controller. A typical view hierarchy consists of a view with flexible bounds—a reference to which is available in the <c>view</c> property of this class—and one or more subviews that provide the actual content. The size and position of the root view is usually determined by another object that owns the view controller and displays its contents. The view controller determines the positions of any subviews it owns based on the size given to its root view by the owning object. A view controller is usually owned by a window or another view controller. If a view controller is owned by a window object, it acts as the window’s root view controller. The view controller’s root view is added as a subview of the window and resized to fill the window. If the view controller is owned by another view controller, then the parent view controller determines when and how the child view controller’s contents are displayed.</p>
                <p>The <c>UIViewController</c> class provides built-in support for loading a view controller’s views whenever they are needed. Specifically, views are automatically loaded when the <c>view</c> property is accessed. There are a few ways you can implement your app to load these views:</p>
                <ul class="ul">
                    <li class="li">
                        <p>You can specify the views for a view controller using a  storyboard  created in Interface Builder. A storyboard contains preconfigured view controllers and their associated views and is the preferred way to develop your app’s user interface. A key advantage of storyboards is that they can express relationships between different view controllers in your app. For example, you can state that one view controller’s contents are contained inside another view controller or that a view controller is displayed as a transition (known as a segue) from another view controller . By allowing you to see the relationships between view controllers, storyboards make it easier to understand your app’s behavior at a glance.</p>
                        <p>At runtime, the view controller uses the storyboard to automatically instantiate and configure its views. Often, the view controller itself is automatically created by segues defined in the storyboard. When you define a view controller’s contents using a storyboard, you never directly allocate and initialize the view controller object. Instead, when you need to programmatically instantiate the view controller, you do so by calling the <c>instantiateViewControllerWithIdentifier:</c> method on a <c>UIStoryboard</c> object.</p>
                    </li>
                    <li class="li">
                        <p>You can specify the views for a view controller using a nib file, also created in Interface Builder. Like a storyboard, a nib file allows you to create and configure a set of views. However, you cannot easily create or see the relationships between view controllers using nib files as you can when using storyboards.</p>
                        <p>To initialize your view controller object using a nib, you use the <c>initWithNibName:bundle:</c> method to specify the nib file used by the view controller. Then, when the view controller needs to load its views, it automatically creates and configures the views using the information stored in the nib file.</p>
                    </li>
                    <li class="li">
                        <p>If you cannot define your views in a storyboard or a nib file, override the <c>loadView</c> method to manually instantiate a view hierarchy and assign it to the <c>view</c> property.</p>
                    </li>
                </ul>
                <p>All of these techniques have the same end result, which is to create the appropriate set of views and expose them through the <c>view</c> property.</p>
                <p>
                    <strong>Important:</strong> A view controller is the sole owner of its view and any subviews it creates. It is responsible for creating those views and for relinquishing ownership of them at the appropriate times such as when the view controller itself is released. If you use a storyboard or a nib file to store your view objects, each view controller object automatically gets its own copy of these views when the view controller asks for them. However, if you create your views manually, you should never use the same view objects with multiple view controllers.</p>
                <p>
                </p>
                <p>When creating the views for your view hierarchy, you should always set the autoresizing properties of your views. When a view controller is displayed on screen, its root view is typically resized to fit the available space, which can vary depending on the window’s current orientation and the presence of other interface elements such as the status bar. You can configure the autoresizing properties in Interface Builder using the inspector window or programmatically by modifying the <c>autoresizesSubviews</c> and <c>autoresizingMask</c> properties of each view. Setting these properties is also important if your view controller supports both portrait and landscape orientations. During an orientation change, the system uses these properties to reposition and resize the views automatically to match the new orientation. If your view controller supports autolayout and is a child of another view controller, you should call the view’s <c>setTranslatesAutoresizingMaskIntoConstraints:</c> method to disable these constraints.</p>
                <b>Memory Management</b>
                <p>Memory is a critical resource in iOS, and view controllers provide built-in support for reducing their memory footprint at critical times. The <c>UIViewController</c> class provides some automatic handling of low-memory conditions through its <c>didReceiveMemoryWarning</c> method, which releases unneeded memory.</p>
                <p>Prior to iOS 6, when a low-memory warning occurred, the <c>UIViewController</c> class purged its views if it knew it could reload or recreate them again later. If this happens, it also calls the <c>viewWillUnload</c> and <c>viewDidUnload</c> methods to give your code a chance to relinquish ownership of any objects that are associated with your view hierarchy, including objects loaded from the nib file, objects created in your <c>viewDidLoad</c> method, and objects created lazily at runtime and added to the view hierarchy. On iOS 6, views are never purged and these methods are never called. If your view controller needs to perform specific tasks when memory is low, it should override the <c>didReceiveMemoryWarning</c> method.</p>
                <b>Handling View Rotations</b>
                <p>In iOS 6, your app supports the interface orientations defined in your app’s <c>Info.plist</c> file. A view controller can override the <c>supportedInterfaceOrientations</c> method to limit the list of supported orientations. Generally, the system calls this method only on the root view controller of the window or a view controller presented to fill the entire screen; child view controllers use the portion of the window provided for them by their parent view controller and no longer participate in directly in decisions about what rotations are supported. The intersection of the app’s orientation mask and the view controller’s orientation mask is used to determine which orientations a view controller can be rotated into.</p>
                <p>You can override the <c>preferredInterfaceOrientationForPresentation</c> for a view controller that is intended to be presented full screen in a specific orientation.</p>
                <p>In iOS 5 and earlier, the <c>UIViewController</c> class displays views in portrait mode only. To support additional orientations, you must override the <c>shouldAutorotateToInterfaceOrientation:</c> method and return <c>true</c> for any orientations your subclass supports. If the autoresizing properties of your views are configured correctly, that may be all you have to do. However, the <c>UIViewController</c> class provides additional hooks for you to implement additional behaviors as needed. Generally, if your view controller is intended to be used as a child view controller, it should support all interface orientations.</p>
                <p>When a rotation occurs for a visible view controller, the <c>willRotateToInterfaceOrientation:duration:</c>, <c>willAnimateRotationToInterfaceOrientation:duration:</c>, and <c>didRotateFromInterfaceOrientation:</c> methods are called during the rotation. The <c>viewWillLayoutSubviews</c> method is also called after the view is resized and positioned by its parent. If a view controller is not visible when an orientation change occurs, then the rotation methods are never called. However, the <c>viewWillLayoutSubviews</c> method is called when the view becomes visible. Your implementation of this method can call the <c>statusBarOrientation</c> method to determine the device orientation.</p>
                <p>
                    <strong>Note:</strong> At launch time, apps should always set up their interface in a portrait orientation. After the <c>application:didFinishLaunchingWithOptions:</c> method returns, the app uses the view controller rotation mechanism described above to rotate the views to the appropriate orientation prior to showing the window.</p>
                <p>
                </p>
                <b>View Event Notification</b>
                <p>The <c>UIViewController</c> class automatically responds to many notifications, such as when the view controller’s view is added to or removed from a window’s view hierarchy or when it is resized. The <c>UIViewController</c> class provides specific methods that are called when these events occur. Subclasses can override these methods to implement specific behaviors.</p>
                <b>Implementing a Container View Controller</b>
                <p>A custom <c>UIViewController</c> subclass can also act as a container view controller. A container view controller manages the presentation of content of other view controllers it owns, also known as its child view controllers. A child’s view can be presented as-is or in conjunction with views owned by the container view controller.</p>
                <p>Your container view controller subclass should declare a public interface to associate its children. The nature of these methods is up to you and depends on the semantics of the container you are creating. You need to decide how many children can be displayed by your view controller at once, when those children are displayed, and where they appear in your view controller’s view hierarchy. Your view controller class defines what relationships, if any, are shared by the children. By establishing a clean public interface for your container, you ensure that children use its capabilities logically, without accessing too many private details about how your container implements the behavior.</p>
                <p>Your container view controller must associate a child view controller with itself before adding the child’s root view to the view hierarchy. This allows iOS to properly route events to child view controllers and the views those controllers manage. Likewise, after it removes a child’s root view from its view hierarchy, it should disconnect that child view controller from itself. To make or break these associations, your container calls specific methods defined by the base class. These methods are not intended to be called by clients of your container class; they are to be used only by your container’s implementation to provide the expected containment behavior.</p>
                <p>Here are the essential methods you might need to call:</p>
                <ul class="simple">
                    <li>
                        <p>
                            <c>addChildViewController:</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>removeFromParentViewController</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>willMoveToParentViewController:</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            <c>didMoveToParentViewController:</c>
                        </p>
                    </li>
                </ul>
                <p>
                    <strong>Note:</strong> You are not required to override any methods when creating a container view controller.</p>
                <p>By default, rotation and appearance callbacks are automatically forwarded to children. You may optionally override the <c>shouldAutomaticallyForwardRotationMethods</c> and <c>shouldAutomaticallyForwardAppearanceMethods</c> methods to take control of this behavior yourself.</p>
                <p>
                </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIViewController" /> class.
            <br></br>Equivalent to the native <c>[[UIViewController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.ClassExists">
            <summary>
            Returns whether the native UIViewController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.ChildViewControllers">
            <summary>
            An array of the view controllers that are the children of the receiver in the view controller hierarchy. (read-only)
            <br></br>Equivalent to the native <c>childViewControllers</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property does not include any presented view controllers.</p>
                <p>This property is only intended to be read by an implementation of a custom container view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.NavigationController">
            <summary>
            The nearest ancestor in the view controller hierarchy that is a navigation controller. (read-only)
            <br></br>Equivalent to the native <c>navigationController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the receiver or one of its ancestors is a child of a navigation controller, this property contains the owning navigation controller. This property is <c>null</c> if the view controller is not embedded inside a navigation controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>splitViewController</c>
                    </li>
                    <li>
                        <c>tabBarController</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.ParentViewController">
            <summary>
            The parent view controller of the recipient. (read-only)
            <br></br>Equivalent to the native <c>parentViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the recipient is a child of a container view controller, this property holds the view controller it is contained in. If the recipient has no parent, the value in this property is <c>null</c>.</p>
                <p>Prior to iOS 5.0, if a view did not have a parent view controller and was being presented, the presenting view controller would be returned. On iOS 5, this behavior no longer occurs. Instead, use the <c>presentingViewController</c> property to access the presenting view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.PresentedViewController">
            <summary>
            The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy. (read-only)
            <br></br>Equivalent to the native <c>presentedViewController</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.PresentingViewController">
            <summary>
            The view controller that presented this view controller. (read-only)
            <br></br>Equivalent to the native <c>presentingViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the view controller that received this message is presented by another view controller, this property holds the view controller that is presenting it. If the view controller is not presented, but one of its ancestors is being presented, this property holds the view controller presenting the nearest ancestor. If neither the view controller nor any of its ancestors are being presented, this property holds <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.Title">
            <summary>
            A localized string that represents the view this controller manages.
            <br></br>Equivalent to the native <c>title</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses should set the title to a human-readable string that represents the view to the user.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIViewController.View">
            <summary>
            The view that the controller manages.
            <br></br>Equivalent to the native <c>view</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The view stored in this property represents the root view for the view controller’s view hierarchy. The default value of this property is <c>null</c>.</p>
                <p>If you access this property and its value is currently <c>null</c>, the view controller automatically calls the <c>loadView</c> method and returns the resulting view. </p>
                <p>Each view controller object is the sole owner of its view. You must not associate the same view object with multiple view controller objects. The only exception to this rule is that a container view controller implementation may add this view as a subview in its own view hierarchy. Before adding the subview, the container must first call its <c>addChildViewController:</c> method to create a parent-child relationship between the two view controller objects.</p>
                <p>Because accessing this property can cause the view to be loaded automatically, you can use the <c>isViewLoaded</c> method to determine if the view is currently in memory. Unlike this property, the <c>isViewLoaded</c> property does not force the loading of the view if it is not currently in memory.  </p>
                <p>The <c>UIViewController</c> class can automatically set this property to <c>null</c> during low-memory conditions and also when the view controller itself is finally released.</p>
                <p>For more information about how a view controller loads and unloads its view, see  “The View Controller Life Cycle” .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– loadView</c>
                    </li>
                    <li>
                        <c>– isViewLoaded</c>
                    </li>
                    <li>
                        <c>– viewDidLoad</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_childViewControllers(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_navigationController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_parentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_presentedViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_presentingViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_title(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_set_title(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_get_view(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_set_view(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_addChildViewController_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_dismissViewControllerAnimated_completion_(System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_isViewLoaded(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_presentViewController_animated_completion_(System.String,System.String,System.Boolean,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.UP_UIViewController_removeFromParentViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.AddChildViewController(U3DXT.iOS.Native.UIKit.UIViewController)">
            <summary>
            Adds the given view controller as a child.
            <br></br>Equivalent to the native <c>addChildViewController:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>childController</em>
                <p>The view controller to be added as a child.</p>
                <b>Discussion</b>
                <p>If the new child view controller is already the child of a container view controller, it is removed from that container before being added.</p>
                <p>This method is only intended to be called by an implementation of a custom container view controller. If you override this method, you must call <c>super</c> in your implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="childController">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.DismissViewController(System.Boolean,System.Action)">
            <summary>
            Dismisses the view controller that was presented by the receiver.
            <br></br>Equivalent to the native <c>dismissViewControllerAnimated:completion:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>flag</em>
                <p>Pass <c>true</c> to animate the transition.</p>
                <em>completion</em>
                <p>A block called after the view controller has been dismissed.</p>
                <b>Discussion</b>
                <p>The presenting view controller is responsible for dismissing the view controller it presented. If you call this method on the presented view controller itself, it automatically forwards the message to the presenting view controller.</p>
                <p>If you present several view controllers in succession, thus building a stack of presented view controllers, calling this method on a view controller lower in the stack dismisses its immediate child view controller and all view controllers above that child on the stack. When this happens, only the top-most view is dismissed in an animated fashion; any intermediate view controllers are simply removed from the stack. The top-most view is dismissed using its modal transition style, which may differ from the styles used by other view controllers lower in the stack.</p>
                <p>If you want to retain a reference to the receiver’s presented view controller, get the value in the <c>presentedViewController</c> property before calling this method.</p>
                <p>The completion handler is called after the <c>viewDidDisappear:</c> method is called on the presented view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="flag">
            </param>
            <param name="completion"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.IsViewLoaded">
            <summary>
            Returns a Boolean value indicating whether the view is currently loaded into memory.
            <br></br>Equivalent to the native <c>isViewLoaded</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A Boolean value indicating whether the view is currently loaded into memory.</p>
                <b>Discussion</b>
                <p>Calling this method reports whether the view is loaded. Unlike the <c>view</c> property, it does not attempt to load the view if it is not already in memory.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.PresentViewController(U3DXT.iOS.Native.UIKit.UIViewController,System.Boolean,System.Action)">
            <summary>
            Presents a view controller.
            <br></br>Equivalent to the native <c>presentViewController:animated:completion:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>viewControllerToPresent</em>
                <p>The view controller being presented.</p>
                <em>flag</em>
                <p>Pass <c>true</c> to animate the presentation; otherwise, pass <c>false</c>.</p>
                <em>completion</em>
                <p>A completion handler or <c>NULL</c>.</p>
                <b>Discussion</b>
                <p>On iPhone and iPod touch, the presented view is always full screen. On iPad, the presentation depends on the value in the <c>modalPresentationStyle</c> property.</p>
                <p>This method sets the <c>presentedViewController</c> property to the specified view controller, resizes that view controller’s view and then adds the view to the view hierarchy. The view is animated onscreen according to the transition style specified in the <c>modalTransitionStyle</c> property of the presented view controller.</p>
                <p>The completion handler is called after the <c>viewDidAppear:</c> method is called on the presented view controller.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
            <param name="viewControllerToPresent">
            </param>
            <param name="flag">
            </param>
            <param name="completion"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIViewController.RemoveFromParentViewController">
            <summary>
            Removes the receiver from its parent in the view controller hierarchy.
            <br></br>Equivalent to the native <c>removeFromParentViewController</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This method is only intended to be called by an implementation of a custom container view controller. If you override this method, you must call <c>super</c> in your implementation.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIWindow">
            <summary>
            The <c>UIWindow</c> class defines an object known as a <strong>window</strong> that manages and coordinates the views an app displays on a device screen. Unless an app can display content on an external device screen, an app has only one window.
            </summary>
            <remarks>
                <p>The two principal functions of a window are to provide an area for displaying its views and to distribute events to the views. To change the content your app displays, you can change the window’s root view; you don’t create a new window. A window belongs to a level—typically, <c>UIWindowLevelNormal</c>—that represents where it sits on the z-axis relative to other windows. For example, a system alert window appears above normal app windows. </p>
                <p>
                    <strong>Note:</strong> When you use storyboards and the Xcode app templates to create an app, a window is created for you. If you choose to create a window in Interface Builder, be sure to select the Full Screen at Launch option in the Attributes inspector so that the window is sized appropriately for the current device. Because a window doesn’t receive touch events outside of its bounds and views aren’t clipped to the window’s bounds by default, an improperly sized window might not be able to deliver touch events to all its views.</p>
                <p>
                </p>
                <p>For more information about how to use windows, see <em>Multiple Display Programming Guide for iOS</em>. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIWindow" /> class.
            <br></br>Equivalent to the native <c>[[UIWindow alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIWindow and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIWindow alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWindow.ClassExists">
            <summary>
            Returns whether the native UIWindow class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIWindow.RootViewController">
            <summary>
            The root view controller for the window.
            <br></br>Equivalent to the native <c>rootViewController</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The root view controller provides the content view of the window. Assigning a view controller to this property (either programmatically or using Interface Builder) installs the view controller’s view as the content view of the window. If the window has an existing view hierarchy, the old views are removed before the new ones are installed.</p>
                <p>The default value of this property is <c>null</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.UP_UIWindow_get_rootViewController(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.UP_UIWindow_set_rootViewController(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIWindow.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="T:U3DXT.Utils.Json">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Json.Deserialize(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false</returns>
        </member>
        <member name="M:U3DXT.Utils.Json.Serialize(System.Object)">
            <summary>
            Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string
            </summary>
            <param name="obj">A Dictionary&lt;string, object&gt; / List&lt;object&gt;</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="T:U3DXT.Utils.MonoPInvokeCallbackAttribute">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.Utils.MonoPInvokeCallbackAttribute.#ctor(System.Type)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.Utils.Size">
            <summary>
            A struct representing a size in 2D.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Size.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Utils.Size" /> struct.
            </summary>
            <param name="width">
            Width.
            </param>
            <param name="height">
            Height.
            </param>
        </member>
        <member name="F:U3DXT.Utils.Size.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:U3DXT.Utils.Size.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Size._Serialize">
            <summary>
            U3DXT internal method.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size._Deserialize(System.Object)">
            <summary>
            U3DXT internal method.
            </summary>
            <returns>
            </returns>
            <param name="json">
            </param>
        </member>
        <member name="M:U3DXT.Utils.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.Utils.Size" />.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:U3DXT.Utils.Size" /> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="other">
            The <see cref="T:System.Object" /> to compare with the current <see cref="T:U3DXT.Utils.Size" />.
            </param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:U3DXT.Utils.Size" />;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.op_Equality(U3DXT.Utils.Size,U3DXT.Utils.Size)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.Utils.Size" /> is equal to another specified <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:U3DXT.Utils.Size.op_Inequality(U3DXT.Utils.Size,U3DXT.Utils.Size)">
            <summary>
            Determines whether a specified instance of <see cref="T:U3DXT.Utils.Size" /> is not equal to another specified <see cref="T:U3DXT.Utils.Size" />.
            </summary>
            <param name="lhs">
            The first <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <param name="rhs">
            The second <see cref="T:U3DXT.Utils.Size" /> to compare.
            </param>
            <returns>
                <c>true</c> if <c>lhs</c> and <c>rhs</c> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:U3DXT.Utils.UUID">
            <summary>
            U3DXT internal class.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.UUID.Generate">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="T:U3DXT.Core.CoreXT">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsDevice">
            <summary>
            Indicates whether it is currently running on device.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPhone">
            <summary>
            Indicates whether it is currently running on iPhone.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPad">
            <summary>
            Indicates whether it is currently running on iPad.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPod">
            <summary>
            Indicates whether it is currently running on iPod.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.IsiPhoneOriPod">
            <summary>
            Indicates whether it is currently running on iPhone or iPod.
            </summary>
        </member>
        <member name="F:U3DXT.Core.CoreXT.VERSION">
            <summary>
            The version of the U3DXT Core.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT._Init">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT.Start">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Core.CoreXT.Update">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="T:U3DXT.Core.U3DXTException">
            <summary>
            Exception class that U3DXT can thrown.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="inner">Inner.</param>
        </member>
        <member name="M:U3DXT.Core.U3DXTException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTException" /> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="T:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute">
            <summary>
            Assembly core version compatibility attribute.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute" /> class.
            </summary>
            <param name="version">Version.</param>
        </member>
        <member name="P:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:U3DXT.Utils.AssemblyCompatibleCoreVersionAttribute.GetSystemVersion">
            <summary>
            Gets the system version.
            </summary>
            <returns>The system version.</returns>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.NSLineBreakMode">
            <summary>
            These constants specify what happens when a line is too long for its container.
            </summary>
            <remarks>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.Clipping">
            <summary>
                <p>Lines are simply not drawn past the edge of the text container.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByClipping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.CharWrapping">
            <summary>
                <p>Wrapping occurs before the first character that doesn’t fit.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByCharWrapping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingHead">
            <summary>
                <p>The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingHead</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingTail">
            <summary>
                <p>The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingTail</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.WordWrapping">
            <summary>
                <p>Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByWordWrapping</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSLineBreakMode.TruncatingMiddle">
            <summary>
                <p>The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. Although this mode works for multiline text, it is more often used for single line text.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSLineBreakByTruncatingMiddle</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.NSTextAlignment">
            <summary>
            Options for aligning text horizontally.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Justified">
            <summary>
                <p>Fully justify the text so that the last line in a paragraph is natural aligned.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentJustified</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Right">
            <summary>
                <p>Align text along the right edge.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Left">
            <summary>
                <p>Align text along the left edge.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Natural">
            <summary>
                <p>Use the default alignment associated with the current script.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentNatural</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.NSTextAlignment.Center">
            <summary>
                <p>Align text equally along both sides of the center line.</p>
                <p>Available in iOS 6.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>NSTextAlignmentCenter</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView">
            <summary>
            Use an activity indicator to show that a task is in progress. An activity indicator appears as a “gear” that is either spinning or stopped.
            </summary>
            <remarks>
                <p>You control when an activity indicator animates by calling the <c>startAnimating</c> and <c>stopAnimating</c> methods. To automatically hide the activity indicator when animation stops, set the <c>hidesWhenStopped</c> property to <c>true</c>.</p>
                <p>Starting in iOS 5.0, you can set the color of the activity indicator by using the <c>color</c> property. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView" /> class.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle)">
            <summary>
            Creates an instance of the native UIActivityIndicatorView and initializes the object. Initializes and returns an activity-indicator object.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:]</c> calls.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>style</em>
                <p>A constant that specifies the style of the object to be created. See <c>UIActivityIndicatorStyle</c> for descriptions of the style constants.</p>
                <b>Return Value</b>
                <p>An initialized <c>UIActivityIndicatorView</c> object or <c>null</c> if the object couldn’t be created.</p>
                <b>Discussion</b>
                <p>
                    <c>UIActivityIndicatorView</c> sizes the returned instance according to the specified <em>style</em>. You can set and retrieve the style of a activity indicator through the <c>activityIndicatorViewStyle</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="style">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UIActivityIndicatorView and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UIActivityIndicatorView alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.ClassExists">
            <summary>
            Returns whether the native UIActivityIndicatorView class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.ActivityIndicatorViewStyle">
            <summary>
            The basic appearance of the activity indicator.
            <br></br>Equivalent to the native <c>activityIndicatorViewStyle</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>See <c>UIActivityIndicatorStyle</c> for the available styles. The default value is <c>UIActivityIndicatorViewStyleWhite</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.Color">
            <summary>
            The color of the activity indicator.
            <br></br>Equivalent to the native <c>color</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you set a color for an activity indicator, it overrides the color provided by the <c>activityIndicatorViewStyle</c> property.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 5.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.HidesWhenStopped">
            <summary>
            A Boolean value that controls whether the receiver is hidden when the animation is stopped.
            <br></br>Equivalent to the native <c>hidesWhenStopped</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the value of this property is <c>true</c> (the default), the receiver sets its <c>hidden</c> property (<c>UIView</c>) to <c>true</c> when receiver is not animating. If the <c>hidesWhenStopped</c> property is <c>false</c>, the receiver is not hidden when animation stops. You stop an animating progress indicator with the <c>stopAnimating</c> method.
            </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_activityIndicatorViewStyle(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_activityIndicatorViewStyle(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_color(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_color(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_get_hidesWhenStopped(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_set_hidesWhenStopped(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_alloc_initWithActivityIndicatorStyle_(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_isAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_startAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.UP_UIActivityIndicatorView_stopAnimating(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.IsAnimating">
            <summary>
            Returns whether the receiver is animating.
            <br></br>Equivalent to the native <c>isAnimating</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver is animating, otherwise <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– startAnimating</c>
                    </li>
                    <li>
                        <c>– stopAnimating</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.StartAnimating">
            <summary>
            Starts the animation of the progress indicator.
            <br></br>Equivalent to the native <c>startAnimating</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When the progress indicator is animated, the gear spins to indicate indeterminate progress. The indicator is animated until <c>stopAnimating</c> is called.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIActivityIndicatorView.StopAnimating">
            <summary>
            Stops the animation of the progress indicator.
            <br></br>Equivalent to the native <c>stopAnimating</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Call this method to stop the animation of the progress indicator started with a call to <c>startAnimating</c>. When animating is stopped, the indicator is hidden, unless <c>hidesWhenStopped</c> is <c>false</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle">
            <summary>
            The visual style of the progress indicator.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You set the value of the <c>activityIndicatorViewStyle</c> property with these constants.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.White">
            <summary>
                <p>The standard white style of indicator (the default).</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleWhite</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.Gray">
            <summary>
                <p>The standard gray style of indicator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleGray</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIActivityIndicatorViewStyle.WhiteLarge">
            <summary>
                <p>The large white style of indicator.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIActivityIndicatorViewStyleWhiteLarge</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIFont">
            <summary>
            The <c>UIFont</c> class provides the interface for getting and setting font information. The class provides you with access to the font’s characteristics and also provides the system with access to the font’s glyph information, which is used during layout. You use font objects by passing them to methods that accept them as a parameter.
            </summary>
            <remarks>
                <p>You do not create <c>UIFont</c> objects using the <c>alloc</c> and <c>init</c> methods. Instead, you use class methods of <c>UIFont</c> to look up and retrieve the desired font object. These methods check for an existing font object with the specified characteristics and return it if it exists. Otherwise, they create a new font object based on the desired font characteristics.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIFont" /> class.
            <br></br>Equivalent to the native <c>[[UIFont alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.ClassExists">
            <summary>
            Returns whether the native UIFont class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.Ascender">
            <summary>
            The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only)
            <br></br>Equivalent to the native <c>ascender</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The ascender value is measured in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>descender</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.CapHeight">
            <summary>
            The receiver’s cap height information. (read-only)
            <br></br>Equivalent to the native <c>capHeight</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value measures (in points) the height of a capital character. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.Descender">
            <summary>
            The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only)
            <br></br>Equivalent to the native <c>descender</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The descender value is measured in points. This value may be positive or negative. For example, if the longest descender extends 2 points below the baseline, this method returns <c>-2.0</c> .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>ascender</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.FamilyName">
            <summary>
            The font family name. (read-only)
            <br></br>Equivalent to the native <c>familyName</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A family name is a name such as <c>Times New Roman</c> that identifies one or more specific fonts. The value in this property is intended for an application’s internal usage only and should not be displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.FontName">
            <summary>
            The font face name. (read-only)
            <br></br>Equivalent to the native <c>fontName</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The font name is a name such as <c>HelveticaBold</c> that incorporates the family name and any specific style information for the font. The value in this property is intended for an application’s internal usage only and should not be displayed.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.Leading">
            <summary>
            The receiver’s leading information. (read-only) ( Deprecated in iOS 4.0.  Use the <c>lineHeight</c> property instead.)
            <br></br>Equivalent to the native <c>leading</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The leading value represents the spacing between lines of text and is measured (in points) from baseline to baseline.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 4.0.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.LineHeight">
            <summary>
            The height of text lines (measured in points). (read-only)
            <br></br>Equivalent to the native <c>lineHeight</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.PointSize">
            <summary>
            The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only)
            <br></br>Equivalent to the native <c>pointSize</c> property.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIFont.XHeight">
            <summary>
            The x-height of the receiver. (read-only)
            <br></br>Equivalent to the native <c>xHeight</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This value measures (in points) the height of the lowercase character "x". </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_boldSystemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_buttonFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_familyNames">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontNamesForFamilyName_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontWithName_size_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_italicSystemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_labelFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_smallSystemFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_systemFontOfSize_(System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_systemFontSize">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_ascender(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_capHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_descender(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_familyName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_fontName(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_leading(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_lineHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_pointSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_get_xHeight(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.UP_UIFont_fontWithSize_(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.BoldSystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items that are rendered in boldface type in the specified size.
            <br></br>Equivalent to the native <c>boldSystemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.ButtonFontSize">
            <summary>
            Returns the standard font size used for buttons.
            <br></br>Equivalent to the native <c>buttonFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard button font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.FamilyNames">
            <summary>
            Returns an array of font family names available on the system.
            <br></br>Equivalent to the native <c>familyNames</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains the name of a font family. </p>
                <b>Discussion</b>
                <p>Font family names correspond to the base name of a font, such as <c>Times New Roman</c>. You can pass the returned strings to the <c>fontNamesForFamilyName:</c> method to retrieve a list of font names available for that family. You can then use the corresponding font name to retrieve an actual font object. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ fontNamesForFamilyName:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.FontNames(System.String)">
            <summary>
            Returns an array of font names available in a particular font family.
            <br></br>Equivalent to the native <c>fontNamesForFamilyName:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>familyName</em>
                <p>The name of the font family. Use the <c>familyNames</c> method to get an array of the available font family names on the system.  </p>
                <b>Return Value</b>
                <p>An array of <c>String</c> objects, each of which contains a font name associated with the specified family.  </p>
                <b>Discussion</b>
                <p>You can pass the returned strings as parameters to the <c>fontWithName:size:</c> method to retrieve an actual font object.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ familyNames</c>
                    </li>
                    <li>
                        <c>+ fontWithName:size:</c>
                    </li>
                </ul>
            </remarks>
            <param name="familyName">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.Font(System.String,System.Single)">
            <summary>
            Creates and returns a font object for the specified font name and size.
            <br></br>Equivalent to the native <c>fontWithName:size:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontName</em>
                <p>The fully specified name of the font. This name incorporates both the font family name and the specific style information for the font. </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified name and size.</p>
                <b>Discussion</b>
                <p>You can use the <c>fontNamesForFamilyName:</c> method to retrieve the specific font names for a given font family. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ familyNames</c>
                    </li>
                    <li>
                        <c>+ fontNamesForFamilyName:</c>
                    </li>
                </ul>
            </remarks>
            <param name="fontName">
            </param>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.ItalicSystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items that are rendered in italic type in the specified size.
            <br></br>Equivalent to the native <c>italicSystemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.LabelFontSize">
            <summary>
            Returns the standard font size used for labels.
            <br></br>Equivalent to the native <c>labelFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard label font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SmallSystemFontSize">
            <summary>
            Returns the size of the standard small system font.
            <br></br>Equivalent to the native <c>smallSystemFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard small system font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SystemFontOfSize(System.Single)">
            <summary>
            Returns the font object used for standard interface items in the specified size.
            <br></br>Equivalent to the native <c>systemFontOfSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The size (in points) to which the font is scaled. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.SystemFontSize">
            <summary>
            Returns the size of the standard system font.
            <br></br>Equivalent to the native <c>systemFontSize</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The standard system font size in points.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIFont.Font(System.Single)">
            <summary>
            Returns a font object that is the same as the receiver but which has the specified size instead.
            <br></br>Equivalent to the native <c>fontWithSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>fontSize</em>
                <p>The desired size (in points) of the new font object. This value must be greater than 0.0.</p>
                <b>Return Value</b>
                <p>A font object of the specified size.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="fontSize">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UILabel">
            <summary>
            The <c>UILabel</c> class implements a read-only text view. You can use this class to draw one or multiple lines of static text, such as those you might use to identify other parts of your user interface. The base <c>UILabel</c> class provides support for both simple and complex styling of the label text. You can also control over aspects of appearance, such as whether the label uses a shadow or draws with a highlight. If needed, you can customize the appearance of your text further by subclassing.
            </summary>
            <remarks>
                <p>The default content mode of the <c>UILabel</c> class is <c>UIViewContentModeRedraw</c>. This mode causes the view to redraw its contents every time its bounding rectangle changes. You can change this mode by modifying the inherited <c>contentMode</c> property of the class.</p>
                <p>New label objects are configured to disregard user events by default. If you want to handle events in a custom subclass of <c>UILabel</c>, you must explicitly change the value of the <c>userInteractionEnabled</c> property to <c>true</c> after initializing the object.</p>
                <p>For information about basic view behaviors, see <em>View Programming Guide for iOS</em>. </p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UILabel" /> class.
            <br></br>Equivalent to the native <c>[[UILabel alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.#ctor(UnityEngine.Rect)">
            <summary>
            Creates an instance of the native UILabel and initializes the object. Inherits from <c>UIView</c>.
            <br></br>Equivalent to the native <c>[[UILabel alloc] initWithFrame:]</c> calls.
            </summary>
            <remarks>
            </remarks>
            <param name="frame">
            </param>
            <seealso cref="T:U3DXT.iOS.Native.UIKit.UIView" />
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.ClassExists">
            <summary>
            Returns whether the native UILabel class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.AdjustsFontSizeToFitWidth">
            <summary>
            A Boolean value indicating whether the font size should be reduced in order to fit the title string into the label’s bounding rectangle.
            <br></br>Equivalent to the native <c>adjustsFontSizeToFitWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Normally, the label text is drawn with the font you specify in the <c>font</c> property. If this property is set to <c>true</c>, however, and the text in the <c>text</c> property exceeds the label’s bounding rectangle, the receiver starts reducing the font size until the string fits or the minimum font size is reached. This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <p>The default value for this property is <c>false</c>. If you change it to <c>true</c>, you should also set an appropriate minimum font size by modifying the <c>minimumFontSize</c> property.</p>
                <p>
                    <strong>Important:</strong> If this property is set to <c>true</c>, it is a programmer error to set the <c>lineBreakMode</c> property to a value that causes text to wrap to another line. </p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>font</c>
                    </li>
                    <li>
                        <c>minimumFontSize</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.AdjustsLetterSpacingToFitWidth">
            <summary>
            A Boolean value indicating whether spacing between letters should be adjusted to fit the string within the label’s bounds rectangle.
            <br></br>Equivalent to the native <c>adjustsLetterSpacingToFitWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When this property is <c>true</c>, the label may alter the letter spacing of the label text to make that text fit better within the label’s bounds. This property is applied to the string regardless of the current line break mode. The default value of this property is <c>false</c>.  </p>
                <p>If the value of this property to <c>true</c>, the label to ignore values value returned by the <c><!--a target="_self" -->tighteningFactorForTruncation<!--/a--></c> method of any <c>NSParagraphStyle</c> objects associated with the label text. </p>
                <p>
                    <strong>Important:</strong> If this property is set to <c>true</c>, it is a programmer error to set the <c>lineBreakMode</c> property to a value that causes text to wrap to another line. </p>
                <p>
                </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.BaselineAdjustment">
            <summary>
            Controls how text baselines are adjusted when text needs to shrink to fit in the label.
            <br></br>Equivalent to the native <c>baselineAdjustment</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If the <c>adjustsFontSizeToFitWidth</c> property is set to <c>true</c>, this property controls the behavior of the text baselines in situations where adjustment of the font size is required. The default value of this property is <c>UIBaselineAdjustmentAlignBaselines</c>.  This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.Enabled">
            <summary>
            The enabled state to use when drawing the label’s text.
            <br></br>Equivalent to the native <c>enabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property determines only how the label is drawn. Disabled text is dimmed somewhat to indicate it is not active. This property is set to <c>true</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.Font">
            <summary>
            The font of the text.
            <br></br>Equivalent to the native <c>font</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the font to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the font to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value for this property is the system font at a size of 17 points (using the <c>systemFontOfSize:</c> class method of <c>UIFont</c>). The value for the property can only be set to a non-<c>null</c> value; setting this property to <c>null</c> raises an exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.Highlighted">
            <summary>
            A Boolean value indicating whether the receiver should be drawn with a highlight.
            <br></br>Equivalent to the native <c>highlighted</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Setting this property causes the receiver to redraw with the appropriate highlight state. A subclass implementing a text button might set this property to <c>true</c> when the user presses the button and set it to <c>false</c> at other times. In order for the highlight to be drawn, the <c>highlightedTextColor</c> property must contain a non-<c>null</c> value.</p>
                <p>The default value of this property is <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>highlightedTextColor</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.HighlightedTextColor">
            <summary>
            The highlight color applied to the label’s text.
            <br></br>Equivalent to the native <c>highlightedTextColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Subclasses that use labels to implement a type of text button can use the value in this property when drawing the pressed state for the button. This color is applied to the label automatically whenever the <c>highlighted</c> property is set to <c>true</c>.  </p>
                <p>The default value of this property is <c>null</c> . </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>highlighted</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.LineBreakMode">
            <summary>
            The technique to use for wrapping and truncating the label’s text.
            <br></br>Equivalent to the native <c>lineBreakMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the line break mode to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the line break mode to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>This property is in effect both during normal drawing and in cases where the font size must be reduced to fit the label’s text in its bounding box. This property is set to <c>NSLineBreakByTruncatingTail</c> by default. </p>
                <p>
                    <strong>Important:</strong> If this property is set to a value that causes text to wrap to another line, it is a programmer error to set either the <c>adjustsFontSizeToFitWidth</c> or <c>adjustsLetterSpacingToFitWidth</c> property to <c>true</c>.</p>
                <p>
                </p>
                <b>Special Considerations</b>
                <p>In iOS 5 and earlier, the type of this property was <c>UILineBreakMode</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.MinimumFontSize">
            <summary>
            The size of the smallest permissible font with which to draw the label’s text.  ( Deprecated in iOS 6.0.  Use <c>minimumScaleFactor</c> instead.)
            <br></br>Equivalent to the native <c>minimumFontSize</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>When drawing text that might not fit within the bounding rectangle of the label, you can use this property to prevent the receiver from reducing the font size to the point where it is no longer legible. </p>
                <p>The default value for this property is 0.0. If you enable font adjustment for the label, you should always increase this value. This property is effective only when the <c>numberOfLines</c> property is set to 1.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 6.0.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.MinimumScaleFactor">
            <summary>
            The minimum scale factor supported for the label’s text.
            <br></br>Equivalent to the native <c>minimumScaleFactor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this property to specify the smallest multiplier for the current font size that yields an acceptable font size to use when displaying the label’s text. If you specify a value of <c>0</c> for this property, the current font size is used as the smallest font size.</p>
                <p>The default value of this property is <c>0</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.NumberOfLines">
            <summary>
            The maximum number of lines to use for rendering text.
            <br></br>Equivalent to the native <c>numberOfLines</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property controls the maximum number of lines to use in order to fit the label’s text into its bounding rectangle. The default value for this property is 1. To remove any maximum limit, and use as many lines as needed, set the value of this property to 0. </p>
                <p>If you constrain your text using this property, any text that does not fit within the maximum number of lines and inside the bounding rectangle of the label is truncated using the appropriate line break mode.    </p>
                <p>When the receiver is resized using the <c>sizeToFit</c> method, resizing takes into account the value stored in this property. For example, if this property is set to 3, the <c>sizeToFit</c> method resizes the receiver so that it is big enough to display three lines of text.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>enabled</c>
                    </li>
                    <li>
                        <c>adjustsFontSizeToFitWidth</c>
                    </li>
                    <li>
                        <c>sizeToFit</c> (UIView)</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.PreferredMaxLayoutWidth">
            <summary>
            The preferred maximum width (in points) for a multiline label.
            <br></br>Equivalent to the native <c>preferredMaxLayoutWidth</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property affects the size of the label when layout constraints are applied to it. During layout, if the text extends beyond the width specified by this property, the additional text is flowed to one or more new lines, thereby increasing the height of the label.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 6.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.ShadowColor">
            <summary>
            The shadow color of the text.
            <br></br>Equivalent to the native <c>shadowColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is <c>null</c>, which indicates that no shadow is drawn. In addition to this property, you may also want to change the default shadow offset by modifying the <c>shadowOffset</c> property. Text shadows are drawn with the specified offset and color and no blurring. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>shadowOffset</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.ShadowOffset">
            <summary>
            The shadow offset (measured in points) for the text.
            <br></br>Equivalent to the native <c>shadowOffset</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The shadow color must be non-<c>null</c> for this property to have any effect. The default offset size is (0, -1), which indicates a shadow one point above the text. Text shadows are drawn with the specified offset and color and no blurring.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>shadowColor</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.Text">
            <summary>
            The text displayed by the label.
            <br></br>Equivalent to the native <c>text</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This string is <c>null</c> by default.</p>
                <p>In iOS 6 and later, assigning a new value to this property also replaces the value of the <c>attributedText</c> property with the same text, albeit without any inherent style attributes. Instead the label styles the new string using the <c>shadowColor</c>, <c>textAlignment</c>, and other style-related properties of the class.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.TextAlignment">
            <summary>
            The technique to use for aligning the text.
            <br></br>Equivalent to the native <c>textAlignment</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the text alignment to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the alignment to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value of this property is <c>NSTextAlignmentLeft</c>.</p>
                <b>Special Considerations</b>
                <p>In iOS 5 and earlier, the type of this property was <c>UITextAlignment</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.TextColor">
            <summary>
            The color of the text.
            <br></br>Equivalent to the native <c>textColor</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you are using styled text in iOS 6 or later, assigning a new value to this property causes the color to be applied to the entirety of the string in the <c>attributedText</c> property. If you want to apply the color to only a portion of the text, create a new attributed string with the desired style information and associate it with the label. If you are not using styled text, this property applies to the entire text string in the <c>text</c> property.</p>
                <p>The default value for this property is a black color (set through the <c>blackColor</c> class method of <c>UIColor</c>). The value for the property can only be set to a non-<c>null</c> value; setting this property to <c>null</c> raises an exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UILabel.UserInteractionEnabled">
            <summary>
            A Boolean value that determines whether user events are ignored and removed from the event queue.
            <br></br>Equivalent to the native <c>userInteractionEnabled</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This property is inherited from the <c>UIView</c> parent class. This class changes the default value of this property to <c>false</c>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_adjustsFontSizeToFitWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_adjustsFontSizeToFitWidth(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_adjustsLetterSpacingToFitWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_adjustsLetterSpacingToFitWidth(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_baselineAdjustment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_baselineAdjustment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_enabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_enabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_font(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_font(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_highlighted(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_highlighted(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_highlightedTextColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_highlightedTextColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_lineBreakMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_lineBreakMode(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_minimumFontSize(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_minimumFontSize(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_minimumScaleFactor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_minimumScaleFactor(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_numberOfLines(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_numberOfLines(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_preferredMaxLayoutWidth(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_preferredMaxLayoutWidth(System.String,System.Single)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_shadowColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_shadowColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_shadowOffset(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_shadowOffset(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_text(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_text(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_textAlignment(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_textAlignment(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_textColor(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_textColor(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_get_userInteractionEnabled(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_set_userInteractionEnabled(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_drawTextInRect_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.UP_UILabel_textRectForBounds_limitedToNumberOfLines_(System.String,System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.DrawTextInRect(UnityEngine.Rect)">
            <summary>
            Draws the receiver’s text (or its shadow) in the specified rectangle.
            <br></br>Equivalent to the native <c>drawTextInRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The rectangle in which to draw the text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. This method should only be overridden by subclasses that want to modify the default drawing behavior for the label’s text. </p>
                <p>By the time this method is called, the current graphics context is already configured with the default environment and text color for drawing. In your overridden method, you can configure the current context further and then invoke <c>super</c> to do the actual drawing or you can do the drawing yourself. If you do render the text yourself, you should not invoke <c>super</c>.  </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UILabel.TextRect(UnityEngine.Rect,System.Int32)">
            <summary>
            Returns the drawing rectangle for the label’s text.
            <br></br>Equivalent to the native <c>textRectForBounds:limitedToNumberOfLines:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>bounds</em>
                <p>The bounding rectangle of the receiver. </p>
                <em>numberOfLines</em>
                <p>The maximum number of lines to use for the label. The value 0 indicates there is no maximum number of lines and that the rectangle should encompass all of the text. </p>
                <b>Return Value</b>
                <p>The computed drawing rectangle for the label’s text.</p>
                <b>Discussion</b>
                <p>You should not call this method directly. This method should only be overridden by subclasses that want to change the receiver’s bounding rectangle before performing any other computations. Use the value in the <em>numberOfLines</em> parameter to limit the height of the returned rectangle to the specified number of lines of text. For this method to be called, there must be a prior call to the sizeToFit or sizeThatFits: method. Note that labels in UITableViewCell objects are sized based on the cell dimensions, and not a requested size.</p>
                <p>The default implementation of this method returns the original <em>bounds</em> rectangle. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="bounds">
            </param>
            <param name="numberOfLines">
            </param>
        </member>
        <member name="T:U3DXT.Core.U3DXTErrorEventArgs">
            <summary>
            Unity XT error event arguments.
            </summary>
        </member>
        <member name="M:U3DXT.Core.U3DXTErrorEventArgs.#ctor(U3DXT.iOS.Native.Foundation.NSError)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.Core.U3DXTErrorEventArgs" /> class.
            </summary>
            <param name="error">The NSError object.</param>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.Code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.Domain">
            <summary>
            The error domain.
            </summary>
        </member>
        <member name="F:U3DXT.Core.U3DXTErrorEventArgs.Description">
            <summary>
            The localized description of the error.
            </summary>
        </member>
        <member name="T:U3DXT.Utils.Encryption">
            <summary>
            U3DXT internal.
            </summary>
        </member>
        <member name="M:U3DXT.Utils.Encryption.EncryptFromString(System.String,System.String,System.String)">
            <summary>
            Encrypts from string.
            </summary>
            <returns>The from string.</returns>
            <param name="str">String.</param>
            <param name="pass">Pass.</param>
            <param name="ivstr">Ivstr.</param>
        </member>
        <member name="M:U3DXT.Utils.Encryption.DecryptToString(System.String,System.String,System.String)">
            <summary>
            Decrypts to string.
            </summary>
            <returns>The to string.</returns>
            <param name="data">Data.</param>
            <param name="pass">Pass.</param>
            <param name="ivstr">Ivstr.</param>
        </member>
        <member name="T:U3DXT.iOS.Internals.NSObjectWrapper">
            <summary>
            A wrapper class for NSObject.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" /> class.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Internals.NSObjectWrapper._nsObject">
            <summary>
            The _ns object.
            </summary>
        </member>
        <member name="P:U3DXT.iOS.Internals.NSObjectWrapper.ID">
            <summary>
            The wrapper's ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper._InitWrapper(U3DXT.iOS.Native.Foundation.NSObject,System.String)">
            <summary>
            _s the init wrapper.
            </summary>
            <param name="nsObj">Ns object.</param>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:U3DXT.iOS.Internals.NSObjectWrapper" />.</returns>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.GetWrapper(System.String)">
            <summary>
            Gets the wrapper.
            </summary>
            <returns>The wrapper.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:U3DXT.iOS.Internals.NSObjectWrapper.CreateWrapper(System.Type,U3DXT.iOS.Native.Foundation.NSObject,System.String)">
            <summary>
            Creates the wrapper.
            </summary>
            <returns>The wrapper.</returns>
            <param name="type">Type.</param>
            <param name="nsObj">Ns object.</param>
            <param name="id">Identifier.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.Internals.NativePointer">
            <summary>
            Native pointer.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Internals.NativePointer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.Internals.NativePointer" /> class.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="P:U3DXT.iOS.Native.Internals.NativePointer.NativeAddress">
            <summary>
            The native address.
            </summary>
            <value>The native address.</value>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreFoundation.CFType">
            <summary>
            An untyped "generic" reference to any Core Foundation object.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.CoreFoundation.CFType" /> class.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.Retain">
            <summary>
            Retain this native object.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreFoundation.CFType.Release">
            <summary>
            Release this native object.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary">
            <summary>
            An instance of <c>ALAssetsLibrary</c> provides access to the videos and photos that are under the control of the Photos application.
            </summary>
            <remarks>
                <p>The library includes those that are in the Saved Photos album, those coming from iTunes, and those that were directly imported into the device. You use it to retrieve the list of all asset groups and to save images and videos into the Saved Photos album.</p>
                <p>You create an instance of <c>ALAssetsLibrary</c> using <c>alloc</c> and <c>init</c>:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>ALAssetsLibrary* library = [[ALAssetsLibrary alloc] init];  </pre>
                        </td>
                    </tr>
                </table>
                <p>The lifetimes of objects you get back from a library instance are tied to the lifetime of the library instance.</p>
                <p>Many of the methods declared by <c>ALAssetsLibrary</c> take blocks for failure and success as arguments. These methods are all asynchronous because the user may need to be asked to grant access to the data.</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary" /> class.
            <br></br>Equivalent to the native <c>[[ALAssetsLibrary alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.ClassExists">
            <summary>
            Returns whether the native ALAssetsLibrary class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeImageDataToSavedPhotosAlbum_metadata_completionBlock_(System.String,System.String,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.UP_ALAssetsLibrary_writeImageToSavedPhotosAlbum_metadata_completionBlock_(System.String,System.UInt32,System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteImageDataToSavedPhotosAlbum(U3DXT.iOS.Native.Foundation.NSData,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Writes given image data and metadata to the Photos Album.
            <br></br>Equivalent to the native <c>writeImageDataToSavedPhotosAlbum:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageData</em>
                <p>Data for the image to add to the album.</p>
                <em>metadata</em>
                <p>The metadata to associate with the image.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteImageCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>If there is a conflict between the metadata in the image data and the metadata dictionary, the image data metadata values will be overwritten.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.1 and later.</li>
                </ul>
            </remarks>
            <param name="imageData">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.AssetsLibrary.ALAssetsLibrary.WriteImageToSavedPhotosAlbum(U3DXT.iOS.Native.CoreGraphics.CGImage,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Action{U3DXT.iOS.Native.Foundation.NSURL,U3DXT.iOS.Native.Foundation.NSError})">
            <summary>
            Writes a given image and metadata to the Photos Album.
            <br></br>Equivalent to the native <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>imageRef</em>
                <p>The image to add to the album.</p>
                <em>metadata</em>
                <p>The metadata to associate with the image.</p>
                <em>completionBlock</em>
                <p>The block invoked after the save operation completes.</p>
                <p>For a description of the block, see <c>ALAssetsLibraryWriteImageCompletionBlock</c>.</p>
                <b>Discussion</b>
                <p>You must specify the orientation key in the metadata dictionary to preserve the orientation of the image.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.1 and later.</li>
                </ul>
            </remarks>
            <param name="imageRef">
            </param>
            <param name="metadata">
            </param>
            <param name="completionBlock"> A callback delegate.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGColor">
            <summary>
            An opaque type that represents a color used in Quartz 2D drawing.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>
                    <c>CGColorRef</c>  is the fundamental data type used internally by Quartz to represent colors. CGColor objects, and the functions that operate on them, provide a fast and convenient way of managing and setting colors directly, especially colors that are reused (such as black for text).</p>
                <p>In OS X version 10.3 and later, <c>CGColorRef</c> is derived from <c>CFTypeRef</c> and inherits the properties that all Core Foundation types have in common. For more information, see  CFType Reference .</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColor.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.CoreGraphics.CGColor" /> class.
            Creates a pointer to a native CGColor object.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGColorSpace">
            <summary>
            An opaque type that encapsulates color space information.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGColorSpace.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.CoreGraphics.CGColorSpace" /> class.
            Creates a pointer to a native CGColorSpace object.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="T:U3DXT.iOS.Native.CoreGraphics.CGImage">
            <summary>
            An opaque type that encapsulates bitmap image
            information.
            </summary>
            <remarks>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.Native.CoreGraphics.CGImage" /> class.
            Creates a pointer to a native CGImage object.
            </summary>
            <param name="address">Address.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_fromTexture2D(UnityEngine.Color32[],System.Int32,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_toTexture2D(System.UInt32,UnityEngine.Color32[],System.Int32,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.FromTexture2D(UnityEngine.Texture2D)">
            <summary>
            Create a native CGImage object from a Texture2D.
            </summary>
            <returns>The newly created native CGImage object or null if error.</returns>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.FromWebCamTexture(UnityEngine.WebCamTexture)">
            <summary>
            Create a native CGImage object from a WebCamTexture.
            </summary>
            <returns>The newly created native CGImage object or null if error.</returns>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.ToTexture2D">
            <summary>
            Creates a Texture2D with the contents of the native CGImage.
            </summary>
            <returns>The texture.</returns>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.CopyToTexture2D(UnityEngine.Texture2D)">
            <summary>
            Copies the contents of this native UIImage to a Texture2D.
            </summary>
            <returns>
                <c>true</c>, if to image was copied, <c>false</c> otherwise.</returns>
            <param name="texture">The output texture</param>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_CGImageGetHeight(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.UP_CGImage_CGImageGetWidth(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.GetHeight">
            <summary>
            Returns the height of a bitmap image.
            <br></br>Equivalent to the native <c>CGImageGetHeight</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to examine. </p>
                <b>Return Value</b>
                <p>The height in pixels of the bitmap image (or image mask).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.CoreGraphics.CGImage.GetWidth">
            <summary>
            Returns the width of a bitmap image.
            <br></br>Equivalent to the native <c>CGImageGetWidth</c> function.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>image</em>
                <p>The image to examine. </p>
                <b>Return Value</b>
                <p>The width, in pixels, of the specified bitmap image (or image mask).</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.Foundation.NSValue">
            <summary>
            An <c>NSValue</c> object is a simple container for a single C or Objective-C data item. It can hold any of the scalar types such as int, float, and char, as well as pointers, structures, and object ids. The purpose of this class is to allow items of such data types to be added to collections such as instances of <c>object[]</c> and <c>object[]</c>, which require their elements to be objects. <c>NSValue</c> objects are always immutable.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.Foundation.NSValue" /> class.
            <br></br>Equivalent to the native <c>[[NSValue alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="P:U3DXT.iOS.Native.Foundation.NSValue.ClassExists">
            <summary>
            Returns whether the native NSValue class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGAffineTransform_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGPoint_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGRect_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithCGSize_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithNonretainedObject_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_valueWithRange_(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGAffineTransformValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGPointValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGRectValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_CGSizeValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_isEqualToValue_(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_nonretainedObjectValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.UP_NSValue_rangeValue(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Matrix4x4)">
            <summary>
            Creates and returns a value object that contains the specified affine transform data.
            <br></br>Equivalent to the native <c>valueWithCGAffineTransform:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>transform</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the affine transform data.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGAffineTransformValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="transform">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Vector2)">
            <summary>
            Creates and returns a value object that contains the specified point structure.
            <br></br>Equivalent to the native <c>valueWithCGPoint:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>point</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the point information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGPointValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="point">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(UnityEngine.Rect)">
            <summary>
            Creates and returns a value object that contains the specified rectangle structure.
            <br></br>Equivalent to the native <c>valueWithCGRect:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>rect</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the rectangle information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGRectValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="rect">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(U3DXT.Utils.Size)">
            <summary>
            Creates and returns a value object that contains the specified size structure.
            <br></br>Equivalent to the native <c>valueWithCGSize:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>size</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new value object that contains the size information.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– CGSizeValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="size">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(System.Object)">
            <summary>
            Creates and returns an <c>NSValue</c> object that contains a given object.
            <br></br>Equivalent to the native <c>valueWithNonretainedObject:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>anObject</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new <c>NSValue</c> object that contains <em>anObject</em>.</p>
                <b>Discussion</b>
                <p> This method is equivalent to invoking <c>value:withObjCType:</c> in this manner:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>NSValue *theValue = [NSValue value:&amp;anObject withObjCType:@encode(void *)];  </pre>
                        </td>
                    </tr>
                </table>
                <p>This method is useful if you want to add an object to a  collection  but don’t want the collection to create a strong reference to it.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– nonretainedObjectValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="anObject">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.Value(U3DXT.iOS.Native.Foundation.NSRange)">
            <summary>
            Creates and returns an <c>NSValue</c> object that contains a given <c>NSRange</c> structure.
            <br></br>Equivalent to the native <c>valueWithRange:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>range</em>
                <p>The value for the new object.</p>
                <b>Return Value</b>
                <p>A new <c>NSValue</c> object that contains the value of <em>range</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– rangeValue</c>
                    </li>
                </ul>
            </remarks>
            <param name="range">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGAffineTransformValue">
            <summary>
            Returns an affine transform structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGAffineTransformValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An affine transform structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGAffineTransform:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGPointValue">
            <summary>
            Returns a point structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGPointValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A point structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGPoint:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGRectValue">
            <summary>
            Returns a rectangle structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGRectValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A rectangle structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGRect:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.CGSizeValue">
            <summary>
            Returns a size structure representing the data in the receiver.
            <br></br>Equivalent to the native <c>CGSizeValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>A size structure containing the receiver’s value.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithCGSize:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.IsEqualToValue(U3DXT.iOS.Native.Foundation.NSValue)">
            <summary>
            Returns a Boolean value that indicates whether the receiver and another value are equal.
            <br></br>Equivalent to the native <c>isEqualToValue:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>aValue</em>
                <p>The value with which to compare the receiver.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the receiver and <em>aValue</em> are equal, otherwise <c>false</c>. For <c>NSValue</c> objects, the class, type, and contents are compared to determine equality.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="value">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.NonretainedObjectValue">
            <summary>
            Returns the receiver's value as an id.
            <br></br>Equivalent to the native <c>nonretainedObjectValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>The receiver's value as an id. If the receiver was not created to hold a pointer-sized data item, the result is undefined.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>– getValue:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.Foundation.NSValue.RangeValue">
            <summary>
            Returns an <c>NSRange</c> structure representation of the receiver.
            <br></br>Equivalent to the native <c>rangeValue</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>An <c>NSRange</c> structure representation of the receiver.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ valueWithRange:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImageOrientation">
            <summary>
            Specifies the possible orientations of an image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.RightMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationRight</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 90 degrees clockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationRightMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.LeftMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationLeft</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 90 degrees counterclockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationLeftMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Right">
            <summary>
                <p>The image is rotated 90 degrees clockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationRight</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Up">
            <summary>
                <p>The default orientation of images. The image is drawn right-side up, as shown here. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationUp</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.DownMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationDown</c> value. This is the equivalent to flipping an image in the “up” orientation along its horizontal axis and then rotating the image 180 degrees, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationDownMirrored</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Down">
            <summary>
                <p>The image is rotated 180 degrees, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationDown</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.Left">
            <summary>
                <p>The image is rotated 90 degrees counterclockwise, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationLeft</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImageOrientation.UpMirrored">
            <summary>
                <p>The image is drawn as a mirror version of an image drawn with the <c>UIImageOrientationUp</c> value. In other words, the image is flipped along its horizontal axis, as shown here.  </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImageOrientationUpMirrored</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerController">
            <summary>
            The <c>UIImagePickerController</c> class manages customizable, system-supplied user interfaces for taking pictures and movies on supported devices, and for choosing saved images and movies for use in your app. An image picker controller manages user interactions and delivers the results of those interactions to a delegate object.
            </summary>
            <remarks>
                <p>The role and appearance of an image picker controller depend on the <em>source type</em> you assign to it before you present it.</p>
                <ul class="ul">
                    <li class="li">
                        <p>A <c>sourceType</c> of <c>UIImagePickerControllerSourceTypeCamera</c> provides a user interface for taking a new picture or movie (on devices that support media capture).</p>
                    </li>
                    <li class="li">
                        <p>A <c>sourceType</c> of <c>UIImagePickerControllerSourceTypePhotoLibrary</c> or <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c> provides a user interface for choosing among saved pictures and movies.</p>
                    </li>
                </ul>
                <p>To use an image picker controller containing its default controls, perform these steps:</p>
                <ol class="ol">
                    <li class="li">
                        <p>Verify that the device is capable of picking content from the desired source. Do this calling the <c>isSourceTypeAvailable:</c> class method, providing a constant from the  “UIImagePickerControllerSourceType”  enumeration.</p>
                    </li>
                    <li class="li">
                        <p>Check which media types are available, for the source type you’re using, by calling the <c>availableMediaTypesForSourceType:</c> class method. This lets you distinguish between a camera that can be used for video recording and one that can be used only for still images.</p>
                    </li>
                    <li class="li">
                        <p>Tell the image picker controller to adjust the UI according to the media types you want to make available—still images, movies, or both—by setting the <c>mediaTypes</c> property.</p>
                    </li>
                    <li class="li">
                        <p>Present the user interface. On iPhone or iPod touch, do this modally (full-screen) by calling the <c>presentViewController:animated:completion:</c> method of the currently active view controller, passing your configured image picker controller as the new view controller.</p>
                        <p>On iPad, the correct way to present an image picker depend on its source type, as summarized in this table:</p>
                        <table class="graybox" border="0" cellspacing="0" cellpadding="5">
                            <tr>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Camera</p>
                                </th>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Photo Library</p>
                                </th>
                                <th scope="col" class="TableHeading_TableRow_TableCell">
                                    <p>Saved Photos Album</p>
                                </th>
                            </tr>
                            <tr>
                                <td scope="row">
                                    <p>Use full screen</p>
                                </td>
                                <td>
                                    <p>Must use a popover</p>
                                </td>
                                <td>
                                    <p>Must use a popover</p>
                                </td>
                            </tr>
                        </table>
                        <p>The table indicates that on iPad, if you specify a source type of  <c>UIImagePickerControllerSourceTypePhotoLibrary</c> or <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c>, you must present the image picker using a popover controller, as described in  “Presenting and Dismissing the Popover”  in <em>UIPopoverController Class Reference</em>. If you attempt to present an image picker modally (full-screen) for choosing among saved pictures and movies, the system raises an exception.</p>
                        <p>On iPad, if you specify a source type of <c>UIImagePickerControllerSourceTypeCamera</c>, you can present the image picker modally (full-screen) or by using a popover. However, Apple recommends that you present the camera interface only full-screen.</p>
                    </li>
                    <li class="li">
                        <p>When the user taps a button to pick a newly-captured or saved image or movie, or cancels the operation, dismiss the image picker using your delegate object. For newly-captured media, your delegate can then save it to the Camera Roll on the device. For previously-saved media, your delegate can then use the image data according to the purpose of your app.</p>
                    </li>
                </ol>
                <p>For details on these steps, refer to  “Taking Pictures and Movies” .</p>
                <p>You can customize an image picker controller to manage user interactions yourself. To do this, provide an overlay view containing the controls you want to display, and use the methods described in  “Capturing Still Images or Movies.”  You can display your custom overlay view in addition to, or instead of, the default controls. Custom overlay views for the <c>UIImagePickerController</c> class are available in iOS 3.1 and later by way of the <c>cameraOverlayView</c> property. For a code example, see the <em>PhotoPicker</em> sample code project.</p>
                <p>
                </p>
                <p>
                    <strong>Important:</strong> The <c>UIImagePickerController</c> class supports portrait mode only. This class is intended to be used as-is and does not support subclassing. The view hierarchy for this class is private and must not be modified, with one exception. You can assign a custom view to the <c>cameraOverlayView</c> property and use that view to present additional information or manage the interactions between the camera interface and your code.</p>
                <p>
                </p>
                <p>
                </p>
                <b>Providing a Delegate Object</b>
                <p>To use an image picker controller, you must provide a delegate that conforms to the <c>UIImagePickerControllerDelegate</c> protocol.  Starting in iOS 4.1, you can use the delegate to save still-image metadata to the Camera Roll along with the image. See <em>UIImagePickerControllerDelegate Protocol Reference</em>.</p>
                <b>Adjusting Flash Mode</b>
                <p>In iOS 4.0 and later, you can provide custom controls to let the user adjust flash mode (on devices that have a flash LED), pick which camera to use (on devices that have a front and rear camera), and switch between still image and movie capture. You can also manage these settings programmatically. You can also manipulate the flash directly to provide effects such as a strobe light. Present a picker interface set to use video capture mode. Then, turn the flash LED on or off by setting the <c>cameraFlashMode</c> property to <c>UIImagePickerControllerCameraFlashModeOn</c> or <c>UIImagePickerControllerCameraFlashModeOff</c>.</p>
                <b>Working with Movies</b>
                <p>Movie capture has a default duration limit of 10 minutes but can be adjusted using the <c>videoMaximumDuration</c> property. When a user taps the Share button to send a movie to MMS, MobileMe, YouTube, or another destination, an appropriate duration limit and an appropriate video quality are enforced.</p>
                <p>The default camera interface supports editing of previously-saved movies. Editing involves trimming from the start or end of the movie, then saving the trimmed movie. To display an interface dedicated to movie editing, rather than one that also supports recording new movies, use the <c>UIVideoEditorController</c> class instead of this one. See <em>UIVideoEditorController Class Reference</em>.</p>
                <b>Fully-Customized Media Capture and Browsing</b>
                <p>To perform fully-customized image or movie capture, instead use the AV Foundation framework as described in  “Media Capture and Access to Camera”  in <em>AV Foundation Programming Guide</em>. Camera access using the AV Foundation framework is available starting in iOS 4.0.</p>
                <p>To create a fully-customized image picker for browsing the photo library, use classes from the Assets Library framework. For example, you could create a custom image picker that displays larger thumbnail images, that makes use of EXIF metadata including timestamp and location information, or that integrates with other frameworks such as Map Kit. For more information, see <em>Assets Library Framework Reference</em>. Media browsing using the Assets Library framework is available starting in iOS 4.0</p>
            </remarks>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="uuid">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.#ctor">
            <summary>
            Creates and initializes a new instance of the native <see cref="T:U3DXT.iOS.Native.UIKit.UIImagePickerController" /> class.
            <br></br>Equivalent to the native <c>[[UIImagePickerController alloc] init]</c> calls.
            </summary>
            <exception cref="T:U3DXT.Core.U3DXTException">
            Is thrown when creation or initialization fails.
            </exception>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.EditedImage">
            <summary>
                <p>Specifies an image edited by the user.</p>
                <p>The value for this key is a <c>UIImage</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerEditedImage</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.ReferenceURL">
            <summary>
                <p>The Assets Library URL for the original version of the picked item.</p>
                <p>After the user edits a picked item—such as by cropping an image or trimming a movie—the URL continues to point to the original version of the picked item.</p>
                <p>The value for this key is an <c>NSURL</c> object.</p>
                <p>Available in iOS 4.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerReferenceURL</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaType">
            <summary>
                <p>Specifies the media type selected by the user.</p>
                <p>The value for this key is an <c>String</c> object containing a type code such as <c>kUTTypeImage</c> or <c>kUTTypeMovie</c>.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaType</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.OriginalImage">
            <summary>
                <p>Specifies the original, uncropped image selected by the user.</p>
                <p>The value for this key is a <c>UIImage</c> object. </p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerOriginalImage</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaURL">
            <summary>
                <p>Specifies the filesystem URL for the movie.</p>
                <p>The value for this key is an <c>NSURL</c> object.</p>
                <p>Available in iOS 3.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaURL</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaMetadata">
            <summary>
                <p>Metadata for a newly-captured photograph.</p>
                <p>This key is valid only when using an image picker whose source type is set to <c>UIImagePickerControllerSourceTypeCamera</c>, and applies only to still images.</p>
                <p>The value for this key is an <c>Dictionary</c> object that contains the metadata of the photo that was just captured. To store the metadata along with the image in the Camera Roll, use the <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method of the Assets Library framework.</p>
                <p>Available in iOS 4.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerMediaMetadata</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerController.CropRect">
            <summary>
                <p>Specifies the cropping rectangle that was applied to the original image.</p>
                <p>The value for this key is an <c>NSValue</c> object containing a <c>Rect</c> opaque type.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCropRect</c> constant.
            </summary>
            <remarks>
            Keys for the editing information dictionary passed to the delegate.
            <p></p><br /><!-- Media player includes --><!-- /Media player includes --><p></p>This is a constant for "Editing Information Keys".
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.ClassExists">
            <summary>
            Returns whether the native UIImagePickerController class exists on the platform.
            </summary>
            <value>
                <c>true</c> if class exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.AllowsEditing">
            <summary>
            A Boolean value indicating whether the user is allowed to edit a selected still image or movie.
            <br></br>Equivalent to the native <c>allowsEditing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you allow the user to edit still images or movies, the delegate may receive a dictionary with information about the edits that were made. The protocol for the delegate is described in <em>UIImagePickerControllerDelegate Protocol Reference</em>.</p>
                <p>This property is set to <c>false</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.AllowsImageEditing">
            <summary>
            A Boolean value indicating whether the user is allowed to edit a selected image. ( Deprecated in iOS 3.1.  Use <c>allowsEditing</c> instead.)
            <br></br>Equivalent to the native <c>allowsImageEditing</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>If you allow the user to edit images, the delegate may receive a dictionary with information about the edits that were made.</p>
                <p>This property is set to <c>false</c> by default. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                    <li>Deprecated in iOS 3.1.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.CameraCaptureMode">
            <summary>
            The capture mode used by the camera.
            <br></br>Equivalent to the native <c>cameraCaptureMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The various capture modes are listed in the  “UIImagePickerControllerCameraCaptureMode”  enumeration. The default value is <c>UIImagePickerControllerCameraCaptureModePhoto</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.CameraDevice">
            <summary>
            The camera used by the image picker controller.
            <br></br>Equivalent to the native <c>cameraDevice</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default is <c>UIImagePickerControllerCameraDeviceRear</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isCameraDeviceAvailable:</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.CameraFlashMode">
            <summary>
            The flash mode used by the active camera.
            <br></br>Equivalent to the native <c>cameraFlashMode</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The various flash modes are listed in the  “UIImagePickerControllerCameraFlashMode”  enumeration. The default value is <c>UIImagePickerControllerCameraFlashModeAuto</c>.</p>
                <p>The value of this property specifies the behavior of the still-image flash when the value of the <c>cameraCaptureMode</c> property is <c>UIImagePickerControllerCameraCaptureModePhoto</c>, and specifies the behavior of the video torch when <c>cameraCaptureMode</c> is <c>UIImagePickerControllerCameraCaptureModeVideo</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>cameraCaptureMode</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.CameraOverlayView">
            <summary>
            The custom view to display on top of the default image picker interface.
            <br></br>Equivalent to the native <c>cameraOverlayView</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>You can use an overlay view to present a custom view hierarchy on top of the default image picker interface. The image picker layers your custom overlay view on top of the other image picker views and positions it relative to the screen coordinates. If you have the default camera controls set to be visible, incorporate transparency into your view, or position it to avoid obscuring the underlying content.</p>
                <p>This property is set to <c>null</c> by default.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>showsCameraControls</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.CameraViewTransform">
            <summary>
            The transform to apply to the camera’s preview image.
            <br></br>Equivalent to the native <c>cameraViewTransform</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>This transform affects the live preview image only and does not affect your custom overlay view or the default image picker controls. You can use this property in conjunction with custom controls to implement your own electronic zoom behaviors.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.Delegate">
            <summary>
            The image picker’s delegate object.
            <br></br>Equivalent to the native <c>delegate</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The delegate receives notifications when the user picks an image or movie, or exits the picker interface. The delegate also decides when to dismiss the picker interface, so you must provide a delegate to use a picker. If this property is <c>null</c>, the picker is dismissed immediately if you try to show it.</p>
                <p>For information about the methods you can implement for your delegate object, see <em>UIImagePickerControllerDelegate Protocol Reference</em>. </p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.MediaTypes">
            <summary>
            An array indicating the media types to be accessed by the media picker controller.
            <br></br>Equivalent to the native <c>mediaTypes</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Depending on the media types you assign to this property, the picker displays a dedicated interface for still images or movies, or a selection control that lets the user choose the picker interface. Before setting this property, check which media types are available by calling the <c>availableMediaTypesForSourceType:</c> class method.</p>
                <p>If you set this property to an empty array, or to an array in which none of the media types is available for the current source, the system throws an exception.</p>
                <p>When capturing media, the value of this property determines the camera interface to display. When browsing saved media, this property determines the types of media presented in the interface.</p>
                <p>By default, this property is set to the single value <c>kUTTypeImage</c>, which designates the still camera interface when capturing media, and specifies that only still images should be displayed in the media picker when browsing saved media. To designate the movie capture interface, or to indicate that only movies should be displayed when browsing saved media, use the <c>kUTTypeMovie</c> identifier in a statement like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>myImagePickerController.mediaTypes =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [[NSArray alloc] initWithObjects: (NSString *) kUTTypeMovie, nil];  </pre>
                        </td>
                    </tr>
                </table>
                <p>To designate all available media types for a source, use a statement like this:</p>
                <table>
                    <tr>
                        <td scope="row">
                            <pre>myImagePickerController.mediaTypes =  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>    [UIImagePickerController availableMediaTypesForSourceType:  </pre>
                        </td>
                    </tr>
                    <tr>
                        <td scope="row">
                            <pre>        UIImagePickerControllerSourceTypeCamera];  </pre>
                        </td>
                    </tr>
                </table>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.ShowsCameraControls">
            <summary>
            Indicates whether the image picker displays the default camera controls.
            <br></br>Equivalent to the native <c>showsCameraControls</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value of this property is <c>true</c>, which specifies that the default camera controls are visible in the picker. Set it to <c>false</c> to hide the default controls if you want to instead provide a custom overlay view using the <c>cameraOverlayView</c> property. </p>
                <p>
                    <strong>Note:</strong> In iOS 3.1.3 and earlier, hiding the default camera controls limits you to taking still pictures only, regardless of whether movie capture is available on the device.</p>
                <p>
                </p>
                <p>If you set this property to <c>false</c> and provide your own custom controls, you can take multiple pictures before dismissing the image picker interface. However, if you set this property to <c>true</c>, your delegate must dismiss the image picker interface after the user takes one picture or cancels the operation.</p>
                <p>You can access this property only when the source type of the image picker is set to <c>UIImagePickerControllerSourceTypeCamera</c>. Attempting to access this property for other source types results in the throwing of an <c>NSInvalidArgumentException</c> exception. Depending on the value you assign to the <c>mediaTypes</c> property, the default controls display the still camera or movie camera interface, or a selection control that lets the user choose the picker interface.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraOverlayView</c>
                    </li>
                    <li>
                        <c>– takePicture</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.SourceType">
            <summary>
            The type of picker interface to be displayed by the controller.
            <br></br>Equivalent to the native <c>sourceType</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Prior to running the picker interface, set this value to the desired source type. The source type you set must be available and an exception is thrown if it is not. If you change this property while the picker is visible, the picker interface changes to match the new value in this property.</p>
                <p>The various source types are listed in the  “UIImagePickerControllerSourceType”  enumeration. The default value is <c>UIImagePickerControllerSourceTypePhotoLibrary</c>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.VideoMaximumDuration">
            <summary>
            The maximum duration, in seconds, for a video recording.
            <br></br>Equivalent to the native <c>videoMaximumDuration</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The default value for this property is 10 minutes (600 seconds). When a user taps the Share button to send a movie to MMS, MobileMe, YouTube, or another destination, an appropriate duration limit and an appropriate video quality are enforced.</p>
                <p>This property is available only if the <c>mediaTypes</c> property’s value array includes the <c>kUTTypeMovie</c> media type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerController.VideoQuality">
            <summary>
            The video recording and transcoding quality.
            <br></br>Equivalent to the native <c>videoQuality</c> property.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The video quality setting specified by this property is used during video recording. It is also used whenever picking a recorded movie. Specifically, if the video quality setting is lower than the video quality of an existing movie, displaying that movie in the picker results in transcoding the movie to the lower quality.</p>
                <p>The various video qualities are listed in the <c>“UIImagePickerControllerQualityType”</c> enumeration. The default value is <c>UIImagePickerControllerQualityTypeMedium</c>. To capture or transcode a movie using a video quality other than the default value, you must set the quality explicitly.</p>
                <p>This property is available only if the <c>mediaTypes</c> property’s value array includes the <c>kUTTypeMovie</c> media type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_availableCaptureModesForCameraDevice_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_availableMediaTypesForSourceType_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isCameraDeviceAvailable_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isFlashAvailableForCameraDevice_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_isSourceTypeAvailable_(System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_allowsEditing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_allowsEditing(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_allowsImageEditing(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_allowsImageEditing(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraCaptureMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraCaptureMode(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraDevice(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraDevice(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraFlashMode(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraFlashMode(System.String,System.Int32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraOverlayView(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraOverlayView(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_cameraViewTransform(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_cameraViewTransform(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_delegate(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_delegate(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_mediaTypes(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_mediaTypes(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_showsCameraControls(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_showsCameraControls(System.String,System.Boolean)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_sourceType(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_sourceType(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_videoMaximumDuration(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_videoMaximumDuration(System.String,System.Double)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_get_videoQuality(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_set_videoQuality(System.String,System.UInt32)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_startVideoCapture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_stopVideoCapture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.UP_UIImagePickerController_takePicture(System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.InstancesRespondToSelector(System.String)">
            <summary>
            Returns whether native instances of this class can respond to a selector with the same name.
            <br></br>Equivalent to the native <c>instancesRespondToSelector:</c> class method.
            </summary>
            <returns>
                <c>true</c> if native instances of this class can respond to a selector with the same name, <c>false</c> otherwise.
            </returns>
            <param name="selectorName">The literal name of the selector.</param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.AvailableCaptureModes(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Returns an array of <c>double</c> objects indicating the capture modes supported by a given camera device.
            <br></br>Equivalent to the native <c>availableCaptureModesForCameraDevice:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera you want to interrogate.</p>
                <b>Return Value</b>
                <p>An array of <c>double</c> objects indicating the capture modes supported by <em>cameraDevice</em>.  </p>
                <b>Discussion</b>
                <p>See  “UIImagePickerControllerCameraCaptureMode”  for possible values.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraCaptureMode</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.AvailableMediaTypes(U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType)">
            <summary>
            Returns an array of the available media types for the specified source type.
            <br></br>Equivalent to the native <c>availableMediaTypesForSourceType:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>sourceType</em>
                <p>The source to use to pick an image.</p>
                <b>Return Value</b>
                <p>An array whose elements identify the available media types for the specified source type.</p>
                <b>Discussion</b>
                <p>Some iOS devices support video recording. Use this method, along with the <c>isSourceTypeAvailable:</c> method, to determine if video recording is available on a device. The availability of video recording is indicated by the presence of the <c>kUTTypeMovie</c> media type for the <c>UIImagePickerControllerSourceTypeCamera</c> source type.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ isSourceTypeAvailable:</c>
                    </li>
                </ul>
            </remarks>
            <param name="sourceType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsCameraDeviceAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Returns a Boolean value that indicates whether a given camera is available.
            <br></br>Equivalent to the native <c>isCameraDeviceAvailable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera whose availability you want to check.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the camera indicated by <em>cameraDevice</em> is available, or <c>false</c> if it is not available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>+ isFlashAvailableForCameraDevice:</c>
                    </li>
                    <li>
                        <c>+ availableCaptureModesForCameraDevice:</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsFlashAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice)">
            <summary>
            Indicates whether a given camera has flash illumination capability.
            <br></br>Equivalent to the native <c>isFlashAvailableForCameraDevice:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>cameraDevice</em>
                <p>A  “UIImagePickerControllerCameraDevice”  constant indicating the camera whose flash capability you want to know.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if <em>cameraDevice</em> can use flash illumination, or <c>false</c> if it cannot.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraDevice</c>
                    </li>
                    <li>
                        <c>cameraFlashMode</c>
                    </li>
                </ul>
            </remarks>
            <param name="cameraDevice">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.IsSourceTypeAvailable(U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType)">
            <summary>
            Returns a Boolean value indicating whether the device supports picking media using the specified source type.
            <br></br>Equivalent to the native <c>isSourceTypeAvailable:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>sourceType</em>
                <p>The source to use to pick an image or movie.</p>
                <b>Return Value</b>
                <p>
                    <c>true</c> if the device supports the specified source type; <c>false</c> if the specified source type is not available. </p>
                <b>Discussion</b>
                <p>Because a media source may not be present or may be unavailable, devices may not always support all source types. For example, if you attempt to pick an image from the user’s library and the library is empty, this method returns <c>false</c>. Similarly, if the camera is already in use, this method returns <c>false</c>.</p>
                <p>Before attempting to use an <c>UIImagePickerController</c> object to pick an image, you must call this method to ensure that the desired source type is available.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>+ availableMediaTypesForSourceType:</c>
                    </li>
                </ul>
            </remarks>
            <param name="sourceType">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.StartVideoCapture">
            <summary>
            Starts video capture using the camera specified by the <c>UIImagePickerControllerCameraDevice</c> property.
            <br></br>Equivalent to the native <c>startVideoCapture</c> method.
            </summary>
            <remarks>
                <b>Return Value</b>
                <p>
                    <c>true</c> on success or <c>false</c> on failure. This method may return a value of <c>false</c> for various reasons, among them the following:</p>
                <ul class="ul">
                    <li class="li">
                        <p>Movie capture is already in progress</p>
                    </li>
                    <li class="li">
                        <p>The device does not support movie capture</p>
                    </li>
                    <li class="li">
                        <p>The device is out of disk space</p>
                    </li>
                </ul>
                <b>Discussion</b>
                <p>Use this method in conjunction with a custom overlay view to initiate the programmatic capture of a movie. You can take more than one movie without leaving the interface, but to do so requires you to hide the default image picker controls.</p>
                <p>Calling this method while a movie is being captured has no effect. You must call the <c>stopVideoCapture</c> method, and then wait until the associated delegate object receives an <c>imagePickerController:didFinishPickingMediaWithInfo:</c> message, before you can capture another movie.</p>
                <p>Calling this method when the source type of the image picker is set to a value other than <c>UIImagePickerControllerSourceTypeCamera</c> results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <p>If you require additional options or more control over movie capture, use the movie capture methods in the AV Foundation framework. Refer to <em>AV Foundation Framework Reference</em>.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.StopVideoCapture">
            <summary>
            Stops video capture.
            <br></br>Equivalent to the native <c>stopVideoCapture</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>After you call this method to stop video capture, the system calls the image picker delegate’s <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 4.0 and later.</li>
                </ul>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerController.TakePicture">
            <summary>
            Captures a still image using the camera.
            <br></br>Equivalent to the native <c>takePicture</c> method.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>Use this method in conjunction with a custom overlay view to initiate the programmatic capture of a still image. This supports taking more than one picture without leaving the interface, but requires that you hide the default image picker controls.</p>
                <p>Calling this method while an image is being captured has no effect. You must wait until the associated delegate object receives an <c>imagePickerController:didFinishPickingMediaWithInfo:</c> message before you can capture another picture.</p>
                <p>Calling this method when the source type of the image picker is set to a value other than <c>UIImagePickerControllerSourceTypeCamera</c> results in the throwing of an <c>NSInvalidArgumentException</c> exception.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.1 and later.</li>
                </ul>
                <b>See Also</b>
                <ul>
                    <li>
                        <c>cameraOverlayView</c>
                    </li>
                </ul>
            </remarks>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode">
            <summary>
            The category of media for the camera to capture.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraCaptureMode</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode.Video">
            <summary>
                <p>Specifies that the camera captures movies.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraCaptureModeVideo</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraCaptureMode.Photo">
            <summary>
                <p>Specifies that the camera captures still images.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraCaptureModePhoto</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice">
            <summary>
            The camera to use for image or movie capture.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraDevice</c> property.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice.Rear">
            <summary>
                <p>Specifies the camera on the rear of the device.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraDeviceRear</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraDevice.Front">
            <summary>
                <p>Specifies the camera on the front of the device.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraDeviceFront</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode">
            <summary>
            The flash mode to use with the active camera.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>cameraFlashMode</c> property.</p>
                <p>The behavior of the flash depends on the camera capture mode.</p>
                <ul class="ul">
                    <li class="li">
                        <p>For a <c>cameraCaptureMode</c> value of <c>UIImagePickerControllerCameraCaptureModePhoto</c>, flash is used to transiently illuminate the subject during still image capture.</p>
                    </li>
                    <li class="li">
                        <p>For a <c>cameraCaptureMode</c> value of <c>UIImagePickerControllerCameraCaptureModeVideo</c>, flash is used to continuously illuminate the subject during movie capture.</p>
                    </li>
                </ul>
                <p>For a given camera on a device, flash may or may not be available. You specify the active camera by way of the <c>cameraDevice</c> property. You can determine if the active camera has flash available by calling the <c>isFlashAvailableForCameraDevice:</c> class method.</p>
                <p>You can manipulate the flash directly to provide effects such as a strobe light. Present a picker interface set to use video capture mode. Then, turn the flash LED on or off by setting the <c>cameraFlashMode</c> property to <c>UIImagePickerControllerCameraFlashModeOn</c> or <c>UIImagePickerControllerCameraFlashModeOff</c>.</p>
                <br />
                <!-- Media player includes -->
                <!-- /Media player includes -->
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.On">
            <summary>
                <p>Specifies that flash illumination is always on, no matter what the ambient light conditions are.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeOn</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.Auto">
            <summary>
                <p>Specifies that the device should consider ambient light conditions to automatically determine whether or not to use flash illumination.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeAuto</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerCameraFlashMode.Off">
            <summary>
                <p>Specifies that flash illumination is always off, no matter what the ambient light conditions are.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerCameraFlashModeOff</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate">
            <summary>
            The <c>UIImagePickerControllerDelegate</c> protocol defines methods that your delegate object must implement to interact with the image picker interface. The methods of this protocol notify your delegate when the user either picks an image or movie, or cancels the picker operation.
            </summary>
            <remarks>
                <p>The delegate methods are responsible for dismissing the picker when the operation completes. To dismiss the picker, call the <c>dismissModalViewControllerAnimated:</c> method of the parent controller responsible for displaying the <c>UIImagePickerController</c> object.</p>
                <p>To save a still image to the user’s Camera Roll album, call the <c>UIImageWriteToSavedPhotosAlbum</c> function from within the body of the <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method. To save a movie to the user’s Camera Roll album, instead call the <c>UISaveVideoAtPathToSavedPhotosAlbum</c> function. These functions, described in <em>UIKit Function Reference</em>, save the image or movie only; they do not save metadata.</p>
                <p>Starting in iOS 4.0, you can save still-image metadata, along with a still image, to the Camera Roll. To do this, use the <c>writeImageToSavedPhotosAlbum:metadata:completionBlock:</c> method of the Assets Library framework. See the description for the <c>UIImagePickerControllerMediaMetadata</c> key.</p>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.#ctor(U3DXT.iOS.Native.Internals._IosBaseClass._NewHelper,System.String)">
            <summary>
            U3DXT internal constructor.
            </summary>
            <param name="helper">
            </param>
            <param name="className">
            </param>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._imagePickerController_didFinishPickingMediaWithInfo__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_imagePickerController_didFinishPickingMediaWithInfo__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._imagePickerControllerDidCancel__handler">
            <summary>
                <br>
                </br>Equivalent to the native <c>_imagePickerControllerDidCancel__handler</c> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.UP_UIImagePickerControllerDelegate_set__imagePickerController_didFinishPickingMediaWithInfo__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.UP_UIImagePickerControllerDelegate_set__imagePickerControllerDidCancel__handler(System.String,System.String)">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate._InitImplementedMethods">
            <summary>U3DXT internal.</summary>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.DidFinishPickingMediaWithInfo(U3DXT.iOS.Native.UIKit.UIImagePickerController,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            (optional) Tells the delegate that the user picked a still image or movie.
            <br></br>Equivalent to the native <c>imagePickerController:didFinishPickingMediaWithInfo:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>picker</em>
                <p>The controller object managing the image picker interface.</p>
                <em>info</em>
                <p>A dictionary containing the original image and the edited image, if an image was picked; or a filesystem URL for the movie, if a movie was picked. The dictionary also contains any relevant editing information. The keys for this dictionary are listed in  “Editing Information Keys.”   </p>
                <b>Discussion</b>
                <p>Your delegate object’s implementation of this method should pass the specified media on to any custom code that needs it, and should then dismiss the picker view.</p>
                <p>When editing is enabled, the image picker view presents the user with a preview of the currently selected image or movie along with controls for modifying it. (This behavior is managed by the picker view prior to calling this method.) If the user modifies the image or movie, the editing information is available in the <c>info</c> parameter. The original image is also returned in the <c>info</c> parameter.</p>
                <p>If you set the image picker’s <c>showsCameraControls</c> property to <c>false</c> and provide your own custom controls, you can take multiple pictures before dismissing the image picker interface. However, if you set that property to <c>true</c>, your delegate must dismiss the image picker interface after the user takes one picture or cancels the operation.</p>
                <p>Implementation of this method is optional, but expected.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 3.0 and later.</li>
                </ul>
            </remarks>
            <param name="picker">
            </param>
            <param name="info">
            </param>
        </member>
        <member name="M:U3DXT.iOS.Native.UIKit.UIImagePickerControllerDelegate.DidCancel(U3DXT.iOS.Native.UIKit.UIImagePickerController)">
            <summary>
            (optional) Tells the delegate that the user cancelled the pick operation.
            <br></br>Equivalent to the native <c>imagePickerControllerDidCancel:</c> method.
            </summary>
            <remarks>
                <b>Parameters</b>
                <p>
                </p>
                <em>picker</em>
                <p>The controller object managing the image picker interface.</p>
                <b>Discussion</b>
                <p>Your delegate’s implementation of this method should dismiss the picker view by calling the <c>dismissModalViewControllerAnimated:</c> method of the parent view controller.</p>
                <p>Implementation of this method is optional, but expected.</p>
                <b>Availability</b>
                <ul>
                    <li>Available in iOS 2.0 and later.</li>
                </ul>
            </remarks>
            <param name="picker">
            </param>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType">
            <summary>
            Video quality settings for movies recorded with the built-in camera, or transcoded by displaying in the image picker.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>The constants in this enumeration are for use as values of the <c>videoQuality</c> property.</p>
                <p>The video quality setting applies to transcoding as well as to recording. Specifically, if the video quality setting is lower than the video quality of an existing movie, displaying that movie in the picker results in transcoding the movie to the lower quality.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.IFrame960x540">
            <summary>
                <p>If recording, specifies that you want to use 960x540 iFrame format.</p>
                <p>The Apple iFrame format supports video editing by keeping content in its native recorded format while editing.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeIFrame960x540</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.Medium">
            <summary>
                <p>If recording, specifies that you want to use medium-quality video recording.</p>
                <p>Recorded files can usually be transferred using Wi-Fi. This is the default video quality setting.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to medium video quality.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeMedium</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.High">
            <summary>
                <p>If recording, specifies that you want to use the highest-quality video recording supported for the active camera on the device.</p>
                <p>Recorded files are suitable for on-device playback and for wired transfer to the Desktop using Image Capture; they are likely to be too large for transfer using Wi-Fi.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you do not want to reduce the video quality of the movie.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeHigh</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.Low">
            <summary>
                <p>If recording, specifies that you want to use low-quality video recording.</p>
                <p>Recorded files can usually be transferred over the cellular network.</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to low video quality.</p>
                <p>Available in iOS 3.1 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeLow</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.VGA640x480">
            <summary>
                <p>If recording, specifies that you want to use VGA-quality video recording (pixel dimensions of 640x480).</p>
                <p>If displaying a recorded movie in the image picker, specifies that you want to transcode higher-quality movies to VGA video quality.</p>
                <p>Available in iOS 4.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityType640x480</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerQualityType.IFrame1280x720">
            <summary>
                <p>If recording, specifies that you want to use 1280x720 iFrame format.</p>
                <p>The Apple iFrame format supports video editing by keeping content in its native recorded format while editing.</p>
                <p>Available in iOS 5.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerQualityTypeIFrame1280x720</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType">
            <summary>
            The source to use when picking an image or when determining available media types.
            </summary>
            <remarks>
                <b>Discussion</b>
                <p>A given source may not be available on a given device because the source is not physically present or because it cannot currently be accessed.</p>
            </remarks>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.PhotoLibrary">
            <summary>
                <p>Specifies the device’s photo library as the source for the image picker controller.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypePhotoLibrary</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.Camera">
            <summary>
                <p>Specifies the device’s built-in camera as the source for the image picker controller. Indicate the specific camera you want (front or rear, as available) by using the <c>cameraDevice</c> property.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypeCamera</c> enum constant.
            </summary>
        </member>
        <member name="F:U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType.SavedPhotosAlbum">
            <summary>
                <p>Specifies the device’s Camera Roll album as the source for the image picker controller. If the device does not have a camera, specifies the Saved Photos album as the source.</p>
                <p>Available in iOS 2.0 and later.</p>
                <p>
                </p>
                <br>
                </br>Equivalent to the native <c>UIImagePickerControllerSourceTypeSavedPhotosAlbum</c> enum constant.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.GUI.GUIXT">
            <summary>
            High-level API for GUI.
            </summary>
        </member>
        <member name="E:U3DXT.iOS.GUI.GUIXT.MediaPicked">
            <summary>
            Occurs when a share operation has completed.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.GUI.GUIXT.ShowImagePicker(U3DXT.iOS.Native.UIKit.UIImagePickerControllerSourceType)">
            <summary>
            Shows the image picker.
            </summary>
        </member>
        <member name="T:U3DXT.iOS.GUI.MediaPickedEventArgs">
            <summary>
            Media picked event arguments.
            </summary>
        </member>
        <member name="M:U3DXT.iOS.GUI.MediaPickedEventArgs.#ctor(U3DXT.iOS.Native.UIKit.UIImage)">
            <summary>
            Initializes a new instance of the <see cref="T:U3DXT.iOS.GUI.MediaPickedEventArgs" /> class.
            </summary>
            <param name="image">Image.</param>
        </member>
        <member name="F:U3DXT.iOS.GUI.MediaPickedEventArgs.Image">
            <summary>
            The image.
            </summary>
        </member>
    </members>
</doc>
